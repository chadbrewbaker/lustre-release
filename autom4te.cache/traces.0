m4trace:/usr/local/share/aclocal/ltargz.m4:74: -1- AC_DEFUN([LT_FUNC_ARGZ], [
AC_CHECK_HEADERS([argz.h], [], [], [AC_INCLUDES_DEFAULT])

AC_CHECK_TYPES([error_t],
  [],
  [AC_DEFINE([error_t], [int],
   [Define to a type to use for 'error_t' if it is not otherwise available.])
   AC_DEFINE([__error_t_defined], [1], [Define so that glibc/gnulib argp.h
    does not typedef error_t.])],
  [#if defined(HAVE_ARGZ_H)
#  include <argz.h>
#endif])

LT_ARGZ_H=
AC_CHECK_FUNCS([argz_add argz_append argz_count argz_create_sep argz_insert \
	argz_next argz_stringify], [], [LT_ARGZ_H=lt__argz.h; AC_LIBOBJ([lt__argz])])

dnl if have system argz functions, allow forced use of
dnl libltdl-supplied implementation (and default to do so
dnl on "known bad" systems). Could use a runtime check, but
dnl (a) detecting malloc issues is notoriously unreliable
dnl (b) only known system that declares argz functions,
dnl     provides them, yet they are broken, is cygwin
dnl     releases prior to 16-Mar-2007 (1.5.24 and earlier)
dnl So, it's more straightforward simply to special case
dnl this for known bad systems.
AS_IF([test -z "$LT_ARGZ_H"],
    [AC_CACHE_CHECK(
        [if argz actually works],
        [lt_cv_sys_argz_works],
        [[case $host_os in #(
	 *cygwin*)
	   lt_cv_sys_argz_works=no
	   if test no != "$cross_compiling"; then
	     lt_cv_sys_argz_works="guessing no"
	   else
	     lt_sed_extract_leading_digits='s/^\([0-9\.]*\).*/\1/'
	     save_IFS=$IFS
	     IFS=-.
	     set x `uname -r | sed -e "$lt_sed_extract_leading_digits"`
	     IFS=$save_IFS
	     lt_os_major=${2-0}
	     lt_os_minor=${3-0}
	     lt_os_micro=${4-0}
	     if test 1 -lt "$lt_os_major" \
		|| { test 1 -eq "$lt_os_major" \
		  && { test 5 -lt "$lt_os_minor" \
		    || { test 5 -eq "$lt_os_minor" \
		      && test 24 -lt "$lt_os_micro"; }; }; }; then
	       lt_cv_sys_argz_works=yes
	     fi
	   fi
	   ;; #(
	 *) lt_cv_sys_argz_works=yes ;;
	 esac]])
     AS_IF([test yes = "$lt_cv_sys_argz_works"],
        [AC_DEFINE([HAVE_WORKING_ARGZ], 1,
                   [This value is set to 1 to indicate that the system argz facility works])],
        [LT_ARGZ_H=lt__argz.h
        AC_LIBOBJ([lt__argz])])])

AC_SUBST([LT_ARGZ_H])
])
m4trace:/usr/local/share/aclocal/ltdl.m4:19: -1- AC_DEFUN([LT_CONFIG_LTDL_DIR], [AC_BEFORE([$0], [LTDL_INIT])
_$0($*)
])
m4trace:/usr/local/share/aclocal/ltdl.m4:77: -1- AC_DEFUN([LTDL_CONVENIENCE], [AC_BEFORE([$0], [LTDL_INIT])dnl
dnl Although the argument is deprecated and no longer documented,
dnl LTDL_CONVENIENCE used to take a DIRECTORY orgument, if we have one
dnl here make sure it is the same as any other declaration of libltdl's
dnl location!  This also ensures lt_ltdl_dir is set when configure.ac is
dnl not yet using an explicit LT_CONFIG_LTDL_DIR.
m4_ifval([$1], [_LT_CONFIG_LTDL_DIR([$1])])dnl
_$0()
])
m4trace:/usr/local/share/aclocal/ltdl.m4:83: -1- AU_DEFUN([AC_LIBLTDL_CONVENIENCE], [_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_CONVENIENCE])
m4trace:/usr/local/share/aclocal/ltdl.m4:83: -1- AC_DEFUN([AC_LIBLTDL_CONVENIENCE], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBLTDL_CONVENIENCE' is obsolete.
You should run autoupdate.])dnl
_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_CONVENIENCE])
m4trace:/usr/local/share/aclocal/ltdl.m4:133: -1- AC_DEFUN([LTDL_INSTALLABLE], [AC_BEFORE([$0], [LTDL_INIT])dnl
dnl Although the argument is deprecated and no longer documented,
dnl LTDL_INSTALLABLE used to take a DIRECTORY orgument, if we have one
dnl here make sure it is the same as any other declaration of libltdl's
dnl location!  This also ensures lt_ltdl_dir is set when configure.ac is
dnl not yet using an explicit LT_CONFIG_LTDL_DIR.
m4_ifval([$1], [_LT_CONFIG_LTDL_DIR([$1])])dnl
_$0()
])
m4trace:/usr/local/share/aclocal/ltdl.m4:139: -1- AU_DEFUN([AC_LIBLTDL_INSTALLABLE], [_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_INSTALLABLE])
m4trace:/usr/local/share/aclocal/ltdl.m4:139: -1- AC_DEFUN([AC_LIBLTDL_INSTALLABLE], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBLTDL_INSTALLABLE' is obsolete.
You should run autoupdate.])dnl
_LT_CONFIG_LTDL_DIR([m4_default([$1], [libltdl])])
_LTDL_INSTALLABLE])
m4trace:/usr/local/share/aclocal/ltdl.m4:216: -1- AC_DEFUN([_LT_LIBOBJ], [
  m4_pattern_allow([^_LT_LIBOBJS$])
  _LT_LIBOBJS="$_LT_LIBOBJS $1.$ac_objext"
])
m4trace:/usr/local/share/aclocal/ltdl.m4:349: -1- AC_DEFUN([LTDL_INIT], [dnl Parse OPTIONS
_LT_SET_OPTIONS([$0], [$1])

dnl We need to keep our own list of libobjs separate from our parent project,
dnl and the easiest way to do that is redefine the AC_LIBOBJs macro while
dnl we look for our own LIBOBJs.
m4_pushdef([AC_LIBOBJ], m4_defn([_LT_LIBOBJ]))
m4_pushdef([AC_LIBSOURCES])

dnl If not otherwise defined, default to the 1.5.x compatible subproject mode:
m4_if(_LTDL_MODE, [],
        [m4_define([_LTDL_MODE], m4_default([$2], [subproject]))
        m4_if([-1], [m4_bregexp(_LTDL_MODE, [\(subproject\|\(non\)?recursive\)])],
                [m4_fatal([unknown libltdl mode: ]_LTDL_MODE)])])

AC_ARG_WITH([included_ltdl],
    [AS_HELP_STRING([--with-included-ltdl],
                    [use the GNU ltdl sources included here])])

if test yes != "$with_included_ltdl"; then
  # We are not being forced to use the included libltdl sources, so
  # decide whether there is a useful installed version we can use.
  AC_CHECK_HEADER([ltdl.h],
      [AC_CHECK_DECL([lt_dlinterface_register],
	   [AC_CHECK_LIB([ltdl], [lt_dladvise_preload],
	       [with_included_ltdl=no],
	       [with_included_ltdl=yes])],
	   [with_included_ltdl=yes],
	   [AC_INCLUDES_DEFAULT
	    #include <ltdl.h>])],
      [with_included_ltdl=yes],
      [AC_INCLUDES_DEFAULT]
  )
fi

dnl If neither LT_CONFIG_LTDL_DIR, LTDL_CONVENIENCE nor LTDL_INSTALLABLE
dnl was called yet, then for old times' sake, we assume libltdl is in an
dnl eponymous directory:
AC_PROVIDE_IFELSE([LT_CONFIG_LTDL_DIR], [], [_LT_CONFIG_LTDL_DIR([libltdl])])

AC_ARG_WITH([ltdl_include],
    [AS_HELP_STRING([--with-ltdl-include=DIR],
                    [use the ltdl headers installed in DIR])])

if test -n "$with_ltdl_include"; then
  if test -f "$with_ltdl_include/ltdl.h"; then :
  else
    AC_MSG_ERROR([invalid ltdl include directory: '$with_ltdl_include'])
  fi
else
  with_ltdl_include=no
fi

AC_ARG_WITH([ltdl_lib],
    [AS_HELP_STRING([--with-ltdl-lib=DIR],
                    [use the libltdl.la installed in DIR])])

if test -n "$with_ltdl_lib"; then
  if test -f "$with_ltdl_lib/libltdl.la"; then :
  else
    AC_MSG_ERROR([invalid ltdl library directory: '$with_ltdl_lib'])
  fi
else
  with_ltdl_lib=no
fi

case ,$with_included_ltdl,$with_ltdl_include,$with_ltdl_lib, in
  ,yes,no,no,)
	m4_case(m4_default(_LTDL_TYPE, [convenience]),
	    [convenience], [_LTDL_CONVENIENCE],
	    [installable], [_LTDL_INSTALLABLE],
	  [m4_fatal([unknown libltdl build type: ]_LTDL_TYPE)])
	;;
  ,no,no,no,)
	# If the included ltdl is not to be used, then use the
	# preinstalled libltdl we found.
	AC_DEFINE([HAVE_LTDL], [1],
	  [Define this if a modern libltdl is already installed])
	LIBLTDL=-lltdl
	LTDLDEPS=
	LTDLINCL=
	;;
  ,no*,no,*)
	AC_MSG_ERROR(['--with-ltdl-include' and '--with-ltdl-lib' options must be used together])
	;;
  *)	with_included_ltdl=no
	LIBLTDL="-L$with_ltdl_lib -lltdl"
	LTDLDEPS=
	LTDLINCL=-I$with_ltdl_include
	;;
esac
INCLTDL=$LTDLINCL

# Report our decision...
AC_MSG_CHECKING([where to find libltdl headers])
AC_MSG_RESULT([$LTDLINCL])
AC_MSG_CHECKING([where to find libltdl library])
AC_MSG_RESULT([$LIBLTDL])

_LTDL_SETUP

dnl restore autoconf definition.
m4_popdef([AC_LIBOBJ])
m4_popdef([AC_LIBSOURCES])

AC_CONFIG_COMMANDS_PRE([
    _ltdl_libobjs=
    _ltdl_ltlibobjs=
    if test -n "$_LT_LIBOBJS"; then
      # Remove the extension.
      _lt_sed_drop_objext='s/\.o$//;s/\.obj$//'
      for i in `for i in $_LT_LIBOBJS; do echo "$i"; done | sed "$_lt_sed_drop_objext" | sort -u`; do
        _ltdl_libobjs="$_ltdl_libobjs $lt_libobj_prefix$i.$ac_objext"
        _ltdl_ltlibobjs="$_ltdl_ltlibobjs $lt_libobj_prefix$i.lo"
      done
    fi
    AC_SUBST([ltdl_LIBOBJS], [$_ltdl_libobjs])
    AC_SUBST([ltdl_LTLIBOBJS], [$_ltdl_ltlibobjs])
])

# Only expand once:
m4_define([LTDL_INIT])
])
m4trace:/usr/local/share/aclocal/ltdl.m4:352: -1- AU_DEFUN([AC_LIB_LTDL], [LTDL_INIT($@)])
m4trace:/usr/local/share/aclocal/ltdl.m4:352: -1- AC_DEFUN([AC_LIB_LTDL], [AC_DIAGNOSE([obsolete], [The macro `AC_LIB_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:/usr/local/share/aclocal/ltdl.m4:353: -1- AU_DEFUN([AC_WITH_LTDL], [LTDL_INIT($@)])
m4trace:/usr/local/share/aclocal/ltdl.m4:353: -1- AC_DEFUN([AC_WITH_LTDL], [AC_DIAGNOSE([obsolete], [The macro `AC_WITH_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:/usr/local/share/aclocal/ltdl.m4:354: -1- AU_DEFUN([LT_WITH_LTDL], [LTDL_INIT($@)])
m4trace:/usr/local/share/aclocal/ltdl.m4:354: -1- AC_DEFUN([LT_WITH_LTDL], [AC_DIAGNOSE([obsolete], [The macro `LT_WITH_LTDL' is obsolete.
You should run autoupdate.])dnl
LTDL_INIT($@)])
m4trace:/usr/local/share/aclocal/ltdl.m4:421: -1- AC_DEFUN([_LTDL_SETUP], [AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([LT_SYS_MODULE_EXT])dnl
AC_REQUIRE([LT_SYS_MODULE_PATH])dnl
AC_REQUIRE([LT_SYS_DLSEARCH_PATH])dnl
AC_REQUIRE([LT_LIB_DLLOAD])dnl
AC_REQUIRE([LT_SYS_SYMBOL_USCORE])dnl
AC_REQUIRE([LT_FUNC_DLSYM_USCORE])dnl
AC_REQUIRE([LT_SYS_DLOPEN_DEPLIBS])dnl
AC_REQUIRE([LT_FUNC_ARGZ])dnl

m4_require([_LT_CHECK_OBJDIR])dnl
m4_require([_LT_HEADER_DLFCN])dnl
m4_require([_LT_CHECK_DLPREOPEN])dnl
m4_require([_LT_DECL_SED])dnl

dnl Don't require this, or it will be expanded earlier than the code
dnl that sets the variables it relies on:
_LT_ENABLE_INSTALL

dnl _LTDL_MODE specific code must be called at least once:
_LTDL_MODE_DISPATCH

# In order that ltdl.c can compile, find out the first AC_CONFIG_HEADERS
# the user used.  This is so that ltdl.h can pick up the parent projects
# config.h file, The first file in AC_CONFIG_HEADERS must contain the
# definitions required by ltdl.c.
# FIXME: Remove use of undocumented AC_LIST_HEADERS (2.59 compatibility).
AC_CONFIG_COMMANDS_PRE([dnl
m4_pattern_allow([^LT_CONFIG_H$])dnl
m4_ifset([AH_HEADER],
    [LT_CONFIG_H=AH_HEADER],
    [m4_ifset([AC_LIST_HEADERS],
	    [LT_CONFIG_H=`echo "AC_LIST_HEADERS" | $SED 's|^[[      ]]*||;s|[[ :]].*$||'`],
	[])])])
AC_SUBST([LT_CONFIG_H])

AC_CHECK_HEADERS([unistd.h dl.h sys/dl.h dld.h mach-o/dyld.h dirent.h],
	[], [], [AC_INCLUDES_DEFAULT])

AC_CHECK_FUNCS([closedir opendir readdir], [], [AC_LIBOBJ([lt__dirent])])
AC_CHECK_FUNCS([strlcat strlcpy], [], [AC_LIBOBJ([lt__strl])])

m4_pattern_allow([LT_LIBEXT])dnl
AC_DEFINE_UNQUOTED([LT_LIBEXT],["$libext"],[The archive extension])

name=
eval "lt_libprefix=\"$libname_spec\""
m4_pattern_allow([LT_LIBPREFIX])dnl
AC_DEFINE_UNQUOTED([LT_LIBPREFIX],["$lt_libprefix"],[The archive prefix])

name=ltdl
eval "LTDLOPEN=\"$libname_spec\""
AC_SUBST([LTDLOPEN])
])
m4trace:/usr/local/share/aclocal/ltdl.m4:542: -1- AC_DEFUN([LT_SYS_DLOPEN_DEPLIBS], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
AC_CACHE_CHECK([whether deplibs are loaded by dlopen],
  [lt_cv_sys_dlopen_deplibs],
  [# PORTME does your system automatically load deplibs for dlopen?
  # or its logical equivalent (e.g. shl_load for HP-UX < 11)
  # For now, we just catch OSes we know something about -- in the
  # future, we'll try test this programmatically.
  lt_cv_sys_dlopen_deplibs=unknown
  case $host_os in
  aix3*|aix4.1.*|aix4.2.*)
    # Unknown whether this is true for these versions of AIX, but
    # we want this 'case' here to explicitly catch those versions.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  aix[[4-9]]*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  amigaos*)
    case $host_cpu in
    powerpc)
      lt_cv_sys_dlopen_deplibs=no
      ;;
    esac
    ;;
  bitrig*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  darwin*)
    # Assuming the user has installed a libdl from somewhere, this is true
    # If you are looking for one http://www.opendarwin.org/projects/dlcompat
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  freebsd* | dragonfly*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  gnu* | linux* | k*bsd*-gnu | kopensolaris*-gnu)
    # GNU and its variants, using gnu ld.so (Glibc)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  hpux10*|hpux11*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  interix*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  irix[[12345]]*|irix6.[[01]]*)
    # Catch all versions of IRIX before 6.2, and indicate that we don't
    # know how it worked for any of those versions.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  irix*)
    # The case above catches anything before 6.2, and it's known that
    # at 6.2 and later dlopen does load deplibs.
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  netbsd*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  openbsd*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  osf[[1234]]*)
    # dlopen did load deplibs (at least at 4.x), but until the 5.x series,
    # it did *not* use an RPATH in a shared library to find objects the
    # library depends on, so we explicitly say 'no'.
    lt_cv_sys_dlopen_deplibs=no
    ;;
  osf5.0|osf5.0a|osf5.1)
    # dlopen *does* load deplibs and with the right loader patch applied
    # it even uses RPATH in a shared library to search for shared objects
    # that the library depends on, but there's no easy way to know if that
    # patch is installed.  Since this is the case, all we can really
    # say is unknown -- it depends on the patch being installed.  If
    # it is, this changes to 'yes'.  Without it, it would be 'no'.
    lt_cv_sys_dlopen_deplibs=unknown
    ;;
  osf*)
    # the two cases above should catch all versions of osf <= 5.1.  Read
    # the comments above for what we know about them.
    # At > 5.1, deplibs are loaded *and* any RPATH in a shared library
    # is used to find them so we can finally say 'yes'.
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  qnx*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  solaris*)
    lt_cv_sys_dlopen_deplibs=yes
    ;;
  sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)
    libltdl_cv_sys_dlopen_deplibs=yes
    ;;
  esac
  ])
if test yes != "$lt_cv_sys_dlopen_deplibs"; then
 AC_DEFINE([LTDL_DLOPEN_DEPLIBS], [1],
    [Define if the OS needs help to load dependent libraries for dlopen().])
fi
])
m4trace:/usr/local/share/aclocal/ltdl.m4:545: -1- AU_DEFUN([AC_LTDL_SYS_DLOPEN_DEPLIBS], [m4_if($#, 0, [LT_SYS_DLOPEN_DEPLIBS], [LT_SYS_DLOPEN_DEPLIBS($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:545: -1- AC_DEFUN([AC_LTDL_SYS_DLOPEN_DEPLIBS], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SYS_DLOPEN_DEPLIBS' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLOPEN_DEPLIBS], [LT_SYS_DLOPEN_DEPLIBS($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:577: -1- AC_DEFUN([LT_SYS_MODULE_EXT], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([what extension is used for runtime loadable modules],
  [libltdl_cv_shlibext],
[
module=yes
eval libltdl_cv_shlibext=$shrext_cmds
module=no
eval libltdl_cv_shrext=$shrext_cmds
  ])
if test -n "$libltdl_cv_shlibext"; then
  m4_pattern_allow([LT_MODULE_EXT])dnl
  AC_DEFINE_UNQUOTED([LT_MODULE_EXT], ["$libltdl_cv_shlibext"],
    [Define to the extension used for runtime loadable modules, say, ".so".])
fi
if test "$libltdl_cv_shrext" != "$libltdl_cv_shlibext"; then
  m4_pattern_allow([LT_SHARED_EXT])dnl
  AC_DEFINE_UNQUOTED([LT_SHARED_EXT], ["$libltdl_cv_shrext"],
    [Define to the shared library suffix, say, ".dylib".])
fi
if test -n "$shared_archive_member_spec"; then
  m4_pattern_allow([LT_SHARED_LIB_MEMBER])dnl
  AC_DEFINE_UNQUOTED([LT_SHARED_LIB_MEMBER], ["($shared_archive_member_spec.o)"],
    [Define to the shared archive member specification, say "(shr.o)".])
fi
])
m4trace:/usr/local/share/aclocal/ltdl.m4:580: -1- AU_DEFUN([AC_LTDL_SHLIBEXT], [m4_if($#, 0, [LT_SYS_MODULE_EXT], [LT_SYS_MODULE_EXT($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:580: -1- AC_DEFUN([AC_LTDL_SHLIBEXT], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SHLIBEXT' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_MODULE_EXT], [LT_SYS_MODULE_EXT($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:596: -1- AC_DEFUN([LT_SYS_MODULE_PATH], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([what variable specifies run-time module search path],
  [lt_cv_module_path_var], [lt_cv_module_path_var=$shlibpath_var])
if test -n "$lt_cv_module_path_var"; then
  m4_pattern_allow([LT_MODULE_PATH_VAR])dnl
  AC_DEFINE_UNQUOTED([LT_MODULE_PATH_VAR], ["$lt_cv_module_path_var"],
    [Define to the name of the environment variable that determines the run-time module search path.])
fi
])
m4trace:/usr/local/share/aclocal/ltdl.m4:599: -1- AU_DEFUN([AC_LTDL_SHLIBPATH], [m4_if($#, 0, [LT_SYS_MODULE_PATH], [LT_SYS_MODULE_PATH($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:599: -1- AC_DEFUN([AC_LTDL_SHLIBPATH], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SHLIBPATH' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_MODULE_PATH], [LT_SYS_MODULE_PATH($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:624: -1- AC_DEFUN([LT_SYS_DLSEARCH_PATH], [m4_require([_LT_SYS_DYNAMIC_LINKER])dnl
AC_CACHE_CHECK([for the default library search path],
  [lt_cv_sys_dlsearch_path],
  [lt_cv_sys_dlsearch_path=$sys_lib_dlsearch_path_spec])
if test -n "$lt_cv_sys_dlsearch_path"; then
  sys_dlsearch_path=
  for dir in $lt_cv_sys_dlsearch_path; do
    if test -z "$sys_dlsearch_path"; then
      sys_dlsearch_path=$dir
    else
      sys_dlsearch_path=$sys_dlsearch_path$PATH_SEPARATOR$dir
    fi
  done
  m4_pattern_allow([LT_DLSEARCH_PATH])dnl
  AC_DEFINE_UNQUOTED([LT_DLSEARCH_PATH], ["$sys_dlsearch_path"],
    [Define to the system default library search path.])
fi
])
m4trace:/usr/local/share/aclocal/ltdl.m4:627: -1- AU_DEFUN([AC_LTDL_SYSSEARCHPATH], [m4_if($#, 0, [LT_SYS_DLSEARCH_PATH], [LT_SYS_DLSEARCH_PATH($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:627: -1- AC_DEFUN([AC_LTDL_SYSSEARCHPATH], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SYSSEARCHPATH' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLSEARCH_PATH], [LT_SYS_DLSEARCH_PATH($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:745: -1- AC_DEFUN([LT_LIB_DLLOAD], [m4_pattern_allow([^LT_DLLOADERS$])
LT_DLLOADERS=
AC_SUBST([LT_DLLOADERS])

AC_LANG_PUSH([C])
lt_dlload_save_LIBS=$LIBS

LIBADD_DLOPEN=
AC_SEARCH_LIBS([dlopen], [dl],
	[AC_DEFINE([HAVE_LIBDL], [1],
		   [Define if you have the libdl library or equivalent.])
	if test "$ac_cv_search_dlopen" != "none required"; then
	  LIBADD_DLOPEN=-ldl
	fi
	libltdl_cv_lib_dl_dlopen=yes
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"],
    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#if HAVE_DLFCN_H
#  include <dlfcn.h>
#endif
    ]], [[dlopen(0, 0);]])],
	    [AC_DEFINE([HAVE_LIBDL], [1],
		       [Define if you have the libdl library or equivalent.])
	    libltdl_cv_func_dlopen=yes
	    LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"],
	[AC_CHECK_LIB([svld], [dlopen],
		[AC_DEFINE([HAVE_LIBDL], [1],
			 [Define if you have the libdl library or equivalent.])
	        LIBADD_DLOPEN=-lsvld libltdl_cv_func_dlopen=yes
		LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dlopen.la"])])])
if test yes = "$libltdl_cv_func_dlopen" || test yes = "$libltdl_cv_lib_dl_dlopen"
then
  lt_save_LIBS=$LIBS
  LIBS="$LIBS $LIBADD_DLOPEN"
  AC_CHECK_FUNCS([dlerror])
  LIBS=$lt_save_LIBS
fi
AC_SUBST([LIBADD_DLOPEN])

LIBADD_SHL_LOAD=
AC_CHECK_FUNC([shl_load],
	[AC_DEFINE([HAVE_SHL_LOAD], [1],
		   [Define if you have the shl_load function.])
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}shl_load.la"],
    [AC_CHECK_LIB([dld], [shl_load],
	    [AC_DEFINE([HAVE_SHL_LOAD], [1],
		       [Define if you have the shl_load function.])
	    LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}shl_load.la"
	    LIBADD_SHL_LOAD=-ldld])])
AC_SUBST([LIBADD_SHL_LOAD])

case $host_os in
darwin[[1567]].*)
# We only want this for pre-Mac OS X 10.4.
  AC_CHECK_FUNC([_dyld_func_lookup],
	[AC_DEFINE([HAVE_DYLD], [1],
		   [Define if you have the _dyld_func_lookup function.])
	LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dyld.la"])
  ;;
beos*)
  LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}load_add_on.la"
  ;;
cygwin* | mingw* | pw32*)
  AC_CHECK_DECLS([cygwin_conv_path], [], [], [[#include <sys/cygwin.h>]])
  LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}loadlibrary.la"
  ;;
esac

AC_CHECK_LIB([dld], [dld_link],
	[AC_DEFINE([HAVE_DLD], [1],
		   [Define if you have the GNU dld library.])
		LT_DLLOADERS="$LT_DLLOADERS ${lt_dlopen_dir+$lt_dlopen_dir/}dld_link.la"])
AC_SUBST([LIBADD_DLD_LINK])

m4_pattern_allow([^LT_DLPREOPEN$])
LT_DLPREOPEN=
if test -n "$LT_DLLOADERS"
then
  for lt_loader in $LT_DLLOADERS; do
    LT_DLPREOPEN="$LT_DLPREOPEN-dlpreopen $lt_loader "
  done
  AC_DEFINE([HAVE_LIBDLLOADER], [1],
            [Define if libdlloader will be built on this platform])
fi
AC_SUBST([LT_DLPREOPEN])

dnl This isn't used anymore, but set it for backwards compatibility
LIBADD_DL="$LIBADD_DLOPEN $LIBADD_SHL_LOAD"
AC_SUBST([LIBADD_DL])

LIBS=$lt_dlload_save_LIBS
AC_LANG_POP
])
m4trace:/usr/local/share/aclocal/ltdl.m4:748: -1- AU_DEFUN([AC_LTDL_DLLIB], [m4_if($#, 0, [LT_LIB_DLLOAD], [LT_LIB_DLLOAD($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:748: -1- AC_DEFUN([AC_LTDL_DLLIB], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_DLLIB' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_LIB_DLLOAD], [LT_LIB_DLLOAD($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:790: -1- AC_DEFUN([LT_SYS_SYMBOL_USCORE], [m4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl
AC_CACHE_CHECK([for _ prefix in compiled symbols],
  [lt_cv_sys_symbol_underscore],
  [lt_cv_sys_symbol_underscore=no
  cat > conftest.$ac_ext <<_LT_EOF
void nm_test_func(){}
int main(){nm_test_func;return 0;}
_LT_EOF
  if AC_TRY_EVAL(ac_compile); then
    # Now try to grab the symbols.
    ac_nlist=conftest.nm
    if AC_TRY_EVAL(NM conftest.$ac_objext \| $lt_cv_sys_global_symbol_pipe \> $ac_nlist) && test -s "$ac_nlist"; then
      # See whether the symbols have a leading underscore.
      if grep '^. _nm_test_func' "$ac_nlist" >/dev/null; then
        lt_cv_sys_symbol_underscore=yes
      else
        if grep '^. nm_test_func ' "$ac_nlist" >/dev/null; then
	  :
        else
	  echo "configure: cannot find nm_test_func in $ac_nlist" >&AS_MESSAGE_LOG_FD
        fi
      fi
    else
      echo "configure: cannot run $lt_cv_sys_global_symbol_pipe" >&AS_MESSAGE_LOG_FD
    fi
  else
    echo "configure: failed program was:" >&AS_MESSAGE_LOG_FD
    cat conftest.c >&AS_MESSAGE_LOG_FD
  fi
  rm -rf conftest*
  ])
  sys_symbol_underscore=$lt_cv_sys_symbol_underscore
  AC_SUBST([sys_symbol_underscore])
])
m4trace:/usr/local/share/aclocal/ltdl.m4:793: -1- AU_DEFUN([AC_LTDL_SYMBOL_USCORE], [m4_if($#, 0, [LT_SYS_SYMBOL_USCORE], [LT_SYS_SYMBOL_USCORE($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:793: -1- AC_DEFUN([AC_LTDL_SYMBOL_USCORE], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_SYMBOL_USCORE' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_SYMBOL_USCORE], [LT_SYS_SYMBOL_USCORE($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:904: -1- AC_DEFUN([LT_FUNC_DLSYM_USCORE], [AC_REQUIRE([_LT_COMPILER_PIC])dnl	for lt_prog_compiler_wl
AC_REQUIRE([LT_SYS_SYMBOL_USCORE])dnl	for lt_cv_sys_symbol_underscore
AC_REQUIRE([LT_SYS_MODULE_EXT])dnl	for libltdl_cv_shlibext
if test yes = "$lt_cv_sys_symbol_underscore"; then
  if test yes = "$libltdl_cv_func_dlopen" || test yes = "$libltdl_cv_lib_dl_dlopen"; then
    AC_CACHE_CHECK([whether we have to add an underscore for dlsym],
      [libltdl_cv_need_uscore],
      [libltdl_cv_need_uscore=unknown
      dlsym_uscore_save_LIBS=$LIBS
      LIBS="$LIBS $LIBADD_DLOPEN"
      libname=conftmod # stay within 8.3 filename limits!
      cat >$libname.$ac_ext <<_LT_EOF
[#line $LINENO "configure"
#include "confdefs.h"
/* When -fvisibility=hidden is used, assume the code has been annotated
   correspondingly for the symbols needed.  */
#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))
int fnord () __attribute__((visibility("default")));
#endif
int fnord () { return 42; }]
_LT_EOF

      # ltfn_module_cmds module_cmds
      # Execute tilde-delimited MODULE_CMDS with environment primed for
      # $module_cmds or $archive_cmds type content.
      ltfn_module_cmds ()
      {( # subshell avoids polluting parent global environment
          module_cmds_save_ifs=$IFS; IFS='~'
          for cmd in @S|@1; do
            IFS=$module_cmds_save_ifs
            libobjs=$libname.$ac_objext; lib=$libname$libltdl_cv_shlibext
            rpath=/not-exists; soname=$libname$libltdl_cv_shlibext; output_objdir=.
            major=; versuffix=; verstring=; deplibs=
            ECHO=echo; wl=$lt_prog_compiler_wl; allow_undefined_flag=
            eval $cmd
          done
          IFS=$module_cmds_save_ifs
      )}

      # Compile a loadable module using libtool macro expansion results.
      $CC $pic_flag -c $libname.$ac_ext
      ltfn_module_cmds "${module_cmds:-$archive_cmds}"

      # Try to fetch fnord with dlsym().
      libltdl_dlunknown=0; libltdl_dlnouscore=1; libltdl_dluscore=2
      cat >conftest.$ac_ext <<_LT_EOF
[#line $LINENO "configure"
#include "confdefs.h"
#if HAVE_DLFCN_H
#include <dlfcn.h>
#endif
#include <stdio.h>
#ifndef RTLD_GLOBAL
#  ifdef DL_GLOBAL
#    define RTLD_GLOBAL DL_GLOBAL
#  else
#    define RTLD_GLOBAL 0
#  endif
#endif
#ifndef RTLD_NOW
#  ifdef DL_NOW
#    define RTLD_NOW DL_NOW
#  else
#    define RTLD_NOW 0
#  endif
#endif
int main () {
  void *handle = dlopen ("`pwd`/$libname$libltdl_cv_shlibext", RTLD_GLOBAL|RTLD_NOW);
  int status = $libltdl_dlunknown;
  if (handle) {
    if (dlsym (handle, "fnord"))
      status = $libltdl_dlnouscore;
    else {
      if (dlsym (handle, "_fnord"))
        status = $libltdl_dluscore;
      else
	puts (dlerror ());
    }
    dlclose (handle);
  } else
    puts (dlerror ());
  return status;
}]
_LT_EOF
      if AC_TRY_EVAL(ac_link) && test -s "conftest$ac_exeext" 2>/dev/null; then
        (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null
        libltdl_status=$?
        case x$libltdl_status in
          x$libltdl_dlnouscore) libltdl_cv_need_uscore=no ;;
	  x$libltdl_dluscore) libltdl_cv_need_uscore=yes ;;
	  x*) libltdl_cv_need_uscore=unknown ;;
        esac
      fi
      rm -rf conftest* $libname*
      LIBS=$dlsym_uscore_save_LIBS
    ])
  fi
fi

if test yes = "$libltdl_cv_need_uscore"; then
  AC_DEFINE([NEED_USCORE], [1],
    [Define if dlsym() requires a leading underscore in symbol names.])
fi
])
m4trace:/usr/local/share/aclocal/ltdl.m4:907: -1- AU_DEFUN([AC_LTDL_DLSYM_USCORE], [m4_if($#, 0, [LT_FUNC_DLSYM_USCORE], [LT_FUNC_DLSYM_USCORE($@)])])
m4trace:/usr/local/share/aclocal/ltdl.m4:907: -1- AC_DEFUN([AC_LTDL_DLSYM_USCORE], [AC_DIAGNOSE([obsolete], [The macro `AC_LTDL_DLSYM_USCORE' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_FUNC_DLSYM_USCORE], [LT_FUNC_DLSYM_USCORE($@)])])
m4trace:/usr/local/share/aclocal/pkg.m4:79: -1- AC_DEFUN([PKG_PROG_PKG_CONFIG], [m4_pattern_forbid([^_?PKG_[A-Z_]+$])
m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])
m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])
AC_ARG_VAR([PKG_CONFIG], [path to pkg-config utility])
AC_ARG_VAR([PKG_CONFIG_PATH], [directories to add to pkg-config's search path])
AC_ARG_VAR([PKG_CONFIG_LIBDIR], [path overriding pkg-config's built-in search path])

if test "x$ac_cv_env_PKG_CONFIG_set" != "xset"; then
	AC_PATH_TOOL([PKG_CONFIG], [pkg-config])
fi
if test -n "$PKG_CONFIG"; then
	_pkg_min_version=m4_default([$1], [0.9.0])
	AC_MSG_CHECKING([pkg-config is at least version $_pkg_min_version])
	if $PKG_CONFIG --atleast-pkgconfig-version $_pkg_min_version; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
		PKG_CONFIG=""
	fi
fi[]dnl
])
m4trace:/usr/local/share/aclocal/pkg.m4:99: -1- AC_DEFUN([PKG_CHECK_EXISTS], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
if test -n "$PKG_CONFIG" && \
    AC_RUN_LOG([$PKG_CONFIG --exists --print-errors "$1"]); then
  m4_default([$2], [:])
m4_ifvaln([$3], [else
  $3])dnl
fi])
m4trace:/usr/local/share/aclocal/pkg.m4:128: -1- AC_DEFUN([_PKG_SHORT_ERRORS_SUPPORTED], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])
if $PKG_CONFIG --atleast-pkgconfig-version 0.20; then
        _pkg_short_errors_supported=yes
else
        _pkg_short_errors_supported=no
fi[]dnl
])
m4trace:/usr/local/share/aclocal/pkg.m4:192: -1- AC_DEFUN([PKG_CHECK_MODULES], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
AC_ARG_VAR([$1][_CFLAGS], [C compiler flags for $1, overriding pkg-config])dnl
AC_ARG_VAR([$1][_LIBS], [linker flags for $1, overriding pkg-config])dnl

pkg_failed=no
AC_MSG_CHECKING([for $2])

_PKG_CONFIG([$1][_CFLAGS], [cflags], [$2])
_PKG_CONFIG([$1][_LIBS], [libs], [$2])

m4_define([_PKG_TEXT], [Alternatively, you may set the environment variables $1[]_CFLAGS
and $1[]_LIBS to avoid the need to call pkg-config.
See the pkg-config man page for more details.])

if test $pkg_failed = yes; then
        AC_MSG_RESULT([no])
        _PKG_SHORT_ERRORS_SUPPORTED
        if test $_pkg_short_errors_supported = yes; then
	        $1[]_PKG_ERRORS=`$PKG_CONFIG --short-errors --print-errors --cflags --libs "$2" 2>&1`
        else
	        $1[]_PKG_ERRORS=`$PKG_CONFIG --print-errors --cflags --libs "$2" 2>&1`
        fi
	# Put the nasty error message in config.log where it belongs
	echo "$$1[]_PKG_ERRORS" >&AS_MESSAGE_LOG_FD

	m4_default([$4], [AC_MSG_ERROR(
[Package requirements ($2) were not met:

$$1_PKG_ERRORS

Consider adjusting the PKG_CONFIG_PATH environment variable if you
installed software in a non-standard prefix.

_PKG_TEXT])[]dnl
        ])
elif test $pkg_failed = untried; then
        AC_MSG_RESULT([no])
	m4_default([$4], [AC_MSG_FAILURE(
[The pkg-config script could not be found or is too old.  Make sure it
is in your PATH or set the PKG_CONFIG environment variable to the full
path to pkg-config.

_PKG_TEXT

To get pkg-config, see <http://pkg-config.freedesktop.org/>.])[]dnl
        ])
else
	$1[]_CFLAGS=$pkg_cv_[]$1[]_CFLAGS
	$1[]_LIBS=$pkg_cv_[]$1[]_LIBS
        AC_MSG_RESULT([yes])
	$3
fi[]dnl
])
m4trace:/usr/local/share/aclocal/pkg.m4:214: -1- AC_DEFUN([PKG_CHECK_MODULES_STATIC], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
_save_PKG_CONFIG=$PKG_CONFIG
PKG_CONFIG="$PKG_CONFIG --static"
PKG_CHECK_MODULES($@)
PKG_CONFIG=$_save_PKG_CONFIG[]dnl
])
m4trace:/usr/local/share/aclocal/pkg.m4:236: -1- AC_DEFUN([PKG_INSTALLDIR], [m4_pushdef([pkg_default], [m4_default([$1], ['${libdir}/pkgconfig'])])
m4_pushdef([pkg_description],
    [pkg-config installation directory @<:@]pkg_default[@:>@])
AC_ARG_WITH([pkgconfigdir],
    [AS_HELP_STRING([--with-pkgconfigdir], pkg_description)],,
    [with_pkgconfigdir=]pkg_default)
AC_SUBST([pkgconfigdir], [$with_pkgconfigdir])
m4_popdef([pkg_default])
m4_popdef([pkg_description])
])
m4trace:/usr/local/share/aclocal/pkg.m4:258: -1- AC_DEFUN([PKG_NOARCH_INSTALLDIR], [m4_pushdef([pkg_default], [m4_default([$1], ['${datadir}/pkgconfig'])])
m4_pushdef([pkg_description],
    [pkg-config arch-independent installation directory @<:@]pkg_default[@:>@])
AC_ARG_WITH([noarch-pkgconfigdir],
    [AS_HELP_STRING([--with-noarch-pkgconfigdir], pkg_description)],,
    [with_noarch_pkgconfigdir=]pkg_default)
AC_SUBST([noarch_pkgconfigdir], [$with_noarch_pkgconfigdir])
m4_popdef([pkg_default])
m4_popdef([pkg_description])
])
m4trace:/usr/local/share/aclocal/pkg.m4:275: -1- AC_DEFUN([PKG_CHECK_VAR], [AC_REQUIRE([PKG_PROG_PKG_CONFIG])dnl
AC_ARG_VAR([$1], [value of $3 for $2, overriding pkg-config])dnl

_PKG_CONFIG([$1], [variable="][$3]["], [$2])
AS_VAR_COPY([$1], [pkg_cv_][$1])

AS_VAR_IF([$1], [""], [$5], [$4])dnl
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/amversion.m4:20: -1- AC_DEFUN([AM_AUTOMAKE_VERSION], [am__api_version='1.15'
dnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to
dnl require some minimum version.  Point them to the right macro.
m4_if([$1], [1.15], [],
      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/amversion.m4:37: -1- AC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION], [AM_AUTOMAKE_VERSION([1.15])dnl
m4_ifndef([AC_AUTOCONF_VERSION],
  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl
_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/as.m4:19: -1- AC_DEFUN([AM_PROG_AS], [# By default we simply use the C compiler to build assembly code.
AC_REQUIRE([AC_PROG_CC])
test "${CCAS+set}" = set || CCAS=$CC
test "${CCASFLAGS+set}" = set || CCASFLAGS=$CFLAGS
AC_ARG_VAR([CCAS],      [assembler compiler command (defaults to CC)])
AC_ARG_VAR([CCASFLAGS], [assembler compiler flags (defaults to CFLAGS)])
_AM_IF_OPTION([no-dependencies],, [_AM_DEPENDENCIES([CCAS])])dnl
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/auxdir.m4:51: -1- AC_DEFUN([AM_AUX_DIR_EXPAND], [AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl
# Expand $ac_aux_dir to an absolute path.
am_aux_dir=`cd "$ac_aux_dir" && pwd`
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/cond.m4:32: -1- AC_DEFUN([AM_CONDITIONAL], [AC_PREREQ([2.52])dnl
 m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],
       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl
AC_SUBST([$1_TRUE])dnl
AC_SUBST([$1_FALSE])dnl
_AM_SUBST_NOTMAKE([$1_TRUE])dnl
_AM_SUBST_NOTMAKE([$1_FALSE])dnl
m4_define([_AM_COND_VALUE_$1], [$2])dnl
if $2; then
  $1_TRUE=
  $1_FALSE='#'
else
  $1_TRUE='#'
  $1_FALSE=
fi
AC_CONFIG_COMMANDS_PRE(
[if test -z "${$1_TRUE}" && test -z "${$1_FALSE}"; then
  AC_MSG_ERROR([[conditional "$1" was never defined.
Usually this means the macro was only invoked conditionally.]])
fi])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/depend.m4:156: -1- AC_DEFUN([_AM_DEPENDENCIES], [AC_REQUIRE([AM_SET_DEPDIR])dnl
AC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl
AC_REQUIRE([AM_MAKE_INCLUDE])dnl
AC_REQUIRE([AM_DEP_TRACK])dnl

m4_if([$1], [CC],   [depcc="$CC"   am_compiler_list=],
      [$1], [CXX],  [depcc="$CXX"  am_compiler_list=],
      [$1], [OBJC], [depcc="$OBJC" am_compiler_list='gcc3 gcc'],
      [$1], [OBJCXX], [depcc="$OBJCXX" am_compiler_list='gcc3 gcc'],
      [$1], [UPC],  [depcc="$UPC"  am_compiler_list=],
      [$1], [GCJ],  [depcc="$GCJ"  am_compiler_list='gcc3 gcc'],
                    [depcc="$$1"   am_compiler_list=])

AC_CACHE_CHECK([dependency style of $depcc],
               [am_cv_$1_dependencies_compiler_type],
[if test -z "$AMDEP_TRUE" && test -f "$am_depcomp"; then
  # We make a subdir and do the tests there.  Otherwise we can end up
  # making bogus files that we don't know about and never remove.  For
  # instance it was reported that on HP-UX the gcc test will end up
  # making a dummy file named 'D' -- because '-MD' means "put the output
  # in D".
  rm -rf conftest.dir
  mkdir conftest.dir
  # Copy depcomp to subdir because otherwise we won't find it if we're
  # using a relative directory.
  cp "$am_depcomp" conftest.dir
  cd conftest.dir
  # We will build objects and dependencies in a subdirectory because
  # it helps to detect inapplicable dependency modes.  For instance
  # both Tru64's cc and ICC support -MD to output dependencies as a
  # side effect of compilation, but ICC will put the dependencies in
  # the current directory while Tru64 will put them in the object
  # directory.
  mkdir sub

  am_cv_$1_dependencies_compiler_type=none
  if test "$am_compiler_list" = ""; then
     am_compiler_list=`sed -n ['s/^#*\([a-zA-Z0-9]*\))$/\1/p'] < ./depcomp`
  fi
  am__universal=false
  m4_case([$1], [CC],
    [case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac],
    [CXX],
    [case " $depcc " in #(
     *\ -arch\ *\ -arch\ *) am__universal=true ;;
     esac])

  for depmode in $am_compiler_list; do
    # Setup a source with many dependencies, because some compilers
    # like to wrap large dependency lists on column 80 (with \), and
    # we should not choose a depcomp mode which is confused by this.
    #
    # We need to recreate these files for each test, as the compiler may
    # overwrite some of them when testing with obscure command lines.
    # This happens at least with the AIX C compiler.
    : > sub/conftest.c
    for i in 1 2 3 4 5 6; do
      echo '#include "conftst'$i'.h"' >> sub/conftest.c
      # Using ": > sub/conftst$i.h" creates only sub/conftst1.h with
      # Solaris 10 /bin/sh.
      echo '/* dummy */' > sub/conftst$i.h
    done
    echo "${am__include} ${am__quote}sub/conftest.Po${am__quote}" > confmf

    # We check with '-c' and '-o' for the sake of the "dashmstdout"
    # mode.  It turns out that the SunPro C++ compiler does not properly
    # handle '-M -o', and we need to detect this.  Also, some Intel
    # versions had trouble with output in subdirs.
    am__obj=sub/conftest.${OBJEXT-o}
    am__minus_obj="-o $am__obj"
    case $depmode in
    gcc)
      # This depmode causes a compiler race in universal mode.
      test "$am__universal" = false || continue
      ;;
    nosideeffect)
      # After this tag, mechanisms are not by side-effect, so they'll
      # only be used when explicitly requested.
      if test "x$enable_dependency_tracking" = xyes; then
	continue
      else
	break
      fi
      ;;
    msvc7 | msvc7msys | msvisualcpp | msvcmsys)
      # This compiler won't grok '-c -o', but also, the minuso test has
      # not run yet.  These depmodes are late enough in the game, and
      # so weak that their functioning should not be impacted.
      am__obj=conftest.${OBJEXT-o}
      am__minus_obj=
      ;;
    none) break ;;
    esac
    if depmode=$depmode \
       source=sub/conftest.c object=$am__obj \
       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \
       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \
         >/dev/null 2>conftest.err &&
       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&
       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&
       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&
       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then
      # icc doesn't choke on unknown options, it will just issue warnings
      # or remarks (even with -Werror).  So we grep stderr for any message
      # that says an option was ignored or not supported.
      # When given -MP, icc 7.0 and 7.1 complain thusly:
      #   icc: Command line warning: ignoring option '-M'; no argument required
      # The diagnosis changed in icc 8.0:
      #   icc: Command line remark: option '-MP' not supported
      if (grep 'ignoring option' conftest.err ||
          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else
        am_cv_$1_dependencies_compiler_type=$depmode
        break
      fi
    fi
  done

  cd ..
  rm -rf conftest.dir
else
  am_cv_$1_dependencies_compiler_type=none
fi
])
AC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])
AM_CONDITIONAL([am__fastdep$1], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_$1_dependencies_compiler_type" = gcc3])
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/depend.m4:166: -1- AC_DEFUN([AM_SET_DEPDIR], [AC_REQUIRE([AM_SET_LEADING_DOT])dnl
AC_SUBST([DEPDIR], ["${am__leading_dot}deps"])dnl
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/depend.m4:189: -1- AC_DEFUN([AM_DEP_TRACK], [AC_ARG_ENABLE([dependency-tracking], [dnl
AS_HELP_STRING(
  [--enable-dependency-tracking],
  [do not reject slow dependency extractors])
AS_HELP_STRING(
  [--disable-dependency-tracking],
  [speeds up one-time build])])
if test "x$enable_dependency_tracking" != xno; then
  am_depcomp="$ac_aux_dir/depcomp"
  AMDEPBACKSLASH='\'
  am__nodep='_no'
fi
AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
AC_SUBST([AMDEPBACKSLASH])dnl
_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl
AC_SUBST([am__nodep])dnl
_AM_SUBST_NOTMAKE([am__nodep])dnl
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/depout.m4:61: -1- AC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS], [{
  # Older Autoconf quotes --file arguments for eval, but not when files
  # are listed without --file.  Let's play safe and only enable the eval
  # if we detect the quoting.
  case $CONFIG_FILES in
  *\'*) eval set x "$CONFIG_FILES" ;;
  *)   set x $CONFIG_FILES ;;
  esac
  shift
  for mf
  do
    # Strip MF so we end up with the name of the file.
    mf=`echo "$mf" | sed -e 's/:.*$//'`
    # Check whether this is an Automake generated Makefile or not.
    # We used to match only the files named 'Makefile.in', but
    # some people rename them; so instead we look at the file content.
    # Grep'ing the first line is not enough: some people post-process
    # each Makefile.in and add a new line on top of each file to say so.
    # Grep'ing the whole file is not good either: AIX grep has a line
    # limit of 2048, but all sed's we know have understand at least 4000.
    if sed -n 's,^#.*generated by automake.*,X,p' "$mf" | grep X >/dev/null 2>&1; then
      dirpart=`AS_DIRNAME("$mf")`
    else
      continue
    fi
    # Extract the definition of DEPDIR, am__include, and am__quote
    # from the Makefile without running 'make'.
    DEPDIR=`sed -n 's/^DEPDIR = //p' < "$mf"`
    test -z "$DEPDIR" && continue
    am__include=`sed -n 's/^am__include = //p' < "$mf"`
    test -z "$am__include" && continue
    am__quote=`sed -n 's/^am__quote = //p' < "$mf"`
    # Find all dependency output files, they are included files with
    # $(DEPDIR) in their names.  We invoke sed twice because it is the
    # simplest approach to changing $(DEPDIR) to its actual value in the
    # expansion.
    for file in `sed -n "
      s/^$am__include $am__quote\(.*(DEPDIR).*\)$am__quote"'$/\1/p' <"$mf" | \
	 sed -e 's/\$(DEPDIR)/'"$DEPDIR"'/g'`; do
      # Make sure the directory exists.
      test -f "$dirpart/$file" && continue
      fdir=`AS_DIRNAME(["$file"])`
      AS_MKDIR_P([$dirpart/$fdir])
      # echo "creating $dirpart/$file"
      echo '# dummy' > "$dirpart/$file"
    done
  done
}
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/depout.m4:75: -1- AC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS], [AC_CONFIG_COMMANDS([depfiles],
     [test x"$AMDEP_TRUE" != x"" || _AM_OUTPUT_DEPENDENCY_COMMANDS],
     [AMDEP_TRUE="$AMDEP_TRUE" ac_aux_dir="$ac_aux_dir"])
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/init.m4:171: -1- AC_DEFUN([AM_INIT_AUTOMAKE], [AC_PREREQ([2.65])dnl
dnl Autoconf wants to disallow AM_ names.  We explicitly allow
dnl the ones we care about.
m4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl
AC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl
AC_REQUIRE([AC_PROG_INSTALL])dnl
if test "`cd $srcdir && pwd`" != "`pwd`"; then
  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output
  # is not polluted with repeated "-I."
  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl
  # test to see if srcdir already configured
  if test -f $srcdir/config.status; then
    AC_MSG_ERROR([source directory already configured; run "make distclean" there first])
  fi
fi

# test whether we have cygpath
if test -z "$CYGPATH_W"; then
  if (cygpath --version) >/dev/null 2>/dev/null; then
    CYGPATH_W='cygpath -w'
  else
    CYGPATH_W=echo
  fi
fi
AC_SUBST([CYGPATH_W])

# Define the identity of the package.
dnl Distinguish between old-style and new-style calls.
m4_ifval([$2],
[AC_DIAGNOSE([obsolete],
             [$0: two- and three-arguments forms are deprecated.])
m4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl
 AC_SUBST([PACKAGE], [$1])dnl
 AC_SUBST([VERSION], [$2])],
[_AM_SET_OPTIONS([$1])dnl
dnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.
m4_if(
  m4_ifdef([AC_PACKAGE_NAME], [ok]):m4_ifdef([AC_PACKAGE_VERSION], [ok]),
  [ok:ok],,
  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl
 AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl
 AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl

_AM_IF_OPTION([no-define],,
[AC_DEFINE_UNQUOTED([PACKAGE], ["$PACKAGE"], [Name of package])
 AC_DEFINE_UNQUOTED([VERSION], ["$VERSION"], [Version number of package])])dnl

# Some tools Automake needs.
AC_REQUIRE([AM_SANITY_CHECK])dnl
AC_REQUIRE([AC_ARG_PROGRAM])dnl
AM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])
AM_MISSING_PROG([AUTOCONF], [autoconf])
AM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])
AM_MISSING_PROG([AUTOHEADER], [autoheader])
AM_MISSING_PROG([MAKEINFO], [makeinfo])
AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
AC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl
AC_REQUIRE([AC_PROG_MKDIR_P])dnl
# For better backward compatibility.  To be removed once Automake 1.9.x
# dies out for good.  For more background, see:
# <http://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>
# <http://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>
AC_SUBST([mkdir_p], ['$(MKDIR_P)'])
# We need awk for the "check" target (and possibly the TAP driver).  The
# system "awk" is bad on some platforms.
AC_REQUIRE([AC_PROG_AWK])dnl
AC_REQUIRE([AC_PROG_MAKE_SET])dnl
AC_REQUIRE([AM_SET_LEADING_DOT])dnl
_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],
	      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
			     [_AM_PROG_TAR([v7])])])
_AM_IF_OPTION([no-dependencies],,
[AC_PROVIDE_IFELSE([AC_PROG_CC],
		  [_AM_DEPENDENCIES([CC])],
		  [m4_define([AC_PROG_CC],
			     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_CXX],
		  [_AM_DEPENDENCIES([CXX])],
		  [m4_define([AC_PROG_CXX],
			     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJC],
		  [_AM_DEPENDENCIES([OBJC])],
		  [m4_define([AC_PROG_OBJC],
			     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],
		  [_AM_DEPENDENCIES([OBJCXX])],
		  [m4_define([AC_PROG_OBJCXX],
			     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl
])
AC_REQUIRE([AM_SILENT_RULES])dnl
dnl The testsuite driver may need to know about EXEEXT, so add the
dnl 'am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This
dnl macro is hooked onto _AC_COMPILER_EXEEXT early, see below.
AC_CONFIG_COMMANDS_PRE(dnl
[m4_provide_if([_AM_COMPILER_EXEEXT],
  [AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])])])dnl

# POSIX will say in a future version that running "rm -f" with no argument
# is OK; and we want to be able to make that assumption in our Makefile
# recipes.  So use an aggressive probe to check that the usage we want is
# actually supported "in the wild" to an acceptable degree.
# See automake bug#10828.
# To make any issue more visible, cause the running configure to be aborted
# by default if the 'rm' program in use doesn't match our expectations; the
# user can still override this though.
if rm -f && rm -fr && rm -rf; then : OK; else
  cat >&2 <<'END'
Oops!

Your 'rm' program seems unable to run without file operands specified
on the command line, even when the '-f' option is present.  This is contrary
to the behaviour of most rm programs out there, and not conforming with
the upcoming POSIX standard: <http://austingroupbugs.net/view.php?id=542>

Please tell bug-automake@gnu.org about your system, including the value
of your $PATH and any error possibly output before this message.  This
can help us improve future automake versions.

END
  if test x"$ACCEPT_INFERIOR_RM_PROGRAM" = x"yes"; then
    echo 'Configuration will proceed anyway, since you have set the' >&2
    echo 'ACCEPT_INFERIOR_RM_PROGRAM variable to "yes"' >&2
    echo >&2
  else
    cat >&2 <<'END'
Aborting the configuration process, to ensure you take notice of the issue.

You can download and install GNU coreutils to get an 'rm' implementation
that behaves properly: <http://www.gnu.org/software/coreutils/>.

If you want to complete the configuration process using your problematic
'rm' anyway, export the environment variable ACCEPT_INFERIOR_RM_PROGRAM
to "yes", and re-run configure.

END
    AC_MSG_ERROR([Your 'rm' program is bad, sorry.])
  fi
fi
dnl The trailing newline in this macro's definition is deliberate, for
dnl backward compatibility and to allow trailing 'dnl'-style comments
dnl after the AM_INIT_AUTOMAKE invocation. See automake bug#16841.
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/init.m4:198: -1- AC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK], [# Compute $1's index in $config_headers.
_am_arg=$1
_am_stamp_count=1
for _am_header in $config_headers :; do
  case $_am_header in
    $_am_arg | $_am_arg:* )
      break ;;
    * )
      _am_stamp_count=`expr $_am_stamp_count + 1` ;;
  esac
done
echo "timestamp for $_am_arg" >`AS_DIRNAME(["$_am_arg"])`/stamp-h[]$_am_stamp_count])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/install-sh.m4:21: -1- AC_DEFUN([AM_PROG_INSTALL_SH], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
if test x"${install_sh+set}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    install_sh="\${SHELL} '$am_aux_dir/install-sh'" ;;
  *)
    install_sh="\${SHELL} $am_aux_dir/install-sh"
  esac
fi
AC_SUBST([install_sh])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/lead-dot.m4:19: -1- AC_DEFUN([AM_SET_LEADING_DOT], [rm -rf .tst 2>/dev/null
mkdir .tst 2>/dev/null
if test -d .tst; then
  am__leading_dot=.
else
  am__leading_dot=_
fi
rmdir .tst 2>/dev/null
AC_SUBST([am__leading_dot])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/maintainer.m4:35: -1- AC_DEFUN([AM_MAINTAINER_MODE], [m4_case(m4_default([$1], [disable]),
       [enable], [m4_define([am_maintainer_other], [disable])],
       [disable], [m4_define([am_maintainer_other], [enable])],
       [m4_define([am_maintainer_other], [enable])
        m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])
AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])
  dnl maintainer-mode's default is 'disable' unless 'enable' is passed
  AC_ARG_ENABLE([maintainer-mode],
    [AS_HELP_STRING([--]am_maintainer_other[-maintainer-mode],
      am_maintainer_other[ make rules and dependencies not useful
      (and sometimes confusing) to the casual installer])],
    [USE_MAINTAINER_MODE=$enableval],
    [USE_MAINTAINER_MODE=]m4_if(am_maintainer_other, [enable], [no], [yes]))
  AC_MSG_RESULT([$USE_MAINTAINER_MODE])
  AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])
  MAINT=$MAINTAINER_MODE_TRUE
  AC_SUBST([MAINT])dnl

])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/make.m4:49: -1- AC_DEFUN([AM_MAKE_INCLUDE], [am_make=${MAKE-make}
cat > confinc << 'END'
am__doit:
	@echo this is the am__doit target
.PHONY: am__doit
END
# If we don't find an include directive, just comment out the code.
AC_MSG_CHECKING([for style of include used by $am_make])
am__include="#"
am__quote=
_am_result=none
# First try GNU make style include.
echo "include confinc" > confmf
# Ignore all kinds of additional output from 'make'.
case `$am_make -s -f confmf 2> /dev/null` in #(
*the\ am__doit\ target*)
  am__include=include
  am__quote=
  _am_result=GNU
  ;;
esac
# Now try BSD make style include.
if test "$am__include" = "#"; then
   echo '.include "confinc"' > confmf
   case `$am_make -s -f confmf 2> /dev/null` in #(
   *the\ am__doit\ target*)
     am__include=.include
     am__quote="\""
     _am_result=BSD
     ;;
   esac
fi
AC_SUBST([am__include])
AC_SUBST([am__quote])
AC_MSG_RESULT([$_am_result])
rm -f confinc confmf
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/missing.m4:14: -1- AC_DEFUN([AM_MISSING_PROG], [AC_REQUIRE([AM_MISSING_HAS_RUN])
$1=${$1-"${am_missing_run}$2"}
AC_SUBST($1)])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/missing.m4:38: -1- AC_DEFUN([AM_MISSING_HAS_RUN], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
AC_REQUIRE_AUX_FILE([missing])dnl
if test x"${MISSING+set}" != xset; then
  case $am_aux_dir in
  *\ * | *\	*)
    MISSING="\${SHELL} \"$am_aux_dir/missing\"" ;;
  *)
    MISSING="\${SHELL} $am_aux_dir/missing" ;;
  esac
fi
# Use eval to expand $SHELL
if eval "$MISSING --is-lightweight"; then
  am_missing_run="$MISSING "
else
  am_missing_run=
  AC_MSG_WARN(['missing' script is too old or missing])
fi
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/options.m4:12: -1- AC_DEFUN([_AM_MANGLE_OPTION], [[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/options.m4:18: -1- AC_DEFUN([_AM_SET_OPTION], [m4_define(_AM_MANGLE_OPTION([$1]), [1])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/options.m4:24: -1- AC_DEFUN([_AM_SET_OPTIONS], [m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/options.m4:30: -1- AC_DEFUN([_AM_IF_OPTION], [m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/prog-cc-c-o.m4:44: -1- AC_DEFUN([_AM_PROG_CC_C_O], [AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl
AC_REQUIRE_AUX_FILE([compile])dnl
AC_LANG_PUSH([C])dnl
AC_CACHE_CHECK(
  [whether $CC understands -c and -o together],
  [am_cv_prog_cc_c_o],
  [AC_LANG_CONFTEST([AC_LANG_PROGRAM([])])
  # Make sure it works both with $CC and with simple cc.
  # Following AC_PROG_CC_C_O, we do the test twice because some
  # compilers refuse to overwrite an existing .o file with -o,
  # though they will create one.
  am_cv_prog_cc_c_o=yes
  for am_i in 1 2; do
    if AM_RUN_LOG([$CC -c conftest.$ac_ext -o conftest2.$ac_objext]) \
         && test -f conftest2.$ac_objext; then
      : OK
    else
      am_cv_prog_cc_c_o=no
      break
    fi
  done
  rm -f core conftest*
  unset am_i])
if test "$am_cv_prog_cc_c_o" != yes; then
   # Losing compiler, so override with the script.
   # FIXME: It is wrong to rewrite CC.
   # But if we don't then we get into trouble of one sort or another.
   # A longer-term fix would be to have automake use am__CC in this case,
   # and then we could set am__CC="\$(top_srcdir)/compile \$(CC)"
   CC="$am_aux_dir/compile $CC"
fi
AC_LANG_POP([C])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/prog-cc-c-o.m4:47: -1- AC_DEFUN_ONCE([AM_PROG_CC_C_O], [AC_REQUIRE([AC_PROG_CC])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/runlog.m4:17: -1- AC_DEFUN([AM_RUN_LOG], [{ echo "$as_me:$LINENO: $1" >&AS_MESSAGE_LOG_FD
   ($1) >&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD
   ac_status=$?
   echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
   (exit $ac_status); }])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/sanity.m4:82: -1- AC_DEFUN([AM_SANITY_CHECK], [AC_MSG_CHECKING([whether build environment is sane])
# Reject unsafe characters in $srcdir or the absolute working directory
# name.  Accept space and tab only in the latter.
am_lf='
'
case `pwd` in
  *[[\\\"\#\$\&\'\`$am_lf]]*)
    AC_MSG_ERROR([unsafe absolute working directory name]);;
esac
case $srcdir in
  *[[\\\"\#\$\&\'\`$am_lf\ \	]]*)
    AC_MSG_ERROR([unsafe srcdir value: '$srcdir']);;
esac

# Do 'set' in a subshell so we don't clobber the current shell's
# arguments.  Must try -L first in case configure is actually a
# symlink; some systems play weird games with the mod time of symlinks
# (eg FreeBSD returns the mod time of the symlink's containing
# directory).
if (
   am_has_slept=no
   for am_try in 1 2; do
     echo "timestamp, slept: $am_has_slept" > conftest.file
     set X `ls -Lt "$srcdir/configure" conftest.file 2> /dev/null`
     if test "$[*]" = "X"; then
	# -L didn't work.
	set X `ls -t "$srcdir/configure" conftest.file`
     fi
     if test "$[*]" != "X $srcdir/configure conftest.file" \
	&& test "$[*]" != "X conftest.file $srcdir/configure"; then

	# If neither matched, then we have a broken ls.  This can happen
	# if, for instance, CONFIG_SHELL is bash and it inherits a
	# broken ls alias from the environment.  This has actually
	# happened.  Such a system could not be considered "sane".
	AC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken
  alias in your environment])
     fi
     if test "$[2]" = conftest.file || test $am_try -eq 2; then
       break
     fi
     # Just in case.
     sleep 1
     am_has_slept=yes
   done
   test "$[2]" = conftest.file
   )
then
   # Ok.
   :
else
   AC_MSG_ERROR([newly created file is older than distributed files!
Check your system clock])
fi
AC_MSG_RESULT([yes])
# If we didn't sleep, we still need to ensure time stamps of config.status and
# generated files are strictly newer.
am_sleep_pid=
if grep 'slept: no' conftest.file >/dev/null 2>&1; then
  ( sleep 1 ) &
  am_sleep_pid=$!
fi
AC_CONFIG_COMMANDS_PRE(
  [AC_MSG_CHECKING([that generated files are newer than configure])
   if test -n "$am_sleep_pid"; then
     # Hide warnings about reused PIDs.
     wait $am_sleep_pid 2>/dev/null
   fi
   AC_MSG_RESULT([done])])
rm -f conftest.file
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/silent.m4:60: -1- AC_DEFUN([AM_SILENT_RULES], [AC_ARG_ENABLE([silent-rules], [dnl
AS_HELP_STRING(
  [--enable-silent-rules],
  [less verbose build output (undo: "make V=1")])
AS_HELP_STRING(
  [--disable-silent-rules],
  [verbose build output (undo: "make V=0")])dnl
])
case $enable_silent_rules in @%:@ (((
  yes) AM_DEFAULT_VERBOSITY=0;;
   no) AM_DEFAULT_VERBOSITY=1;;
    *) AM_DEFAULT_VERBOSITY=m4_if([$1], [yes], [0], [1]);;
esac
dnl
dnl A few 'make' implementations (e.g., NonStop OS and NextStep)
dnl do not support nested variable expansions.
dnl See automake bug#9928 and bug#10237.
am_make=${MAKE-make}
AC_CACHE_CHECK([whether $am_make supports nested variables],
   [am_cv_make_support_nested_variables],
   [if AS_ECHO([['TRUE=$(BAR$(V))
BAR0=false
BAR1=true
V=1
am__doit:
	@$(TRUE)
.PHONY: am__doit']]) | $am_make -f - >/dev/null 2>&1; then
  am_cv_make_support_nested_variables=yes
else
  am_cv_make_support_nested_variables=no
fi])
if test $am_cv_make_support_nested_variables = yes; then
  dnl Using '$V' instead of '$(V)' breaks IRIX make.
  AM_V='$(V)'
  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'
else
  AM_V=$AM_DEFAULT_VERBOSITY
  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY
fi
AC_SUBST([AM_V])dnl
AM_SUBST_NOTMAKE([AM_V])dnl
AC_SUBST([AM_DEFAULT_V])dnl
AM_SUBST_NOTMAKE([AM_DEFAULT_V])dnl
AC_SUBST([AM_DEFAULT_VERBOSITY])dnl
AM_BACKSLASH='\'
AC_SUBST([AM_BACKSLASH])dnl
_AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl
])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/strip.m4:28: -1- AC_DEFUN([AM_PROG_INSTALL_STRIP], [AC_REQUIRE([AM_PROG_INSTALL_SH])dnl
# Installed binaries are usually stripped using 'strip' when the user
# run "make install-strip".  However 'strip' might not be the right
# tool to use in cross-compilation environments, therefore Automake
# will honor the 'STRIP' environment variable to overrule this program.
dnl Don't test for $cross_compiling = yes, because it might be 'maybe'.
if test "$cross_compiling" != no; then
  AC_CHECK_TOOL([STRIP], [strip], :)
fi
INSTALL_STRIP_PROGRAM="\$(install_sh) -c -s"
AC_SUBST([INSTALL_STRIP_PROGRAM])])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/substnot.m4:12: -1- AC_DEFUN([_AM_SUBST_NOTMAKE])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/substnot.m4:17: -1- AC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])
m4trace:/usr/local/Cellar/automake/1.15/share/aclocal-1.15/tar.m4:132: -1- AC_DEFUN([_AM_PROG_TAR], [# Always define AMTAR for backward compatibility.  Yes, it's still used
# in the wild :-(  We should find a proper way to deprecate it ...
AC_SUBST([AMTAR], ['$${TAR-tar}'])

# We'll loop over all known methods to create a tar archive until one works.
_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'

m4_if([$1], [v7],
  [am__tar='$${TAR-tar} chof - "$$tardir"' am__untar='$${TAR-tar} xf -'],

  [m4_case([$1],
    [ustar],
     [# The POSIX 1988 'ustar' format is defined with fixed-size fields.
      # There is notably a 21 bits limit for the UID and the GID.  In fact,
      # the 'pax' utility can hang on bigger UID/GID (see automake bug#8343
      # and bug#13588).
      am_max_uid=2097151 # 2^21 - 1
      am_max_gid=$am_max_uid
      # The $UID and $GID variables are not portable, so we need to resort
      # to the POSIX-mandated id(1) utility.  Errors in the 'id' calls
      # below are definitely unexpected, so allow the users to see them
      # (that is, avoid stderr redirection).
      am_uid=`id -u || echo unknown`
      am_gid=`id -g || echo unknown`
      AC_MSG_CHECKING([whether UID '$am_uid' is supported by ustar format])
      if test $am_uid -le $am_max_uid; then
         AC_MSG_RESULT([yes])
      else
         AC_MSG_RESULT([no])
         _am_tools=none
      fi
      AC_MSG_CHECKING([whether GID '$am_gid' is supported by ustar format])
      if test $am_gid -le $am_max_gid; then
         AC_MSG_RESULT([yes])
      else
        AC_MSG_RESULT([no])
        _am_tools=none
      fi],

  [pax],
    [],

  [m4_fatal([Unknown tar format])])

  AC_MSG_CHECKING([how to create a $1 tar archive])

  # Go ahead even if we have the value already cached.  We do so because we
  # need to set the values for the 'am__tar' and 'am__untar' variables.
  _am_tools=${am_cv_prog_tar_$1-$_am_tools}

  for _am_tool in $_am_tools; do
    case $_am_tool in
    gnutar)
      for _am_tar in tar gnutar gtar; do
        AM_RUN_LOG([$_am_tar --version]) && break
      done
      am__tar="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$$tardir"'
      am__tar_="$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - "'"$tardir"'
      am__untar="$_am_tar -xf -"
      ;;
    plaintar)
      # Must skip GNU tar: if it does not support --format= it doesn't create
      # ustar tarball either.
      (tar --version) >/dev/null 2>&1 && continue
      am__tar='tar chf - "$$tardir"'
      am__tar_='tar chf - "$tardir"'
      am__untar='tar xf -'
      ;;
    pax)
      am__tar='pax -L -x $1 -w "$$tardir"'
      am__tar_='pax -L -x $1 -w "$tardir"'
      am__untar='pax -r'
      ;;
    cpio)
      am__tar='find "$$tardir" -print | cpio -o -H $1 -L'
      am__tar_='find "$tardir" -print | cpio -o -H $1 -L'
      am__untar='cpio -i -H $1 -d'
      ;;
    none)
      am__tar=false
      am__tar_=false
      am__untar=false
      ;;
    esac

    # If the value was cached, stop now.  We just wanted to have am__tar
    # and am__untar set.
    test -n "${am_cv_prog_tar_$1}" && break

    # tar/untar a dummy directory, and stop if the command works.
    rm -rf conftest.dir
    mkdir conftest.dir
    echo GrepMe > conftest.dir/file
    AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
    rm -rf conftest.dir
    if test -s conftest.tar; then
      AM_RUN_LOG([$am__untar <conftest.tar])
      AM_RUN_LOG([cat conftest.dir/file])
      grep GrepMe conftest.dir/file >/dev/null 2>&1 && break
    fi
  done
  rm -rf conftest.dir

  AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])
  AC_MSG_RESULT([$am_cv_prog_tar_$1])])

AC_SUBST([am__tar])
AC_SUBST([am__untar])
])
m4trace:/Users/crb002/github/lustre-release/snmp/autoconf/lustre-snmp.m4:57: -1- AC_DEFUN([LS_CONFIGURE], [
AC_MSG_CHECKING([whether to try to build SNMP support])
AC_ARG_ENABLE([snmp],
	AC_HELP_STRING([--enable-snmp],
		[require SNMP support (default=auto)]),
	[], [enable_snmp="auto"])
AC_MSG_RESULT([$enable_snmp])

if test x$enable_snmp != xno ; then
	AC_CHECK_PROG([NET_SNMP_CONFIG], [net-snmp-config], [net-snmp-config])
	if test "$NET_SNMP_CONFIG" ; then
		NET_SNMP_CFLAGS=$($NET_SNMP_CONFIG --base-cflags)
		NET_SNMP_LIBS=$($NET_SNMP_CONFIG --agent-libs)

		CPPFLAGS_save="$CPPFLAGS"
		CPPFLAGS="$CPPFLAGS $NET_SNMP_CFLAGS"

		LIBS_save="$LIBS"
		LIBS="$LIBS $NET_SNMP_LIBS"

		AC_CHECK_HEADER([net-snmp/net-snmp-config.h],[
			AC_CHECK_FUNC([register_mib],[SNMP_SUBDIR="snmp"],[
				LIBS="$LIBS -lwrap"
				NET_SNMP_LISB="$NET_SNMP_LIBS -lwrap"
				# fail autoconf's cache
				unset ac_cv_func_register_mib
				AC_CHECK_FUNC([register_mib],[SNMP_SUBDIR="snmp"])
			])
		])

		LIBS="$LIBS_save"
		CPPFLAGS="$CPPFLAGS_save"
	fi
	AC_MSG_CHECKING([for SNMP support])
	if test "$SNMP_SUBDIR" ; then
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no (see config.log for errors)])
		if test x$enable_snmp = xyes ; then
			AC_MSG_ERROR([SNMP support was requested, but unavailable])
		fi
	fi
fi

agentdir='${pkglibdir}/snmp'
mibdir='${pkgdatadir}/snmp/mibs'

AC_SUBST(NET_SNMP_CFLAGS)
AC_SUBST(NET_SNMP_LIBS)
AC_SUBST(agentdir)
AC_SUBST(mibdir)
])
m4trace:/Users/crb002/github/lustre-release/snmp/autoconf/lustre-snmp.m4:69: -1- AC_DEFUN([LS_CONFIG_FILES], [
AC_CONFIG_FILES([
snmp/Makefile
snmp/autoconf/Makefile
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/kerberos5.m4:155: -1- AC_DEFUN([AC_KERBEROS_V5], [
  AC_MSG_CHECKING(for Kerberos v5)
  AC_ARG_WITH(krb5,
  [AC_HELP_STRING([--with-krb5=DIR], [use Kerberos v5 installation in DIR])],
  [ case "$withval" in
    yes|no)
       krb5_with=""
       ;;
    *)
       krb5_with="$withval"
       ;;
    esac ]
  )

  for dir in $krb5_with /usr /usr/kerberos /usr/local /usr/local/krb5 \
  	     /usr/krb5 /usr/heimdal /usr/local/heimdal /usr/athena ; do
    dnl This ugly hack brought on by the split installation of
    dnl MIT Kerberos on Fedora Core 1
    K5CONFIG=""
    if test -f $dir/bin/krb5-config; then
      K5CONFIG=$dir/bin/krb5-config
    elif test -f "/usr/kerberos/bin/krb5-config"; then
      K5CONFIG="/usr/kerberos/bin/krb5-config"
    elif test -f "/usr/lib/mit/bin/krb5-config"; then
      K5CONFIG="/usr/lib/mit/bin/krb5-config"
    fi
    if test "$K5CONFIG" != ""; then
      KRBCFLAGS=`$K5CONFIG --cflags`
      KRBLIBS=`$K5CONFIG --libs gssapi`
      K5VERS=`$K5CONFIG --version | head -n 1 | awk '{split($(4),v,"."); if (v@<:@"3"@:>@ == "") v@<:@"3"@:>@ = "0"; print v@<:@"1"@:>@v@<:@"2"@:>@v@<:@"3"@:>@ }'`
      AC_DEFINE_UNQUOTED(KRB5_VERSION, $K5VERS, [Define this as the Kerberos version number])
      if test -f $dir/include/gssapi/gssapi_krb5.h -a \
                \( -f $dir/lib/libgssapi_krb5.a -o \
                   -f $dir/lib64/libgssapi_krb5.a -o \
                   -f $dir/lib64/libgssapi_krb5.so -o \
                   -f $dir/lib/x86_64-linux-gnu/libgssapi_krb5.so -o \
                   -f $dir/lib/libgssapi_krb5.so \) ; then
         KRBDIR="$dir"
  dnl If we are using MIT K5 1.3.1 and before, we *MUST* use the
  dnl private function (gss_krb5_ccache_name) to get correct
  dnl behavior of changing the ccache used by gssapi.
  dnl Starting in 1.3.2, we *DO NOT* want to use
  dnl gss_krb5_ccache_name, instead we want to set KRB5CCNAME
  dnl to get gssapi to use a different ccache
         if test $K5VERS -le 131; then
           AC_DEFINE(USE_GSS_KRB5_CCACHE_NAME, 1, [Define this if the private function, gss_krb5_cache_name, must be used to tell the Kerberos library which credentials cache to use. Otherwise, this is done by setting the KRB5CCNAME environment variable])
         fi
         gssapi_lib=gssapi_krb5
         break
      dnl The following ugly hack brought on by the split installation
      dnl of Heimdal Kerberos on SuSe
      elif test \( -f $dir/include/heim_err.h -o\
      		 -f $dir/include/heimdal/heim_err.h \) -a \
                -f $dir/lib/libroken.a; then
         AC_DEFINE(HAVE_HEIMDAL, 1, [Define this if you have Heimdal Kerberos libraries])
         KRBDIR="$dir"
         gssapi_lib=gssapi
        break
      fi
    fi
  done
  dnl We didn't find a usable Kerberos environment
  if test "x$require_krb5" = "xyes" -a "x$KRBDIR" = "x"; then
    if test "x$krb5_with" = "x"; then
      AC_MSG_ERROR([

Kerberos v5 with GSS support not found: consider --disable-gss or --with-krb5=
])
    else
      AC_MSG_ERROR([

Kerberos v5 with GSS support not found at $krb5_with
])
    fi
  fi

  if test "x$KRBDIR" != "x"; then

    AC_MSG_RESULT($KRBDIR)

    dnl Check if -rpath=$(KRBDIR)/lib is needed
    echo "The current KRBDIR is $KRBDIR"
    if test "$KRBDIR/lib" = "/lib" -o "$KRBDIR/lib" = "/usr/lib" \
         -o "$KRBDIR/lib" = "//lib" -o "$KRBDIR/lib" = "/usr//lib" ; then
      KRBLDFLAGS="";
    elif /sbin/ldconfig -p | grep > /dev/null "=> $KRBDIR/lib/"; then
      KRBLDFLAGS="";
    else
      KRBLDFLAGS="-Wl,-rpath=$KRBDIR/lib"
    fi

    dnl Now check for functions within gssapi library
    AC_CHECK_LIB($gssapi_lib, gss_krb5_export_lucid_sec_context,
      AC_DEFINE(HAVE_LUCID_CONTEXT_SUPPORT, 1, [Define this if the Kerberos GSS library supports gss_krb5_export_lucid_sec_context]), ,$KRBLIBS)
    AC_CHECK_LIB($gssapi_lib, gss_krb5_set_allowable_enctypes,
      AC_DEFINE(HAVE_SET_ALLOWABLE_ENCTYPES, 1, [Define this if the Kerberos GSS library supports gss_krb5_set_allowable_enctypes]), ,$KRBLIBS)
    AC_CHECK_LIB($gssapi_lib, gss_krb5_ccache_name,
      AC_DEFINE(HAVE_GSS_KRB5_CCACHE_NAME, 1, [Define this if the Kerberos GSS library supports gss_krb5_ccache_name]), ,$KRBLIBS)

    dnl Check for newer error message facility
    AC_CHECK_LIB($gssapi_lib, krb5_get_error_message,
      AC_DEFINE(HAVE_KRB5_GET_ERROR_MESSAGE, 1, [Define this if the function krb5_get_error_message is available]), ,$KRBLIBS)

    dnl Check for function to specify addressless tickets
    AC_CHECK_LIB($gssapi_lib, krb5_get_init_creds_opt_set_addressless,
      AC_DEFINE(HAVE_KRB5_GET_INIT_CREDS_OPT_SET_ADDRESSLESS, 1, [Define this if the function krb5_get_init_creds_opt_set_addressless is available]), ,$KRBLIBS)

    dnl Check for krb5int_derive_key
    AC_CHECK_LIB($gssapi_lib, krb5int_derive_key,
      [HAVE_KRB5INT_DERIVE_KEY=1; AC_DEFINE(HAVE_KRB5INT_DERIVE_KEY, 1, [Define this if the function krb5int_derive_key is available])], ,$KRBLIBS)

    dnl Version 1.15 introduced aes-sha2 support, which changes the
    dnl number of paramters of function krb5int_derive_key.
    if test $K5VERS -ge 1150; then
       AC_DEFINE(HAVE_AES_SHA2_SUPPORT, 1,
		[aes-sha2 is supported by krb5])
    fi

    dnl Check for krb5_derive_key
    AC_CHECK_LIB($gssapi_lib, krb5_derive_key,
      [HAVE_KRB5_DERIVE_KEY=1; AC_DEFINE(HAVE_KRB5_DERIVE_KEY, 1, [Define this if the function krb5_derive_key is available])], ,$KRBLIBS)

    AS_IF([test "x$HAVE_KRB5INT_DERIVE_KEY" = "x1" -o "x$HAVE_KRB5_DERIVE_KEY" = "x1"],
          [AC_DEFINE(HAVE_KRB5, 1, [Define this if you have MIT Kerberos libraries])],
          [KRBDIR=""; AC_MSG_WARN([

Disable gss/krb5 due to missing both
krb5int_derive_key and krb5_derive_key functions!
])
    ])

    dnl If they specified a directory and it didn't work, give them a warning
    if test "x$krb5_with" != "x" -a "$krb5_with" != "$KRBDIR"; then
      AC_MSG_WARN([

Using $KRBDIR instead of requested value of $krb5_with for Kerberos!
])
    fi

    AC_SUBST([KRBDIR])
    AC_SUBST([KRBLIBS])
    AC_SUBST([KRBCFLAGS])
    AC_SUBST([KRBLDFLAGS])
    AC_SUBST([K5VERS])

  else
    AC_MSG_RESULT([not found!])
  fi # "x$KRBDIR" != "x"

])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:10: -1- AC_DEFUN([LC_CONFIG_SRCDIR], [
AC_CONFIG_SRCDIR([lustre/obdclass/obdo.c])
libcfs_is_module="yes"
ldiskfs_is_ext4="yes"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:31: -1- AC_DEFUN([LC_PATH_DEFAULTS], [
# ptlrpc kernel build requires this
LUSTRE="$PWD/lustre"
AC_SUBST(LUSTRE)

# mount.lustre
rootsbindir='/sbin'
AC_SUBST(rootsbindir)

demodir='$(docdir)/demo'
AC_SUBST(demodir)

pkgexampledir='${pkgdatadir}/examples'
AC_SUBST(pkgexampledir)
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:47: -1- AC_DEFUN([LC_TARGET_SUPPORTED], [
case $target_os in
	linux*)
$1
		;;
	*)
$2
		;;
esac
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:57: -1- AC_DEFUN([LC_GLIBC_SUPPORT_FHANDLES], [
AC_CHECK_FUNCS([name_to_handle_at],
	[AC_DEFINE(HAVE_FHANDLE_GLIBC_SUPPORT, 1,
		[file handle and related syscalls are supported])],
	[AC_MSG_WARN([file handle and related syscalls are not supported])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:76: -1- AC_DEFUN([LC_STACK_SIZE], [
LB_CHECK_COMPILE([if stack size is at least 8k],
stack_size_8k, [
	#include <linux/thread_info.h>
], [
	#if THREAD_SIZE < 8192
	#error "stack size < 8192"
	#endif
], [], [AC_MSG_ERROR([

Lustre requires that Linux is configured with at least a 8KB stack.
])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:91: -1- AC_DEFUN([LC_MDS_MAX_THREADS], [
AC_MSG_CHECKING([for maximum number of MDS threads])
AC_ARG_WITH([mds_max_threads],
	AC_HELP_STRING([--with-mds-max-threads=count],
		[maximum threads available on the MDS: (default=512)]),
	[AC_DEFINE_UNQUOTED(MDS_MAX_THREADS, $with_mds_max_threads,
		[maximum number of MDS threads])])
AC_MSG_RESULT([$with_mds_max_threads])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:107: -1- AC_DEFUN([LC_CONFIG_PINGER], [
AC_MSG_CHECKING([whether to enable Lustre pinger support])
AC_ARG_ENABLE([pinger],
	AC_HELP_STRING([--disable-pinger],
		[disable recovery pinger support]),
	[], [enable_pinger="yes"])
AC_MSG_RESULT([$enable_pinger])
AS_IF([test "x$enable_pinger" != xno],
	[AC_DEFINE(ENABLE_PINGER, 1,[Use the Pinger])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:123: -1- AC_DEFUN([LC_CONFIG_CHECKSUM], [
AC_MSG_CHECKING([whether to enable data checksum support])
AC_ARG_ENABLE([checksum],
	AC_HELP_STRING([--disable-checksum],
		[disable data checksum support]),
	[], [enable_checksum="yes"])
AC_MSG_RESULT([$enable_checksum])
AS_IF([test "x$enable_checksum" != xno],
	[AC_DEFINE(ENABLE_CHECKSUM, 1, [do data checksums])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:139: -1- AC_DEFUN([LC_CONFIG_FLOCK], [
AC_MSG_CHECKING([whether to enable flock by default])
AC_ARG_ENABLE([flock],
	AC_HELP_STRING([--disable-flock],
		[disable flock by default]),
	[], [enable_flock="yes"])
AC_MSG_RESULT([$enable_flock])
AS_IF([test "x$enable_flock" != xno],
	[AC_DEFINE(ENABLE_FLOCK, 1, [enable flock by default])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:155: -1- AC_DEFUN([LC_CONFIG_HEALTH_CHECK_WRITE], [
AC_MSG_CHECKING([whether to enable a write with the health check])
AC_ARG_ENABLE([health_write],
	AC_HELP_STRING([--enable-health_write],
		[enable disk writes when doing health check]),
	[], [enable_health_write="no"])
AC_MSG_RESULT([$enable_health_write])
AS_IF([test "x$enable_health_write" != xno],
	[AC_DEFINE(USE_HEALTH_CHECK_WRITE, 1, [Write when Checking Health])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:169: -1- AC_DEFUN([LC_CONFIG_LRU_RESIZE], [
AC_MSG_CHECKING([whether to enable lru self-adjusting])
AC_ARG_ENABLE([lru_resize],
	AC_HELP_STRING([--enable-lru-resize],
		[enable lru resize support]),
	[], [enable_lru_resize="yes"])
AC_MSG_RESULT([$enable_lru_resize])
AS_IF([test "x$enable_lru_resize" != xno],
	[AC_DEFINE(HAVE_LRU_RESIZE_SUPPORT, 1, [Enable lru resize support])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:182: -1- AC_DEFUN([LC_QUOTA_CONFIG], [
LB_CHECK_CONFIG_IM([QUOTA], [],
	[AC_MSG_ERROR([

Lustre quota requires that CONFIG_QUOTA is enabled in your kernel.
])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:195: -1- AC_DEFUN([LC_POSIX_ACL_CONFIG], [
LB_CHECK_CONFIG_IM([FS_POSIX_ACL],
	[AC_DEFINE(CONFIG_LUSTRE_FS_POSIX_ACL, 1, [Enable POSIX acl])
], [ ])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:232: -1- AC_DEFUN([LC_CONFIG_GSS_KEYRING], [
AC_MSG_CHECKING([whether to enable gss keyring backend])
AC_ARG_ENABLE([gss_keyring],
	[AC_HELP_STRING([--disable-gss-keyring],
		[disable gss keyring backend])],
	[], [enable_gss_keyring="auto"])
AC_MSG_RESULT([$enable_gss_keyring])
AS_IF([test "x$enable_gss_keyring" != xno], [
	LB_CHECK_CONFIG_IM([KEYS], [], [
		gss_keyring_conf_test="fail"
		AC_MSG_WARN([GSS keyring backend requires that CONFIG_KEYS be enabled in your kernel.])])

	AC_CHECK_LIB([keyutils], [keyctl_search], [], [
		gss_keyring_conf_test="fail"
		AC_MSG_WARN([GSS keyring backend requires libkeyutils])])

	AS_IF([test "x$gss_keyring_conf_test" != xfail], [
		AC_DEFINE([HAVE_GSS_KEYRING], [1],
			[Define this if you enable gss keyring backend])
		enable_gss_keyring="yes"
	], [
		AS_IF([test "x$enable_gss_keyring" = xyes], [
			AC_MSG_ERROR([Cannot enable gss_keyring. See above for details.])
		])
	])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:249: -1- AC_DEFUN([LC_HAVE_CRED_TGCRED], [
LB_CHECK_COMPILE([if 'struct cred' has member 'tgcred'],
cred_tgcred, [
	#include <linux/cred.h>
],[
	((struct cred *)0)->tgcred = NULL;
],[
	AC_DEFINE(HAVE_CRED_TGCRED, 1,
		[struct cred has member tgcred])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:266: -1- AC_DEFUN([LC_KEY_TYPE_INSTANTIATE_2ARGS], [
LB_CHECK_COMPILE([if 'key_type->instantiate' has two args],
key_type_instantiate_2args, [
	#include <linux/key-type.h>
],[
	((struct key_type *)0)->instantiate(0, NULL);
],[
	AC_DEFINE(HAVE_KEY_TYPE_INSTANTIATE_2ARGS, 1,
		[key_type->instantiate has two args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:279: -1- AC_DEFUN([LC_CONFIG_SUNRPC], [
LB_CHECK_CONFIG_IM([SUNRPC], [], [
	AS_IF([test "x$sunrpc_required" = xyes], [
		AC_MSG_ERROR([

kernel SUNRPC support is required by using GSS.
])
	])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:333: -1- AC_DEFUN([LC_CONFIG_GSS], [
AC_MSG_CHECKING([whether to enable gss support])
AC_ARG_ENABLE([gss],
	[AC_HELP_STRING([--enable-gss], [enable gss support])],
	[], [enable_gss="auto"])
AC_MSG_RESULT([$enable_gss])

AS_IF([test "x$enable_gss" != xno], [
	LC_CONFIG_GSS_KEYRING
	LC_HAVE_CRED_TGCRED
	LC_KEY_TYPE_INSTANTIATE_2ARGS
	sunrpc_required=$enable_gss
	LC_CONFIG_SUNRPC
	sunrpc_required="no"

	LB_CHECK_CONFIG_IM([CRYPTO_MD5], [],
		[AC_MSG_WARN([kernel MD5 support is recommended by using GSS.])])
	LB_CHECK_CONFIG_IM([CRYPTO_SHA1], [],
		[AC_MSG_WARN([kernel SHA1 support is recommended by using GSS.])])
	LB_CHECK_CONFIG_IM([CRYPTO_SHA256], [],
		[AC_MSG_WARN([kernel SHA256 support is recommended by using GSS.])])
	LB_CHECK_CONFIG_IM([CRYPTO_SHA512], [],
		[AC_MSG_WARN([kernel SHA512 support is recommended by using GSS.])])

	require_krb5=$enable_gss
	AC_KERBEROS_V5
	require_krb5="no"

	AS_IF([test -n "$KRBDIR"], [
		gss_conf_test="success"
	], [
		gss_conf_test="failure"
	])

	AS_IF([test "x$gss_conf_test" = xsuccess && test "x$enable_gss" != xno], [
		AC_DEFINE([HAVE_GSS], [1], [Define this is if you enable gss])
		enable_gss="yes"
	], [
		enable_gss_keyring="no"
		enable_gss="no"
	])

	enable_ssk=$enable_gss
], [
	enable_gss_keyring="no"
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:354: -1- AC_DEFUN([LC_OPENSSL_SSK], [
AC_MSG_CHECKING([whether OpenSSL has functions needed for SSK])
AS_IF([test "x$enable_ssk" != xno], [
AC_COMPILE_IFELSE([AC_LANG_SOURCE([
	#include <openssl/hmac.h>
	#include <openssl/evp.h>

	int main(void) {
		int rc;
		rc = HMAC_Init_ex(NULL, "test", 4, EVP_md_null(), NULL);
	}
])],[AC_DEFINE(HAVE_OPENSSL_SSK, 1,
	       [OpenSSL HMAC functions needed for SSK])],
	[enable_ssk="no"])
])
AC_MSG_RESULT([$enable_ssk])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:379: -1- AC_DEFUN([LC_OPENSSL_GETSEPOL], [
AC_MSG_CHECKING([whether openssl-devel is present])
AC_COMPILE_IFELSE([AC_LANG_SOURCE([
	#include <openssl/evp.h>

	int main(void) {
		EVP_MD_CTX *mdctx = EVP_MD_CTX_create();
	}
])],[
	AC_DEFINE(HAVE_OPENSSL_GETSEPOL, 1, [openssl-devel is present])
	enable_getsepol="yes"

],[
	enable_getsepol="no"
	AC_MSG_WARN([

No openssk-devel headers found, unable to build l_getsepol and SELinux status checking
])
])
AC_MSG_RESULT([$enable_getsepol])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:401: -1- AC_DEFUN([LC_INODE_PERMISION_2ARGS], [
LB_CHECK_COMPILE([if 'inode_operations->permission' has two args],
inode_ops_permission_2args, [
	#include <linux/fs.h>
],[
	struct inode *inode __attribute__ ((unused));

	inode = NULL;
	inode->i_op->permission(NULL, 0);
],[
	AC_DEFINE(HAVE_INODE_PERMISION_2ARGS, 1,
		[inode_operations->permission has two args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:421: -1- AC_DEFUN([LC_HAVE_FSTYPE_MOUNT], [
LB_CHECK_COMPILE([if 'file_system_type' has 'mount' field],
file_system_type_mount, [
	#include <linux/fs.h>
],[
	struct file_system_type fst = { };
	void *mount;

	mount = (void *)fst.mount;
],[
	AC_DEFINE(HAVE_FSTYPE_MOUNT, 1,
		[struct file_system_type has mount field])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:435: -1- AC_DEFUN([LC_HAVE_FHANDLE_SYSCALLS], [
LB_CHECK_CONFIG_IM([FHANDLE],[
	AC_DEFINE(HAVE_FHANDLE_SYSCALLS, 1,
		[kernel supports fhandles and related syscalls])
	])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:452: -1- AC_DEFUN([LC_HAVE_INODE_OWNER_OR_CAPABLE], [
LB_CHECK_COMPILE([if 'inode_owner_or_capable' exist],
inode_owner_or_capable, [
	#include <linux/fs.h>
],[
	inode_owner_or_capable(NULL);
],[
	AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE, 1,
		[inode_owner_or_capable exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:471: -1- AC_DEFUN([LC_DIRTY_INODE_WITH_FLAG], [
LB_CHECK_COMPILE([if 'dirty_inode' super_operation takes flag],
dirty_inode_super_operation_flag, [
	#include <linux/fs.h>
],[
	struct inode *inode = NULL;
	inode->i_sb->s_op->dirty_inode(NULL, 0);
],[
	AC_DEFINE(HAVE_DIRTY_INODE_HAS_FLAG, 1,
		[dirty_inode super_operation takes flag])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:483: -1- AC_DEFUN([LC_SETNS], [
AC_CHECK_HEADERS([sched.h], [], [],
		 [#define _GNU_SOURCE
		 ])
AC_CHECK_FUNCS([setns])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:502: -1- AC_DEFUN([LC_LM_XXX_LOCK_MANAGER_OPS], [
LB_CHECK_COMPILE([if 'lock-manager' ops renamed to 'lm_xxx'],
lock_manager_ops_lm_xxx, [
	#include <linux/fs.h>
],[
	struct lock_manager_operations lm_ops;
	lm_ops.lm_notify = NULL;
],[
	AC_DEFINE(HAVE_LM_XXX_LOCK_MANAGER_OPS, 1,
		[lock-manager ops renamed to lm_xxx])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:521: -1- AC_DEFUN([LC_INODE_DIO_WAIT], [
LB_CHECK_COMPILE([if 'inode->i_alloc_sem' is killed and use inode_dio_wait],
inode_dio_wait, [
	#include <linux/fs.h>
],[
	inode_dio_wait((struct inode *)0);
],[
	AC_DEFINE(HAVE_INODE_DIO_WAIT, 1,
		[inode->i_alloc_sem is killed and use inode_dio_wait])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:540: -1- AC_DEFUN([LC_IOP_GET_ACL], [
LB_CHECK_COMPILE([if 'inode_operations' has '.get_acl' member function],
inode_ops_get_acl, [
	#include <linux/fs.h>
],[
	struct inode_operations iop;
	iop.get_acl = NULL;
],[
	AC_DEFINE(HAVE_IOP_GET_ACL, 1,
		[inode_operations has .get_acl member function])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:551: -1- AC_DEFUN([LC_FILE_LLSEEK_SIZE], [
LB_CHECK_EXPORT([generic_file_llseek_size], [fs/read_write.c],
	[AC_DEFINE(HAVE_FILE_LLSEEK_SIZE, 1,
		[generic_file_llseek_size is exported by the kernel])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:567: -1- AC_DEFUN([LC_RADIX_EXCEPTION_ENTRY], [
LB_CHECK_COMPILE([radix_tree_exceptional_entry exist],
radix_tree_exceptional_entry, [
	#include <linux/radix-tree.h>
],[
	radix_tree_exceptional_entry(NULL);
],[
	AC_DEFINE(HAVE_RADIX_EXCEPTION_ENTRY, 1,
		[radix_tree_exceptional_entry exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:587: -1- AC_DEFUN([LC_HAVE_PROTECT_I_NLINK], [
LB_CHECK_COMPILE([if 'inode->i_nlink' is protected from direct modification],
inode_i_nlink_protected, [
	#include <linux/fs.h>
],[
	struct inode i;
	set_nlink(&i, 1);
],[
	AC_DEFINE(HAVE_PROTECT_I_NLINK, 1,
		[inode->i_nlink is protected from direct modification])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:614: -1- AC_DEFUN([LC_HAVE_SECURITY_IINITSEC], [
LB_CHECK_COMPILE([if security_inode_init_security takes a callback],
security_inode_init_security_callback, [
	#include <linux/security.h>
],[
	security_inode_init_security(NULL, NULL, NULL, (const initxattrs)NULL, NULL);
],[
	AC_DEFINE(HAVE_SECURITY_IINITSEC_CALLBACK, 1,
		  [security_inode_init_security takes a callback to set xattrs])
],[
	LB_CHECK_COMPILE([if security_inode_init_security takes a 'struct qstr' parameter],
	security_inode_init_security_qstr, [
		#include <linux/security.h>
	],[
		security_inode_init_security(NULL, NULL, (struct qstr *)NULL, NULL, NULL, NULL);
	],[
		AC_DEFINE(HAVE_SECURITY_IINITSEC_QSTR, 1,
			  [security_inode_init_security takes a 'struct qstr' parameter])
	])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:631: -1- AC_DEFUN([LC_VFS_CREATE_USE_NAMEIDATA], [
LB_CHECK_COMPILE([if vfs_create takes a struct nameidata parameter],
vfs_create, [
	#include <linux/namei.h>
	#include <linux/fs.h>
],[
	struct nameidata *nd;
	vfs_create(NULL, NULL, 0, nd);
],[
	AC_DEFINE(HAVE_VFS_CREATE_USE_NAMEIDATA, 1,
		[vfs_create use nameidata as parameter])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:648: -1- AC_DEFUN([LC_HAVE_MIGRATE_HEADER], [
LB_CHECK_FILE([$LINUX/include/linux/migrate.h], [
	AC_DEFINE(HAVE_MIGRATE_H, 1,
		[kernel has include/linux/migrate.h])
],[
	LB_CHECK_FILE([$LINUX/include/linux/migrate_mode.h], [
		AC_DEFINE(HAVE_MIGRATE_MODE_H, 1,
			[kernel has include/linux/migrate_mode.h])
	])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:669: -1- AC_DEFUN([LC_MIGRATEPAGE_4ARGS], [
LB_CHECK_COMPILE([if 'address_space_operations.migratepage' has 4 args],
address_space_ops_migratepage_4args, [
	#include <linux/fs.h>
#ifdef HAVE_MIGRATE_H
	#include <linux/migrate.h>
#elif defined(HAVE_MIGRATE_MODE_H)
	#include <linux/migrate_mode.h>
#endif
],[
	struct address_space_operations aops = { };
	aops.migratepage(NULL, NULL, NULL, MIGRATE_ASYNC);
],[
	AC_DEFINE(HAVE_MIGRATEPAGE_4ARGS, 1,
		[address_space_operations.migratepage has 4 args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:694: -1- AC_DEFUN([LC_SUPEROPS_USE_DENTRY], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'super_operations' use 'dentry' as parameter],
super_ops_dentry, [
	#include <linux/fs.h>
	int show_options(struct seq_file *seq, struct dentry *root) {
		return 0;
	}
],[
	struct super_operations ops;
	ops.show_options = show_options;
],[
	AC_DEFINE(HAVE_SUPEROPS_USE_DENTRY, 1,
		[super_operations use dentry as parameter])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:722: -1- AC_DEFUN([LC_INODEOPS_USE_UMODE_T], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'inode_operations' use 'umode_t' as parameter],
inode_ops_umode_t, [
	#include <linux/fs.h>
	#include <linux/types.h>
	int my_mknod(struct inode *dir, struct dentry *dchild,
		     umode_t mode, dev_t dev)
	{
		return 0;
	}
],[
	struct inode_operations ops;
	ops.mknod = my_mknod;
],[
	AC_DEFINE(HAVE_INODEOPS_USE_UMODE_T, 1,
		[inode_operations use umode_t as parameter])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:740: -1- AC_DEFUN([LC_KMAP_ATOMIC_HAS_1ARG], [
LB_CHECK_COMPILE([if 'kmap_atomic' has only 1 argument],
kmap_atomic_1arg, [
	#include <linux/highmem.h>
],[
	kmap_atomic(NULL);
],[
	AC_DEFINE(HAVE_KMAP_ATOMIC_HAS_1ARG, 1,
		[have kmap_atomic has only 1 argument])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:758: -1- AC_DEFUN([LC_HAVE_D_MAKE_ROOT], [
LB_CHECK_COMPILE([if have 'd_make_root'],
d_make_root, [
	#include <linux/fs.h>
],[
	d_make_root((struct inode *)NULL);
],[
	AC_DEFINE(HAVE_D_MAKE_ROOT, 1,
		[have d_make_root])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:780: -1- AC_DEFUN([LC_HAVE_CACHE_REGISTER], [
LB_CHECK_COMPILE([if have 'cache_register'],
cache_register, [
	#include <linux/sunrpc/cache.h>
],[
	cache_register(NULL);
],[
	AC_DEFINE(HAVE_CACHE_REGISTER, 1,
		[have cache_register])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:798: -1- AC_DEFUN([LC_HAVE_CLEAR_INODE], [
LB_CHECK_COMPILE([if have 'clear_inode'],
clear_inode, [
	#include <linux/fs.h>
],[
	clear_inode((struct inode *)NULL);
],[
	AC_DEFINE(HAVE_CLEAR_INODE, 1,
		[have clear_inode])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:826: -1- AC_DEFUN([LC_HAVE_ENCODE_FH_PARENT], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'encode_fh' have parent inode as parameter],
encode_fh_parent_inode, [
	#include <linux/exportfs.h>
	#include <linux/fs.h>
	#include <linux/types.h>
	int ll_encode_fh(struct inode *i, __u32 *a, int *b, struct inode *p)
	{
		return 0;
	}
],[
	struct export_operations exp_op;
	exp_op.encode_fh = ll_encode_fh;
],[
	AC_DEFINE(HAVE_ENCODE_FH_PARENT, 1,
		[have parent inode as parameter])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:843: -1- AC_DEFUN([LC_FILE_LLSEEK_SIZE_5ARG], [
LB_CHECK_COMPILE([if Linux kernel has 'generic_file_llseek_size' with 5 args],
generic_file_llseek_size_5args, [
	#include <linux/fs.h>
],[
	generic_file_llseek_size(NULL, 0, 0, 0, 0);
], [
	AC_DEFINE(HAVE_FILE_LLSEEK_SIZE_5ARGS, 1,
		[kernel has generic_file_llseek_size with 5 args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:874: -1- AC_DEFUN([LC_DATA_FOR_LLITE_IS_LIST], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'i_dentry/d_alias' uses 'list'],
i_dentry_d_alias_list, [
	#include <linux/fs.h>
],[
	struct inode inode;
	INIT_LIST_HEAD(&inode.i_dentry);
],[
	AC_DEFINE(DATA_FOR_LLITE_IS_LIST, 1,
		[both i_dentry/d_alias uses list])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:897: -1- AC_DEFUN([LC_DENTRY_OPEN_USE_PATH], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'dentry_open' uses 'struct path' as first argument],
dentry_open_path, [
	#include <linux/fs.h>
	#include <linux/path.h>
],[
	struct path path;
	dentry_open(&path, 0, NULL);
],[
	AC_DEFINE(HAVE_DENTRY_OPEN_USE_PATH, 1,
		[dentry_open uses struct path as first argument])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:915: -1- AC_DEFUN([LC_HAVE_IOP_ATOMIC_OPEN], [
LB_CHECK_COMPILE([if 'iop' has 'atomic_open'],
inode_ops_atomic_open, [
	#include <linux/fs.h>
],[
	struct inode_operations iop;
	iop.atomic_open = NULL;
],[
	AC_DEFINE(HAVE_IOP_ATOMIC_OPEN, 1,
		[have iop atomic_open])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:932: -1- AC_DEFUN([LC_HAVE_SB_START_WRITE], [
LB_CHECK_COMPILE([if kernel supports wrapped FS freeze functions],
sb_start_write, [
	#include <linux/fs.h>
],[
	sb_start_write(NULL);
],[
	AC_DEFINE(HAVE_SB_START_WRITE, 1,
		[kernel supports wrapped FS freeze functions])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:950: -1- AC_DEFUN([LC_HAVE_POSIXACL_USER_NS], [
LB_CHECK_COMPILE([if 'posix_acl_to_xattr' takes 'struct user_namespace'],
posix_acl_to_xattr_user_namespace, [
	#include <linux/fs.h>
	#include <linux/posix_acl_xattr.h>
],[
	posix_acl_to_xattr((struct user_namespace *)NULL, NULL, NULL, 0);
],[
	AC_DEFINE(HAVE_POSIXACL_USER_NS, 1,
		[posix_acl_to_xattr takes struct user_namespace])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:967: -1- AC_DEFUN([LC_HAVE_FILE_F_INODE], [
LB_CHECK_COMPILE([if 'struct file' has member 'f_inode'],
file_f_inode, [
	#include <linux/fs.h>
],[
	((struct file *)0)->f_inode = NULL;
],[
	AC_DEFINE(HAVE_FILE_F_INODE, 1,
		[struct file has member f_inode])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:984: -1- AC_DEFUN([LC_HAVE_FILE_INODE], [
LB_CHECK_COMPILE([if file_inode() exists],
file_inode, [
	#include <linux/fs.h>
],[
	file_inode(NULL);
],[
	AC_DEFINE(HAVE_FILE_INODE, 1,
		[file_inode() has been defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:999: -1- AC_DEFUN([LC_HAVE_SUNRPC_UPCALL_HAS_3ARGS], [
LB_CHECK_COMPILE([if 'sunrpc_cache_pipe_upcall' takes 3 args],
sunrpc_cache_pipe_upcall_3args, [
	#include <linux/sunrpc/cache.h>
],[
	sunrpc_cache_pipe_upcall(NULL, NULL, NULL);
],[
	AC_DEFINE(HAVE_SUNRPC_UPCALL_HAS_3ARGS, 1,
		[sunrpc_cache_pipe_upcall takes 3 args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1023: -1- AC_DEFUN([LC_HAVE_HLIST_FOR_EACH_3ARG], [
LB_CHECK_COMPILE([if 'hlist_for_each_entry' has 3 args],
hlist_for_each_entry_3args, [
	#include <linux/list.h>
	#include <linux/fs.h>
],[
	struct hlist_head *head = NULL;
	struct inode *inode;

	hlist_for_each_entry(inode, head, i_hash) {
		continue;
	}
],[
	AC_DEFINE(HAVE_HLIST_FOR_EACH_3ARG, 1,
		[hlist_for_each_entry has 3 args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1044: -1- AC_DEFUN([LC_HAVE_BIO_END_SECTOR], [
LB_CHECK_COMPILE([if 'bio_end_sector' is defined],
bio_end_sector, [
	#include <linux/bio.h>
],[
	struct bio bio = { };
	unsigned long long end;

	end = bio_end_sector(&bio);
],[
	AC_DEFINE(HAVE_BIO_END_SECTOR, 1,
		  [bio_end_sector is defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1060: -1- AC_DEFUN([LC_HAVE_IS_SXID], [
LB_CHECK_COMPILE([if 'is_sxid' is defined],
is_sxid, [
	#include <linux/fs.h>
],[
	struct inode inode = { };

	is_sxid(inode.i_mode);
],[
	AC_DEFINE(HAVE_IS_SXID, 1, [is_sxid is defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1077: -1- AC_DEFUN([LC_HAVE_VFS_GETATTR_2ARGS], [
LB_CHECK_COMPILE([if vfs_getattr takes 2 args],
vfs_getattr, [
	#include <linux/fs.h>
],[
	struct path path;

	vfs_getattr(&path, NULL);
],[
	AC_DEFINE(HAVE_VFS_GETATTR_2ARGS, 1,
		[vfs_getattr takes 2 args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1094: -1- AC_DEFUN([LC_HAVE_REMOVE_PROC_SUBTREE], [
LB_CHECK_COMPILE([if 'remove_proc_subtree' is defined],
remove_proc_subtree, [
	#include <linux/proc_fs.h>
],[
	remove_proc_subtree(NULL, NULL);
], [
	AC_DEFINE(HAVE_REMOVE_PROC_SUBTREE, 1,
		  [remove_proc_subtree is defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1111: -1- AC_DEFUN([LC_HAVE_PROC_REMOVE], [
LB_CHECK_COMPILE([if 'proc_remove' is defined],
proc_remove, [
	#include <linux/proc_fs.h>
],[
	proc_remove(NULL);
], [
	AC_DEFINE(HAVE_PROC_REMOVE, 1,
		  [proc_remove is defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1126: -1- AC_DEFUN([LC_HAVE_PROJECT_QUOTA], [
LB_CHECK_COMPILE([if get_projid exists],
get_projid, [
	struct inode;
	#include <linux/quota.h>
],[
	struct dquot_operations ops = { };

	ops.get_projid(NULL, NULL);
],[
	AC_DEFINE(HAVE_PROJECT_QUOTA, 1,
		[get_projid function exists])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1144: -1- AC_DEFUN([LC_HAVE_SECURITY_DENTRY_INIT_SECURITY], [
LB_CHECK_COMPILE([if 'security_dentry_init_security' is defined],
security_dentry_init_security, [
	#include <linux/security.h>
],[
	security_dentry_init_security(NULL, 0, NULL, NULL, NULL);
],[
	AC_DEFINE(HAVE_SECURITY_DENTRY_INIT_SECURITY, 1,
		[security_dentry_init_security' is defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1159: -1- AC_DEFUN([LC_HAVE_SECURITY_INODE_LISTSECURITY], [
LB_CHECK_COMPILE([if security_inode_listsecurity() is available/exported],
security_inode_listsecurity, [
	#include <linux/security.h>
],[
	security_inode_listsecurity(NULL, NULL, 0);
],[
	AC_DEFINE(HAVE_SECURITY_INODE_LISTSECURITY, 1,
		  [security_inode_listsecurity() is available/exported])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1177: -1- AC_DEFUN([LC_INVALIDATE_RANGE], [
LB_CHECK_COMPILE([if 'address_space_operations.invalidatepage' requires 3 arguments],
address_space_ops_invalidatepage_3args, [
	#include <linux/fs.h>
],[
	struct address_space_operations a_ops;
	a_ops.invalidatepage(NULL, 0, 0);
],[
	AC_DEFINE(HAVE_INVALIDATE_RANGE, 1,
		[address_space_operations.invalidatepage needs 3 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1200: -1- AC_DEFUN([LC_HAVE_DIR_CONTEXT], [
LB_CHECK_COMPILE([if 'dir_context' exist],
dir_context, [
	#include <linux/fs.h>
],[
#ifdef FMODE_KABI_ITERATE
#error "back to use readdir in kabi_extand mode"
#else
	struct dir_context ctx;

	ctx.pos = 0;
#endif
],[
	AC_DEFINE(HAVE_DIR_CONTEXT, 1,
		[dir_context exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1217: -1- AC_DEFUN([LC_D_COMPARE_5ARGS], [
LB_CHECK_COMPILE([if 'd_compare' taken 5 arguments],
d_compare_5args, [
	#include <linux/dcache.h>
],[
	((struct dentry_operations*)0)->d_compare(NULL,NULL,0,NULL,NULL);
],[
	AC_DEFINE(HAVE_D_COMPARE_5ARGS, 1,
		[d_compare need 5 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1237: -1- AC_DEFUN([LC_HAVE_DCOUNT], [
LB_CHECK_COMPILE([if 'd_count' exists],
d_count, [
	#include <linux/dcache.h>
],[
	struct dentry de = { };
	int count;

	count = d_count(&de);
],[
	AC_DEFINE(HAVE_D_COUNT, 1,
		[d_count exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1255: -1- AC_DEFUN([LC_PID_NS_FOR_CHILDREN], [
LB_CHECK_COMPILE([if 'struct nsproxy' has 'pid_ns_for_children'],
pid_ns_for_children, [
	#include <linux/nsproxy.h>
],[
	struct nsproxy ns;
	ns.pid_ns_for_children = NULL;
],[
	AC_DEFINE(HAVE_PID_NS_FOR_CHILDREN, 1,
		  ['struct nsproxy' has 'pid_ns_for_children'])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1272: -1- AC_DEFUN([LC_OLDSIZE_TRUNCATE_PAGECACHE], [
LB_CHECK_COMPILE([if 'truncate_pagecache' with 'old_size' parameter],
truncate_pagecache_old_size, [
	#include <linux/mm.h>
],[
	truncate_pagecache(NULL, 0, 0);
],[
	AC_DEFINE(HAVE_OLDSIZE_TRUNCATE_PAGECACHE, 1,
		[with oldsize])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1290: -1- AC_DEFUN([LC_PTR_ERR_OR_ZERO_MISSING], [
LB_CHECK_COMPILE([if 'PTR_ERR_OR_ZERO' is missing],
is_err_or_null, [
	#include <linux/err.h>
],[
	if (PTR_ERR_OR_ZERO(NULL)) return 0;
],[
	AC_DEFINE(HAVE_PTR_ERR_OR_ZERO, 1,
		['PTR_ERR_OR_ZERO' exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1325: -1- AC_DEFUN([LC_HAVE_DENTRY_D_U_D_ALIAS], [
AS_IF([test "x$lb_cv_compile_i_dentry_d_alias_list" = xyes], [
	LB_CHECK_COMPILE([if list 'dentry.d_u.d_alias' exist],
	d_alias, [
		#include <linux/list.h>
		#include <linux/dcache.h>
	],[
		struct dentry de;
		INIT_LIST_HEAD(&de.d_u.d_alias);
	],[
		AC_DEFINE(HAVE_DENTRY_D_U_D_ALIAS, 1,
			[list dentry.d_u.d_alias exist])
	])
],[
	LB_CHECK_COMPILE([if hlist 'dentry.d_u.d_alias' exist],
	d_alias, [
		#include <linux/list.h>
		#include <linux/dcache.h>
	],[
		struct dentry de;
		INIT_HLIST_NODE(&de.d_u.d_alias);
	],[
		AC_DEFINE(HAVE_DENTRY_D_U_D_ALIAS, 1,
			[hlist dentry.d_u.d_alias exist])
	])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1345: -1- AC_DEFUN([LC_HAVE_DENTRY_D_CHILD], [
LB_CHECK_COMPILE([if 'dentry.d_child' exist],
d_child, [
	#include <linux/list.h>
	#include <linux/dcache.h>
],[
	struct dentry de;
	INIT_LIST_HEAD(&de.d_child);
],[
	AC_DEFINE(HAVE_DENTRY_D_CHILD, 1,
		[dentry.d_child exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1362: -1- AC_DEFUN([LC_KIOCB_KI_LEFT], [
LB_CHECK_COMPILE([if 'struct kiocb' with 'ki_left' member],
kiocb_ki_left, [
	#include <linux/aio.h>
],[
	((struct kiocb*)0)->ki_left = 0;
],[
	AC_DEFINE(HAVE_KIOCB_KI_LEFT, 1,
		[ki_left exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1383: -1- AC_DEFUN([LC_INIT_LIST_HEAD_RCU], [
LB_CHECK_COMPILE([if 'INIT_LIST_HEAD_RCU' exists],
init_list_head_rcu, [
	#include <linux/list.h>
	#include <linux/rculist.h>
],[
	struct list_head list;
	INIT_LIST_HEAD_RCU(&list);
],[
	AC_DEFINE(HAVE_INIT_LIST_HEAD_RCU, 1,
		  [INIT_LIST_HEAD_RCU exists])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1400: -1- AC_DEFUN([LC_VFS_RENAME_5ARGS], [
LB_CHECK_COMPILE([if Linux kernel has 'vfs_rename' with 5 args],
vfs_rename_5args, [
	#include <linux/fs.h>
],[
	vfs_rename(NULL, NULL, NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_VFS_RENAME_5ARGS, 1,
		[kernel has vfs_rename with 5 args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1417: -1- AC_DEFUN([LC_VFS_UNLINK_3ARGS], [
LB_CHECK_COMPILE([if Linux kernel has 'vfs_unlink' with 3 args],
vfs_unlink_3args, [
	#include <linux/fs.h>
],[
	vfs_unlink(NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_VFS_UNLINK_3ARGS, 1,
		[kernel has vfs_unlink with 3 args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1434: -1- AC_DEFUN([LC_HAVE_D_IS_POSITIVE], [
LB_CHECK_COMPILE([if 'd_is_positive' exist],
d_is_positive, [
	#include <linux/dcache.h>
],[
	d_is_positive(NULL);
],[
	AC_DEFINE(HAVE_D_IS_POSITIVE, 1,
		['d_is_positive' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1454: -1- AC_DEFUN([LC_HAVE_BVEC_ITER], [
LB_CHECK_COMPILE([if Linux kernel has struct bvec_iter],
have_bvec_iter, [
	#include <linux/bio.h>
],[
	struct bvec_iter iter;

	iter.bi_bvec_done = 0;
], [
	AC_DEFINE(HAVE_BVEC_ITER, 1,
		[kernel has struct bvec_iter])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1473: -1- AC_DEFUN([LC_IOP_SET_ACL], [
LB_CHECK_COMPILE([if 'inode_operations' has '.set_acl' member function],
inode_ops_set_acl, [
	#include <linux/fs.h>
],[
	struct inode_operations iop;
	iop.set_acl = NULL;
],[
	AC_DEFINE(HAVE_IOP_SET_ACL, 1,
		[inode_operations has .set_acl member function])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1490: -1- AC_DEFUN([LC_HAVE_TRUNCATE_IPAGES_FINAL], [
LB_CHECK_COMPILE([if Linux kernel has truncate_inode_pages_final],
truncate_ipages_final, [
	#include <linux/mm.h>
],[
	truncate_inode_pages_final(NULL);
], [
	AC_DEFINE(HAVE_TRUNCATE_INODE_PAGES_FINAL, 1,
		[kernel has truncate_inode_pages_final])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1511: -1- AC_DEFUN([LC_IOPS_RENAME_WITH_FLAGS], [
LB_CHECK_COMPILE([if 'inode_operations->rename' taken flags as argument],
iops_rename_with_flags, [
	#include <linux/fs.h>
],[
	struct inode *i1 = NULL, *i2 = NULL;
	struct dentry *d1 = NULL, *d2 = NULL;
	int rc;
	rc = ((struct inode_operations *)0)->rename(i1, d1, i2, d2, 0);
], [
	AC_DEFINE(HAVE_IOPS_RENAME_WITH_FLAGS, 1,
		[inode_operations->rename need flags as argument])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1528: -1- AC_DEFUN([LC_VFS_RENAME_6ARGS], [
LB_CHECK_COMPILE([if Linux kernel has 'vfs_rename' with 6 args],
vfs_rename_6args, [
	#include <linux/fs.h>
],[
	vfs_rename(NULL, NULL, NULL, NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_VFS_RENAME_6ARGS, 1,
		[kernel has vfs_rename with 6 args])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1549: -1- AC_DEFUN([LC_DIRECTIO_USE_ITER], [
LB_CHECK_COMPILE([if direct IO uses iov_iter],
direct_io_iter, [
	#include <linux/fs.h>
],[
	struct address_space_operations ops = { };
	struct iov_iter *iter = NULL;
	loff_t offset = 0;

	ops.direct_IO(0, NULL, iter, offset);
],[
	AC_DEFINE(HAVE_DIRECTIO_ITER, 1,
		[direct IO uses iov_iter])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1575: -1- AC_DEFUN([LC_HAVE_IOV_ITER_INIT_DIRECTION], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'iov_iter_init' takes a tag],
iter_init, [
	#include <linux/uio.h>
	#include <linux/fs.h>
],[
	const struct iovec *iov = NULL;

	iov_iter_init(NULL, READ, iov, 1, 0);
],[
	AC_DEFINE(HAVE_IOV_ITER_INIT_DIRECTION, 1,
		[iov_iter_init handles directional tag])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1598: -1- AC_DEFUN([LC_HAVE_IOV_ITER_TRUNCATE], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'iov_iter_truncate' exists ],
iter_truncate, [
	#include <linux/uio.h>
	#include <linux/fs.h>
],[
	struct iov_iter *i = NULL;

	iov_iter_truncate(i, 0);
],[
	AC_DEFINE(HAVE_IOV_ITER_TRUNCATE, 1, [iov_iter_truncate exists])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1616: -1- AC_DEFUN([LC_HAVE_FILE_OPERATIONS_READ_WRITE_ITER], [
LB_CHECK_COMPILE([if 'file_operations.[read|write]_iter' exist],
file_function_iter, [
	#include <linux/fs.h>
],[
	((struct file_operations *)NULL)->read_iter(NULL, NULL);
	((struct file_operations *)NULL)->write_iter(NULL, NULL);
],[
	AC_DEFINE(HAVE_FILE_OPERATIONS_READ_WRITE_ITER, 1,
		[file_operations.[read|write]_iter functions exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1633: -1- AC_DEFUN([LC_HAVE_INTERVAL_BLK_INTEGRITY], [
LB_CHECK_COMPILE([if 'blk_integrity.interval' exist],
interval_blk_integrity, [
	#include <linux/blkdev.h>
],[
	((struct blk_integrity *)0)->interval = 0;
],[
	AC_DEFINE(HAVE_INTERVAL_BLK_INTEGRITY, 1,
		[blk_integrity.interval exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1653: -1- AC_DEFUN([LC_KEY_MATCH_DATA], [
LB_CHECK_COMPILE([if struct key_match field exist],
key_match, [
	#include <linux/key-type.h>
],[
	struct key_match_data data;

	data.raw_data = NULL;
],[
	AC_DEFINE(HAVE_KEY_MATCH_DATA, 1,
		[struct key_match_data exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1683: -1- AC_DEFUN([LC_NFS_FILLDIR_USE_CTX], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if filldir_t uses struct dir_context],
filldir_ctx, [
	#include <linux/fs.h>
],[
	int filldir(struct dir_context *ctx, const char* name,
		    int i, loff_t off, u64 tmp, unsigned temp)
	{
		return 0;
	}

	struct dir_context ctx = {
		.actor = filldir,
	};

	ctx.actor(NULL, "test", 0, (loff_t) 0, 0, 0);
],[
	AC_DEFINE(HAVE_FILLDIR_USE_CTX, 1,
		[filldir_t needs struct dir_context as argument])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1702: -1- AC_DEFUN([LC_PERCPU_COUNTER_INIT], [
LB_CHECK_COMPILE([if percpu_counter_init uses GFP_* flag as argument],
percpu_counter_init, [
	#include <linux/percpu_counter.h>
],[
	percpu_counter_init(NULL, 0, GFP_KERNEL);
],[
	AC_DEFINE(HAVE_PERCPU_COUNTER_INIT_GFP_FLAG, 1,
		[percpu_counter_init uses GFP_* flag])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1720: -1- AC_DEFUN([LC_KIOCB_HAS_NBYTES], [
LB_CHECK_COMPILE([if struct kiocb has ki_nbytes field],
ki_nbytes, [
	#include <linux/fs.h>
],[
	struct kiocb iocb = { };

	iocb.ki_nbytes = 0;
],[
	AC_DEFINE(HAVE_KI_NBYTES, 1, [ki_nbytes field exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1744: -1- AC_DEFUN([LC_HAVE_DQUOT_QC_DQBLK], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'quotactl_ops.set_dqblk' takes struct qc_dqblk],
qc_dqblk, [
	#include <linux/fs.h>
	#include <linux/quota.h>
],[
	((struct quotactl_ops *)0)->set_dqblk(NULL, *((struct kqid*)0), (struct qc_dqblk*)0);
],[
	AC_DEFINE(HAVE_DQUOT_QC_DQBLK, 1,
		[quotactl_ops.set_dqblk takes struct qc_dqblk])
	AC_DEFINE(HAVE_DQUOT_KQID, 1,
		[quotactl_ops.set_dqblk takes struct kqid])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1762: -1- AC_DEFUN([LC_BACKING_DEV_INFO_REMOVAL], [
LB_CHECK_COMPILE([if struct address_space has backing_dev_info],
backing_dev_info, [
	#include <linux/fs.h>
],[
	struct address_space mapping;

	mapping.backing_dev_info = NULL;
],[
	AC_DEFINE(HAVE_BACKING_DEV_INFO, 1, [backing_dev_info exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1783: -1- AC_DEFUN([LC_HAVE_BDI_CAP_MAP_COPY], [
LB_CHECK_COMPILE([if have 'BDI_CAP_MAP_COPY'],
bdi_cap_map_copy, [
	#include <linux/backing-dev.h>
],[
	struct backing_dev_info info;

	info.capabilities = BDI_CAP_MAP_COPY;
],[
	AC_DEFINE(HAVE_BDI_CAP_MAP_COPY, 1,
		[BDI_CAP_MAP_COPY exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1803: -1- AC_DEFUN([LC_IOV_ITER_RW], [
LB_CHECK_COMPILE([if iov_iter_rw exist],
iov_iter_rw, [
	#include <linux/fs.h>
	#include <linux/uio.h>
],[
	struct iov_iter *iter = NULL;

	iov_iter_rw(iter);
],[
	AC_DEFINE(HAVE_IOV_ITER_RW, 1,
		[iov_iter_rw exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1814: -1- AC_DEFUN([LC_HAVE_SYNC_READ_WRITE], [
LB_CHECK_EXPORT([new_sync_read], [fs/read_write.c],
	[AC_DEFINE(HAVE_SYNC_READ_WRITE, 1,
			[new_sync_[read|write] is exported by the kernel])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1835: -1- AC_DEFUN([LC_HAVE___BI_CNT], [
LB_CHECK_COMPILE([if Linux kernel has __bi_cnt in struct bio],
have___bi_cnt, [
	#include <asm/atomic.h>
	#include <linux/bio.h>
	#include <linux/blk_types.h>
],[
	struct bio bio = { };
	int cnt;
	cnt = atomic_read(&bio.__bi_cnt);
], [
	AC_DEFINE(HAVE___BI_CNT, 1,
		[struct bio has __bi_cnt])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1857: -1- AC_DEFUN([LC_SYMLINK_OPS_USE_NAMEIDATA], [
LB_CHECK_COMPILE([if symlink inode operations have struct nameidata argument],
symlink_use_nameidata, [
	#include <linux/namei.h>
	#include <linux/fs.h>
],[
	struct nameidata *nd = NULL;

	((struct inode_operations *)0)->follow_link(NULL, nd);
	((struct inode_operations *)0)->put_link(NULL, nd, NULL);
],[
	AC_DEFINE(HAVE_SYMLINK_OPS_USE_NAMEIDATA, 1,
		[symlink inode operations need struct nameidata argument])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1874: -1- AC_DEFUN([LC_BIO_ENDIO_USES_ONE_ARG], [
LB_CHECK_COMPILE([if 'bio_endio' with one argument exist],
bio_endio, [
	#include <linux/bio.h>
],[
	bio_endio(NULL);
],[
	AC_DEFINE(HAVE_BIO_ENDIO_USES_ONE_ARG, 1,
		[bio_endio takes only one argument])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1891: -1- AC_DEFUN([LC_ACCOUNT_PAGE_DIRTIED_3ARGS], [
LB_CHECK_COMPILE([if 'account_page_dirtied' with 3 args exists],
account_page_dirtied, [
	#include <linux/mm.h>
],[
	account_page_dirtied(NULL, NULL, NULL);
],[
	AC_DEFINE(HAVE_ACCOUNT_PAGE_DIRTIED_3ARGS, 1,
		[account_page_dirtied takes three arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1910: -1- AC_DEFUN([LC_HAVE_INTERVAL_EXP_BLK_INTEGRITY], [
LB_CHECK_COMPILE([if 'blk_integrity.interval_exp' exist],
blk_integrity_interval_exp, [
	#include <linux/blkdev.h>
],[
	((struct blk_integrity *)0)->interval_exp = 0;
],[
	AC_DEFINE(HAVE_INTERVAL_EXP_BLK_INTEGRITY, 1,
		[blk_integrity.interval_exp exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1936: -1- AC_DEFUN([LC_HAVE_LOOP_CTL_GET_FREE], [
LB_CHECK_FILE([$LINUX/include/linux/loop.h], [
	LB_CHECK_COMPILE([if have 'HAVE_LOOP_CTL_GET_FREE'],
	LOOP_CTL_GET_FREE, [
		#include <linux/loop.h>
	],[
		int i;

		i = LOOP_CTL_GET_FREE;
	],[
		AC_DEFINE(HAVE_LOOP_CTL_GET_FREE, 1,
			[LOOP_CTL_GET_FREE exist])
	])
],[
	AC_DEFINE(HAVE_LOOP_CTL_GET_FREE, 1,
		[kernel has LOOP_CTL_GET_FREE])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1953: -1- AC_DEFUN([LC_HAVE_CACHE_HEAD_HLIST], [
LB_CHECK_COMPILE([if 'struct cache_head' has 'cache_list' field],
cache_head_has_hlist, [
	#include <linux/sunrpc/cache.h>
],[
	do {} while(sizeof(((struct cache_head *)0)->cache_list));
],[
	AC_DEFINE(HAVE_CACHE_HEAD_HLIST, 1,
		[cache_head has hlist cache_list])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1976: -1- AC_DEFUN([LC_HAVE_XATTR_HANDLER_SIMPLIFIED], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'struct xattr_handler' functions pass in handler pointer],
xattr_handler_simplified, [
	#include <linux/xattr.h>
],[
	struct xattr_handler handler;

	((struct xattr_handler *)0)->get(&handler, NULL, NULL, NULL, 0);
	((struct xattr_handler *)0)->set(&handler, NULL, NULL, NULL, 0, 0);
],[
	AC_DEFINE(HAVE_XATTR_HANDLER_SIMPLIFIED, 1, [handler pointer is parameter])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:1993: -1- AC_DEFUN([LC_HAVE_BIP_ITER_BIO_INTEGRITY_PAYLOAD], [
LB_CHECK_COMPILE([if 'bio_integrity_payload.bip_iter' exist],
bio_integrity_payload_bip_iter, [
	#include <linux/bio.h>
],[
	((struct bio_integrity_payload *)0)->bip_iter.bi_size = 0;
],[
	AC_DEFINE(HAVE_BIP_ITER_BIO_INTEGRITY_PAYLOAD, 1,
		[bio_integrity_payload.bip_iter exist])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2014: -1- AC_DEFUN([LC_BIO_INTEGRITY_PREP_FN], [
LB_CHECK_COMPILE([if 'bio_integrity_prep_fn' exists],
bio_integrity_prep_fn, [
	#include <linux/bio.h>
],[
	bio_integrity_prep_fn(NULL, NULL, NULL);
],[
	AC_DEFINE(HAVE_BIO_INTEGRITY_PREP_FN, 1,
		[kernel has bio_integrity_prep_fn])
	AC_SUBST(PATCHED_INTEGRITY_INTF)
],[
	AC_SUBST(PATCHED_INTEGRITY_INTF, [#])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2033: -1- AC_DEFUN([LC_HAVE_BI_OPF], [
LB_CHECK_COMPILE([if Linux kernel has bi_opf in struct bio],
have_bi_opf, [
	#include <linux/bio.h>
],[
	struct bio bio;

	bio.bi_opf = 0;
], [
	AC_DEFINE(HAVE_BI_OPF, 1,
		[struct bio has bi_opf])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2051: -1- AC_DEFUN([LC_HAVE_SUBMIT_BIO_2ARGS], [
LB_CHECK_COMPILE([if submit_bio takes two arguments],
have_submit_bio_2args, [
	#include <linux/bio.h>
],[
	struct bio bio;
	submit_bio(READ, &bio);
], [
	AC_DEFINE(HAVE_SUBMIT_BIO_2ARGS, 1,
		[submit_bio takes two arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2070: -1- AC_DEFUN([LC_HAVE_CLEAN_BDEV_ALIASES], [
LB_CHECK_COMPILE([if kernel has clean_bdev_aliases],
have_clean_bdev_aliases, [
	#include <linux/buffer_head.h>
],[
	struct block_device bdev;
	clean_bdev_aliases(&bdev,1,1);
], [
	AC_DEFINE(HAVE_CLEAN_BDEV_ALIASES, 1,
		[kernel has clean_bdev_aliases])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2088: -1- AC_DEFUN([LC_HAVE_LOCKS_LOCK_FILE_WAIT], [
LB_CHECK_COMPILE([if 'locks_lock_file_wait' exists],
locks_lock_file_wait, [
	#include <linux/fs.h>
],[
	locks_lock_file_wait(NULL, NULL);
],[
	AC_DEFINE(HAVE_LOCKS_LOCK_FILE_WAIT, 1,
		[kernel has locks_lock_file_wait])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2106: -1- AC_DEFUN([LC_HAVE_KEY_PAYLOAD_DATA_ARRAY], [
LB_CHECK_COMPILE([if 'struct key' has 'payload.data' as an array],
key_payload_data_array, [
	#include <linux/key.h>
],[
	struct key key = { };

	key.payload.data[0] = NULL;
],[
	AC_DEFINE(HAVE_KEY_PAYLOAD_DATA_ARRAY, 1, [payload.data is an array])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2126: -1- AC_DEFUN([LC_HAVE_XATTR_HANDLER_NAME], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'struct xattr_handler' has a name member],
xattr_handler_name, [
	#include <linux/xattr.h>
],[
	((struct xattr_handler *)NULL)->name = NULL;
],[
	AC_DEFINE(HAVE_XATTR_HANDLER_NAME, 1, [xattr_handler has a name member])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2143: -1- AC_DEFUN([LC_HAVE_FILE_DENTRY], [
LB_CHECK_COMPILE([if Linux kernel has 'file_dentry'],
file_dentry, [
	#include <linux/fs.h>
],[
	file_dentry(NULL);
], [
	AC_DEFINE(HAVE_FILE_DENTRY, 1,
		[kernel has file_dentry])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2160: -1- AC_DEFUN([LC_HAVE_INODE_LOCK], [
LB_CHECK_COMPILE([if 'inode_lock' is defined],
inode_lock, [
	#include <linux/fs.h>
],[
	inode_lock(NULL);
], [
	AC_DEFINE(HAVE_INODE_LOCK, 1,
		  [inode_lock is defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2179: -1- AC_DEFUN([LC_HAVE_IOP_GET_LINK], [
LB_CHECK_COMPILE([if 'iop' has 'get_link'],
inode_ops_get_link, [
	#include <linux/fs.h>
],[
	struct inode_operations iop;
	iop.get_link = NULL;
],[
	AC_DEFINE(HAVE_IOP_GET_LINK, 1,
		[have iop get_link])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2196: -1- AC_DEFUN([LC_HAVE_IN_COMPAT_SYSCALL], [
LB_CHECK_COMPILE([if 'in_compat_syscall' is defined],
in_compat_syscall, [
	#include <linux/compat.h>
],[
	in_compat_syscall();
],[
	AC_DEFINE(HAVE_IN_COMPAT_SYSCALL, 1,
		[have in_compat_syscall])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2220: -1- AC_DEFUN([LC_HAVE_XATTR_HANDLER_INODE_PARAM], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'struct xattr_handler' functions have inode parameter],
xattr_handler_inode_param, [
	#include <linux/xattr.h>
],[
	const struct xattr_handler handler;

	((struct xattr_handler *)0)->get(&handler, NULL, NULL, NULL, NULL, 0);
	((struct xattr_handler *)0)->set(&handler, NULL, NULL, NULL, NULL, 0, 0);
],[
	AC_DEFINE(HAVE_XATTR_HANDLER_INODE_PARAM, 1, [needs inode parameter])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2242: -1- AC_DEFUN([LC_D_IN_LOOKUP], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'd_in_lookup' is defined],
d_in_lookup, [
	#include <linux/dcache.h>
],[
	d_in_lookup(NULL);
],[
	AC_DEFINE(HAVE_D_IN_LOOKUP, 1, [d_in_lookup is defined])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2259: -1- AC_DEFUN([LC_LOCK_PAGE_MEMCG], [
LB_CHECK_COMPILE([if 'lock_page_memcg' is defined],
lock_page_memcg, [
	#include <linux/memcontrol.h>
],[
	lock_page_memcg(NULL);
],[
	AC_DEFINE(HAVE_LOCK_PAGE_MEMCG, 1,
		[lock_page_memcg is defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2282: -1- AC_DEFUN([LC_DIRECTIO_2ARGS], [
LB_CHECK_COMPILE([if '->direct_IO()' taken 2 arguments],
direct_io_2args, [
	#include <linux/fs.h>
],[
	struct address_space_operations ops = { };
	struct iov_iter *iter = NULL;
	struct kiocb *iocb = NULL;
	int rc;

	rc = ops.direct_IO(iocb, iter);
],[
	AC_DEFINE(HAVE_DIRECTIO_2ARGS, 1,
		[direct_IO need 2 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2303: -1- AC_DEFUN([LC_GENERIC_WRITE_SYNC_2ARGS], [
LB_CHECK_COMPILE([if 'generic_write_sync()' taken 2 arguments],
generic_write_sync_2args, [
	#include <linux/fs.h>
],[
	struct kiocb *iocb = NULL;
	ssize_t rc;

	rc = generic_write_sync(iocb, 0);
],[
	AC_DEFINE(HAVE_GENERIC_WRITE_SYNC_2ARGS, 1,
		[generic_write_sync need 2 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2321: -1- AC_DEFUN([LC_FOP_ITERATE_SHARED], [
LB_CHECK_COMPILE([if 'file_operations' has 'iterate_shared'],
fop_iterate_shared, [
	#include <linux/fs.h>
],[
	struct file_operations fop;
	fop.iterate_shared = NULL;
],[
	AC_DEFINE(HAVE_FOP_ITERATE_SHARED, 1,
		[file_operations has iterate_shared])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2344: -1- AC_DEFUN([LC_FOPS_ITERATE_SHARED], [
LB_CHECK_COMPILE([if ext4_dir_operations uses iterate_shared],
iterate_shared, [
	#include <linux/fs.h>
],[
	((struct file_operations *)0)->iterate_shared(NULL, NULL);
	dir_relax_shared(NULL);
],[
	AC_DEFINE(HAVE_ITERATE_SHARED, 1,
		['iterate_shared' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2362: -1- AC_DEFUN([LC_HAVE_POSIX_ACL_VALID_USER_NS], [
LB_CHECK_COMPILE([if 'posix_acl_valid' takes 'struct user_namespace'],
posix_acl_valid, [
	#include <linux/fs.h>
	#include <linux/posix_acl.h>
],[
	posix_acl_valid((struct user_namespace*)NULL, (const struct posix_acl*)NULL);
],[
	AC_DEFINE(HAVE_POSIX_ACL_VALID_USER_NS, 1,
		[posix_acl_valid takes struct user_namespace])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2380: -1- AC_DEFUN([LC_D_COMPARE_4ARGS], [
LB_CHECK_COMPILE([if 'd_compare' taken 4 arguments],
d_compare_4args, [
	#include <linux/dcache.h>
],[
	((struct dentry_operations*)0)->d_compare(NULL,0,NULL,NULL);
],[
	AC_DEFINE(HAVE_D_COMPARE_4ARGS, 1,
		[d_compare need 4 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2399: -1- AC_DEFUN([LC_FULL_NAME_HASH_3ARGS], [
LB_CHECK_COMPILE([if 'full_name_hash' taken 3 arguments],
full_name_hash_3args, [
	#include <linux/stringhash.h>
],[
	unsigned int hash;
	hash = full_name_hash(NULL,NULL,0);
],[
	AC_DEFINE(HAVE_FULL_NAME_HASH_3ARGS, 1,
		[full_name_hash need 3 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2420: -1- AC_DEFUN([LC_STRUCT_POSIX_ACL_XATTR], [
LB_CHECK_COMPILE([if 'struct posix_acl_xattr_{header,entry}' defined],
struct_posix_acl_xattr, [
	#include <linux/fs.h>
	#include <linux/posix_acl_xattr.h>
],[
	struct posix_acl_xattr_header *h = NULL;
	struct posix_acl_xattr_entry  *e;
	e = (void *)(h + 1);
],[
	AC_DEFINE(HAVE_STRUCT_POSIX_ACL_XATTR, 1,
		[struct posix_acl_xattr_{header,entry} defined])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2441: -1- AC_DEFUN([LC_IOP_XATTR], [
LB_CHECK_COMPILE([if 'inode_operations' has {get,set,remove}xattr members],
inode_ops_xattr, [
	#include <linux/fs.h>
],[
	struct inode_operations iop;
	iop.setxattr = NULL;
	iop.getxattr = NULL;
	iop.removexattr = NULL;
],[
	AC_DEFINE(HAVE_IOP_XATTR, 1,
		[inode_operations has {get,set,remove}xattr members])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2460: -1- AC_DEFUN([LC_GROUP_INFO_GID], [
LB_CHECK_COMPILE([if 'struct group_info' has member 'gid'],
group_info_gid, [
	#include <linux/cred.h>
],[
	kgid_t *p;
	p = ((struct group_info *)0)->gid;
],[
	AC_DEFINE(HAVE_GROUP_INFO_GID, 1,
		[struct group_info has member gid])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2478: -1- AC_DEFUN([LC_VFS_SETXATTR], [
LB_CHECK_COMPILE([if '__vfs_setxattr' helper is available],
vfs_setxattr, [
	#include <linux/xattr.h>
],[
	__vfs_setxattr(NULL, NULL, NULL, NULL, 0, 0);
],[
	AC_DEFINE(HAVE_VFS_SETXATTR, 1,
		['__vfs_setxattr is available])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2497: -1- AC_DEFUN([LC_POSIX_ACL_UPDATE_MODE], [
LB_CHECK_COMPILE([if 'posix_acl_update_mode' exists],
posix_acl_update_mode, [
	#include <linux/fs.h>
	#include <linux/posix_acl.h>
],[
	posix_acl_update_mode(NULL, NULL, NULL);
],[
	AC_DEFINE(HAVE_POSIX_ACL_UPDATE_MODE, 1,
		['posix_acl_update_mode' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2516: -1- AC_DEFUN([LC_IOP_GENERIC_READLINK], [
LB_CHECK_COMPILE([if 'generic_readlink' still exist],
inode_ops_readlink, [
	#include <linux/fs.h>
],[
	struct inode_operations iop;
	iop.readlink = generic_readlink;
],[
	AC_DEFINE(HAVE_IOP_GENERIC_READLINK, 1,
		[generic_readlink has been removed])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2535: -1- AC_DEFUN([LC_HAVE_VM_FAULT_ADDRESS], [
LB_CHECK_COMPILE([if 'struct vm_fault' replaced virtual_address with address field],
vm_fault_address, [
	#include <linux/mm.h>
],[
	struct vm_fault vmf;
	vmf.address = NULL;
],[
	AC_DEFINE(HAVE_VM_FAULT_ADDRESS, 1,
		[virtual_address has been replaced by address field])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2555: -1- AC_DEFUN([LC_INODEOPS_ENHANCED_GETATTR], [
LB_CHECK_COMPILE([if 'inode_operations' getattr member can gather advance stats],
getattr_path, [
	#include <linux/fs.h>
],[
	struct path path;

	((struct inode_operations *)1)->getattr(&path, NULL, 0, 0);
],[
	AC_DEFINE(HAVE_INODEOPS_ENHANCED_GETATTR, 1,
		[inode_operations .getattr member function can gather advance stats])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2578: -1- AC_DEFUN([LC_VM_OPERATIONS_REMOVE_VMF_ARG], [
LB_CHECK_COMPILE([if 'struct vm_operations' removed struct vm_area_struct],
vm_operations_no_vm_area_struct, [
	#include <linux/mm.h>
],[
	struct vm_fault vmf;

	((struct vm_operations_struct *)0)->fault(&vmf);
	((struct vm_operations_struct *)0)->page_mkwrite(&vmf);
],[
	AC_DEFINE(HAVE_VM_OPS_USE_VM_FAULT_ONLY, 1,
		['struct vm_operations' remove struct vm_area_struct argument])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2597: -1- AC_DEFUN([LC_HAVE_KEY_USAGE_REFCOUNT], [
LB_CHECK_COMPILE([if 'key.usage' is refcount_t],
key_usage_refcount, [
	#include <linux/key.h>
],[
	struct key key = { };

	refcount_read(&key.usage);
],[
	AC_DEFINE(HAVE_KEY_USAGE_REFCOUNT, 1, [key.usage is of type refcount_t])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2617: -1- AC_DEFUN([LC_HAVE_CRYPTO_MAX_ALG_NAME_128], [
LB_CHECK_COMPILE([if 'CRYPTO_MAX_ALG_NAME' is 128],
crypto_max_alg_name, [
	#include <linux/crypto.h>
],[
	#if CRYPTO_MAX_ALG_NAME != 128
	exit(1);
	#endif
],[
	AC_DEFINE(HAVE_CRYPTO_MAX_ALG_NAME_128, 1,
		['CRYPTO_MAX_ALG_NAME' is 128])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2636: -1- AC_DEFUN([LC_CURRENT_TIME], [
LB_CHECK_COMPILE([if CURRENT_TIME has been replaced with current_time],
current_time, [
	#include <linux/fs.h>
],[
	struct iattr attr;

	attr.ia_atime = current_time(NULL);
],[
	AC_DEFINE(HAVE_CURRENT_TIME, 1,
		[current_time() has replaced CURRENT_TIME])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2653: -1- AC_DEFUN([LC_SUPER_BLOCK_S_UUID], [
LB_CHECK_COMPILE([if 'struct super_block' s_uuid is uuid_t],
super_block_s_uuid, [
	#include <linux/fs.h>
],[
	struct super_block sb;

	uuid_parse(NULL, &sb.s_uuid);
],[
	AC_DEFINE(HAVE_S_UUID_AS_UUID_T, 1, ['s_uuid' is an uuid_t])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2671: -1- AC_DEFUN([LC_SUPER_SETUP_BDI_NAME], [
LB_CHECK_COMPILE([if 'super_setup_bdi_name' exist],
super_setup_bdi_name, [
	#include <linux/fs.h>
],[
	super_setup_bdi_name(NULL, "lustre");
],[
	AC_DEFINE(HAVE_SUPER_SETUP_BDI_NAME, 1,
		['super_setup_bdi_name' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2688: -1- AC_DEFUN([LC_BI_STATUS], [
LB_CHECK_COMPILE([if 'bi_status' exist],
bi_status, [
	#include <linux/blk_types.h>
],[
	((struct bio *)0)->bi_status = 0;
],[
	AC_DEFINE(HAVE_BI_STATUS, 1,
		['bi_status' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2710: -1- AC_DEFUN([LC_UAPI_LINUX_MOUNT_H], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if MS_RDONLY was moved to uapi/linux/mount.h],
uapi_linux_mount, [
	#include <uapi/linux/mount.h>
],[
	int x = MS_RDONLY;
	(void)x;
],[
	AC_DEFINE(HAVE_UAPI_LINUX_MOUNT_H, 1,
		[if MS_RDONLY was moved to uapi/linux/mount.h])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2735: -1- AC_DEFUN([LC_HAVE_SUNRPC_CACHE_HASH_LOCK_IS_A_SPINLOCK], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if cache_detail->hash_lock is a spinlock],
hash_lock_isa_spinlock_t, [
	#include <linux/sunrpc/cache.h>
],[
	spinlock_t *lock = &(((struct cache_detail *)0)->hash_lock);
	spin_lock(lock);
],[
	AC_DEFINE(HAVE_CACHE_HASH_SPINLOCK, 1,
		[if cache_detail->hash_lock is a spinlock])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2752: -1- AC_DEFUN([LC_BIO_INTEGRITY_ENABLED], [
LB_CHECK_COMPILE([if 'bio_integrity_enabled' exist],
bio_integrity_enabled, [
	#include <linux/bio.h>
],[
	bio_integrity_enabled(NULL);
],[
	AC_DEFINE(HAVE_BIO_INTEGRITY_ENABLED, 1,
		['bio_integrity_enabled' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2769: -1- AC_DEFUN([LC_PAGEVEC_INIT_ONE_PARAM], [
LB_CHECK_COMPILE([if 'pagevec_init' takes one parameter],
pagevec_init, [
	#include <linux/pagevec.h>
],[
	pagevec_init(NULL);
],[
	AC_DEFINE(HAVE_PAGEVEC_INIT_ONE_PARAM, 1,
		['pagevec_init' takes one parameter])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2786: -1- AC_DEFUN([LC_BI_BDEV], [
LB_CHECK_COMPILE([if 'bi_bdev' exist],
bi_bdev, [
	#include <linux/bio.h>
],[
	((struct bio *)0)->bi_bdev = NULL;
],[
	AC_DEFINE(HAVE_BI_BDEV, 1,
		['bi_bdev' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2806: -1- AC_DEFUN([LC_I_PAGES], [
LB_CHECK_COMPILE([if struct address_space has i_pages],
i_pages, [
	#include <linux/fs.h>
],[
	struct address_space mapping = {};
	void *i_pages;

	i_pages = &mapping.i_pages;
],[
	AC_DEFINE(HAVE_I_PAGES, 1,
		[struct address_space has i_pages])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2825: -1- AC_DEFUN([LC_VM_FAULT_T], [
LB_CHECK_COMPILE([if vm_fault_t type exists],
vm_fault_t, [
	#include <linux/mm_types.h>
],[
	vm_fault_t x = VM_FAULT_SIGBUS;
	(void)x
],[
	AC_DEFINE(HAVE_VM_FAULT_T, 1,
		[if vm_fault_t type exists])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2859: -1- AC_DEFUN([LC_INODE_TIMESPEC64], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if inode timestamps are struct timespec64],
inode_timespec64, [
	#include <linux/fs.h>
],[
	struct inode inode = {};
	struct timespec64 ts = {};

	inode.i_atime = timespec64_trunc(ts, 1);
	(void)inode;
],[
	AC_DEFINE(HAVE_INODE_TIMESPEC64, 1,
		[inode times are using timespec64])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2881: -1- AC_DEFUN([LC_HAS_LINUX_SELINUX_ENABLED], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if linux/selinux.h exists],
selinux_is_enabled, [
	#include <linux/selinux.h>
],[
	bool has_selinux = selinux_is_enabled();
	(void)has_selinux;
],[
	AC_DEFINE(HAVE_LINUX_SELINUX_IS_ENABLED, 1,
		[if linux/selinux.h exists])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2903: -1- AC_DEFUN([LC_BIO_BI_PHYS_SEGMENTS], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if struct bio has bi_phys_segments member],
bye_bio_bi_phys_segments, [
	#include <linux/bio.h>
],[
	struct bio *bio = NULL;
	bio->bi_phys_segments++;
],[
	AC_DEFINE(HAVE_BIO_BI_PHYS_SEGMENTS, 1,
		[struct bio has bi_phys_segments member])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:2926: -1- AC_DEFUN([LC_LM_COMPARE_OWNER_EXISTS], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if lock_manager_operations has lm_compare_owner],
lock_manager_ops_lm_compare_owner, [
	#include <linux/fs.h>
],[
	struct lock_manager_operations lm_ops;
	lm_ops.lm_compare_owner = NULL;
],[
	AC_DEFINE(HAVE_LM_COMPARE_OWNER, 1,
		[lock_manager_operations has lm_compare_owner])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: -1- AC_DEFUN([LC_PROG_LINUX], [
	AC_MSG_NOTICE([Lustre kernel checks
==============================================================================])

	LC_CONFIG_PINGER
	LC_CONFIG_CHECKSUM
	LC_CONFIG_FLOCK
	LC_CONFIG_HEALTH_CHECK_WRITE
	LC_CONFIG_LRU_RESIZE

	LC_GLIBC_SUPPORT_FHANDLES
	LC_CONFIG_GSS
	LC_OPENSSL_SSK
	LC_OPENSSL_GETSEPOL

	# 2.6.39
	LC_HAVE_FHANDLE_SYSCALLS
	LC_HAVE_FSTYPE_MOUNT
	LC_HAVE_INODE_OWNER_OR_CAPABLE
	LC_HAVE_SECURITY_IINITSEC
	LC_VFS_CREATE_USE_NAMEIDATA

	# 3.0
	LC_DIRTY_INODE_WITH_FLAG
	LC_SETNS

	# 3.1
	LC_LM_XXX_LOCK_MANAGER_OPS
	LC_INODE_DIO_WAIT
	LC_IOP_GET_ACL
	LC_FILE_LLSEEK_SIZE
	LC_INODE_PERMISION_2ARGS
	LC_RADIX_EXCEPTION_ENTRY
	LC_HAVE_LOOP_CTL_GET_FREE

	# 3.2
	LC_HAVE_PROTECT_I_NLINK

	# 3.3
	LC_HAVE_MIGRATE_HEADER
	LC_MIGRATEPAGE_4ARGS
	LC_SUPEROPS_USE_DENTRY
	LC_INODEOPS_USE_UMODE_T
	LC_HAVE_CACHE_REGISTER

	# 3.4
	LC_HAVE_D_MAKE_ROOT
	LC_KMAP_ATOMIC_HAS_1ARG

	# 3.5
	LC_HAVE_CLEAR_INODE
	LC_HAVE_ENCODE_FH_PARENT
	LC_FILE_LLSEEK_SIZE_5ARG

	# 3.6
	LC_DATA_FOR_LLITE_IS_LIST
	LC_DENTRY_OPEN_USE_PATH
	LC_HAVE_IOP_ATOMIC_OPEN
	LC_HAVE_SB_START_WRITE

	# 3.7
	LC_HAVE_POSIXACL_USER_NS

	# 3.8
	LC_HAVE_FILE_F_INODE
	LC_HAVE_FILE_INODE
	LC_HAVE_SUNRPC_UPCALL_HAS_3ARGS

	# 3.9
	LC_HAVE_HLIST_FOR_EACH_3ARG
	LC_HAVE_BIO_END_SECTOR
	LC_HAVE_IS_SXID
	LC_HAVE_VFS_GETATTR_2ARGS

	# 3.10
	LC_HAVE_REMOVE_PROC_SUBTREE
	LC_HAVE_PROC_REMOVE
	LC_HAVE_PROJECT_QUOTA
	LC_HAVE_SECURITY_DENTRY_INIT_SECURITY
	LC_HAVE_SECURITY_INODE_LISTSECURITY

	# 3.11
	LC_INVALIDATE_RANGE
	LC_HAVE_DIR_CONTEXT
	LC_D_COMPARE_5ARGS
	LC_HAVE_DCOUNT
	LC_HAVE_DENTRY_D_U_D_ALIAS
	LC_HAVE_DENTRY_D_CHILD
	LC_PID_NS_FOR_CHILDREN

	# 3.12
	LC_OLDSIZE_TRUNCATE_PAGECACHE
	LC_PTR_ERR_OR_ZERO_MISSING
	LC_KIOCB_KI_LEFT
	LC_INIT_LIST_HEAD_RCU

	# 3.13
	LC_VFS_RENAME_5ARGS
	LC_VFS_UNLINK_3ARGS
	LC_HAVE_D_IS_POSITIVE

	# 3.14
	LC_HAVE_BVEC_ITER
	LC_HAVE_TRUNCATE_IPAGES_FINAL
	LC_IOPS_RENAME_WITH_FLAGS
	LC_IOP_SET_ACL

	# 3.15
	LC_VFS_RENAME_6ARGS

	# 3.16
	LC_DIRECTIO_USE_ITER
	LC_HAVE_IOV_ITER_INIT_DIRECTION
	LC_HAVE_IOV_ITER_TRUNCATE
	LC_HAVE_FILE_OPERATIONS_READ_WRITE_ITER

	# 3.17
	LC_HAVE_INTERVAL_BLK_INTEGRITY
	LC_KEY_MATCH_DATA

	# 3.18
	LC_PERCPU_COUNTER_INIT
	LC_NFS_FILLDIR_USE_CTX

	# 3.19
	LC_KIOCB_HAS_NBYTES
	LC_HAVE_DQUOT_QC_DQBLK

	# 3.20
	LC_BACKING_DEV_INFO_REMOVAL
	LC_HAVE_BDI_CAP_MAP_COPY

	# 4.1.0
	LC_IOV_ITER_RW
	LC_HAVE_SYNC_READ_WRITE
	LC_HAVE___BI_CNT

	# 4.2
	LC_BIO_ENDIO_USES_ONE_ARG
	LC_SYMLINK_OPS_USE_NAMEIDATA
	LC_ACCOUNT_PAGE_DIRTIED_3ARGS

	# 4.3
	LC_HAVE_INTERVAL_EXP_BLK_INTEGRITY
	LC_HAVE_BIP_ITER_BIO_INTEGRITY_PAYLOAD
	LC_HAVE_CACHE_HEAD_HLIST
	LC_HAVE_XATTR_HANDLER_SIMPLIFIED

	# 4.4
	LC_HAVE_LOCKS_LOCK_FILE_WAIT
	LC_HAVE_KEY_PAYLOAD_DATA_ARRAY
	LC_HAVE_XATTR_HANDLER_NAME
	LC_HAVE_BI_OPF
	LC_HAVE_SUBMIT_BIO_2ARGS
	LC_HAVE_CLEAN_BDEV_ALIASES

	# 4.5
	LC_HAVE_FILE_DENTRY

	# 4.5
	LC_HAVE_INODE_LOCK
	LC_HAVE_IOP_GET_LINK

	# 4.6
	LC_HAVE_IN_COMPAT_SYSCALL
	LC_HAVE_XATTR_HANDLER_INODE_PARAM
	LC_LOCK_PAGE_MEMCG

	# 4.7
	LC_D_IN_LOOKUP
	LC_DIRECTIO_2ARGS
	LC_GENERIC_WRITE_SYNC_2ARGS
	LC_FOPS_ITERATE_SHARED

	# 4.8
	LC_HAVE_POSIX_ACL_VALID_USER_NS
	LC_D_COMPARE_4ARGS
	LC_FULL_NAME_HASH_3ARGS
	LC_STRUCT_POSIX_ACL_XATTR
	LC_IOP_XATTR

	# 4.9
	LC_GROUP_INFO_GID
	LC_VFS_SETXATTR
	LC_POSIX_ACL_UPDATE_MODE

	# 4.10
	LC_IOP_GENERIC_READLINK
	LC_HAVE_VM_FAULT_ADDRESS

	# 4.11
	LC_INODEOPS_ENHANCED_GETATTR
	LC_VM_OPERATIONS_REMOVE_VMF_ARG
	LC_HAVE_KEY_USAGE_REFCOUNT
	LC_HAVE_CRYPTO_MAX_ALG_NAME_128

	# 4.12
	LC_CURRENT_TIME
	LC_SUPER_BLOCK_S_UUID
	LC_SUPER_SETUP_BDI_NAME
	LC_BI_STATUS

	# 4.13
	LC_BIO_INTEGRITY_ENABLED

	# 4.14
	LC_PAGEVEC_INIT_ONE_PARAM
	LC_BI_BDEV

	# 4.17
	LC_VM_FAULT_T
	LC_I_PAGES

	# 4.18
	LC_INODE_TIMESPEC64

	# 4.20
	LC_HAVE_SUNRPC_CACHE_HASH_LOCK_IS_A_SPINLOCK

	# 5.0
	LC_UAPI_LINUX_MOUNT_H

	# 5.1
	LC_HAS_LINUX_SELINUX_ENABLED

	# 5.3
	LC_BIO_BI_PHYS_SEGMENTS
	LC_LM_COMPARE_OWNER_EXISTS

	# kernel patch to extend integrity interface
	LC_BIO_INTEGRITY_PREP_FN

	#
	AS_IF([test "x$enable_server" != xno], [
		LC_STACK_SIZE
		LC_QUOTA_CONFIG
	])
	LC_POSIX_ACL_CONFIG
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3185: -1- AC_DEFUN([LC_CONFIG_CLIENT], [
AC_MSG_CHECKING([whether to build Lustre client support])
AC_ARG_ENABLE([client],
	AC_HELP_STRING([--disable-client],
		[disable Lustre client support]),
	[], [enable_client="yes"])
AC_MSG_RESULT([$enable_client])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3233: -1- AC_DEFUN([LB_CONFIG_MPITESTS], [
AC_ARG_ENABLE([mpitests],
	AC_HELP_STRING([--enable-mpitests=<yes|no|mpicc wrapper>],
		       [include mpi tests]), [
		enable_mpitests="yes"
		case $enableval in
		yes)
			MPICC_WRAPPER="mpicc"
			MPI_BIN=$(eval which $MPICC_WRAPPER | xargs dirname)
			;;
		no)
			enable_mpitests="no"
			MPI_BIN=""
			;;
		*)
			MPICC_WRAPPER=$enableval
			MPI_BIN=$(eval echo $MPICC_WRAPPER | xargs dirname)
			;;
		esac
	], [
		enable_mpitests="yes"
		MPICC_WRAPPER="mpicc"
		MPI_BIN=$(eval which $MPICC_WRAPPER | xargs dirname)
	])

	if test "x$enable_mpitests" != "xno"; then
		oldcc=$CC
		CC=$MPICC_WRAPPER
		AC_CACHE_CHECK([whether mpitests can be built],
		lb_cv_mpi_tests, [AC_COMPILE_IFELSE([AC_LANG_SOURCE([
			#include <mpi.h>
			int main(void) {
				int flag;
				MPI_Initialized(&flag);
				return 0;
			}
		])], [lb_cv_mpi_tests="yes"], [lb_cv_mpi_tests="no"])
		])
		enable_mpitests=$lb_cv_mpi_tests
		CC=$oldcc
	fi
	AC_SUBST(MPI_BIN)
	AC_SUBST(MPICC_WRAPPER)
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3249: -1- AC_DEFUN([LC_CONFIG_QUOTA], [
AC_MSG_CHECKING([whether to enable quota support global control])
AC_ARG_ENABLE([quota],
	AC_HELP_STRING([--enable-quota],
		[enable quota support]),
	[], [enable_quota="yes"])
AS_IF([test "x$enable_quota" = xyes],
	[AC_MSG_RESULT([yes])],
	[AC_MSG_RESULT([no])])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3264: -1- AC_DEFUN([LC_QUOTA], [
#check global
LC_CONFIG_QUOTA
#check for utils
AS_IF([test "x$enable_quota" != xno -a "x$enable_utils" != xno], [
	AC_CHECK_HEADER([sys/quota.h],
		[AC_DEFINE(HAVE_SYS_QUOTA_H, 1,
			[Define to 1 if you have <sys/quota.h>.])],
		[AC_MSG_ERROR([don't find <sys/quota.h> in your system])])
])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3306: -1- AC_DEFUN([LC_OSD_ADDON], [
AC_MSG_CHECKING([whether to use OSD addon])
AC_ARG_WITH([osd],
	AC_HELP_STRING([--with-osd=path],
		[set path to optional osd]),
	[
	case "$with_osd" in
	no)
		ENABLEOSDADDON=0
		;;
	*)
		OSDADDON="$with_osd"
		ENABLEOSDADDON=1
		;;
	esac
	], [
		ENABLEOSDADDON=0
	])
AS_IF([test $ENABLEOSDADDON -eq 0], [
	AC_MSG_RESULT([no])
	OSDADDON=""
], [
	OSDMODNAME=$(basename $OSDADDON)
	AS_IF([test -e $LUSTRE/$OSDMODNAME], [
		AC_MSG_RESULT([can't link])
		OSDADDON=""
	], [ln -s $OSDADDON $LUSTRE/$OSDMODNAME], [
		AC_MSG_RESULT([$OSDMODNAME])
		OSDADDON="obj-m += $OSDMODNAME/"
	], [
		AC_MSG_RESULT([can't link])
		OSDADDON=""
	])
])
AC_SUBST(OSDADDON)
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3448: -1- AC_DEFUN([LC_CONFIGURE], [
AC_MSG_NOTICE([Lustre core checks
==============================================================================])

AS_IF([test $target_cpu == "i686" -o $target_cpu == "x86_64"],
	[CFLAGS="$CFLAGS -Wall -Werror"])

# maximum MDS thread count
LC_MDS_MAX_THREADS

# lustre/utils/gss/gss_util.c
# lustre/utils/gss/gssd_proc.c
# lustre/utils/gss/krb5_util.c
# lustre/utils/llog_reader.c
# lustre/utils/create_iam.c
# lustre/utils/libiam.c
AC_CHECK_HEADERS([netdb.h endian.h])
AC_CHECK_FUNCS([gethostbyname])

# lustre/utils/llverfs.c
AC_CHECK_HEADERS([ext2fs/ext2fs.h])

# lustre/utils/lfs.c
AS_IF([test "$enable_dist" = "no"], [
		AC_CHECK_LIB([z], [crc32], [
				 AC_CHECK_HEADER([zlib.h], [], [
						 AC_MSG_ERROR([zlib.h not found.])])
				 ], [
				 AC_MSG_ERROR([
		zlib library not found. Please install zlib development package.])
		])
])

SELINUX=""

AC_CHECK_LIB([selinux], [is_selinux_enabled],
	[AC_CHECK_HEADERS([selinux/selinux.h],
			[SELINUX="-lselinux"
			AC_DEFINE([HAVE_SELINUX], 1,
				[support for selinux ])],
			[AC_MSG_WARN([

No libselinux-devel package found, unable to build selinux enabled tools
])
])],
	[AC_MSG_WARN([

No selinux package found, unable to build selinux enabled tools
])
])
AC_SUBST(SELINUX)

# Super safe df
AC_MSG_CHECKING([whether to report minimum OST free space])
AC_ARG_ENABLE([mindf],
	AC_HELP_STRING([--enable-mindf],
		[Make statfs report the minimum available space on any single OST instead of the sum of free space on all OSTs]),
	[], [enable_mindf="no"])
AC_MSG_RESULT([$enable_mindf])
AS_IF([test "$enable_mindf" = "yes"],
	[AC_DEFINE([MIN_DF], 1, [Report minimum OST free space])])

AC_MSG_CHECKING([whether to randomly failing memory alloc])
AC_ARG_ENABLE([fail_alloc],
	AC_HELP_STRING([--disable-fail-alloc],
		[disable randomly alloc failure]),
	[], [enable_fail_alloc="yes"])
AC_MSG_RESULT([$enable_fail_alloc])
AS_IF([test "x$enable_fail_alloc" != xno],
	[AC_DEFINE([RANDOM_FAIL_ALLOC], 1,
		[enable randomly alloc failure])])

AC_MSG_CHECKING([whether to check invariants (expensive cpu-wise)])
AC_ARG_ENABLE([invariants],
	AC_HELP_STRING([--enable-invariants],
		[enable invariant checking (cpu intensive)]),
	[], [enable_invariants="no"])
AC_MSG_RESULT([$enable_invariants])
AS_IF([test "x$enable_invariants" = xyes],
	[AC_DEFINE([CONFIG_LUSTRE_DEBUG_EXPENSIVE_CHECK], 1,
		[enable invariant checking])])

AC_MSG_CHECKING([whether to track references with lu_ref])
AC_ARG_ENABLE([lu_ref],
	AC_HELP_STRING([--enable-lu_ref],
		[enable lu_ref reference tracking code]),
	[], [enable_lu_ref="no"])
AC_MSG_RESULT([$enable_lu_ref])
AS_IF([test "x$enable_lu_ref" = xyes],
	[AC_DEFINE([USE_LU_REF], 1,
		[enable lu_ref reference tracking code])])

AC_MSG_CHECKING([whether to enable page state tracking])
AC_ARG_ENABLE([pgstate-track],
	AC_HELP_STRING([--enable-pgstate-track],
		[enable page state tracking]),
	[], [enable_pgstat_track="no"])
AC_MSG_RESULT([$enable_pgstat_track])
AS_IF([test "x$enable_pgstat_track" = xyes],
	[AC_DEFINE([CONFIG_DEBUG_PAGESTATE_TRACKING], 1,
		[enable page state tracking code])])

PKG_PROG_PKG_CONFIG
AC_MSG_CHECKING([systemd unit file directory])
AC_ARG_WITH([systemdsystemunitdir],
	[AS_HELP_STRING([--with-systemdsystemunitdir=DIR],
		[Directory for systemd service files])],
	[], [with_systemdsystemunitdir=auto])
AS_IF([test "x$with_systemdsystemunitdir" = "xyes" -o "x$with_systemdsystemunitdir" = "xauto"],
	[def_systemdsystemunitdir=$($PKG_CONFIG --variable=systemdsystemunitdir systemd)
	AS_IF([test "x$def_systemdsystemunitdir" = "x"],
		[AS_IF([test "x$with_systemdsystemunitdir" = "xyes"],
		[AC_MSG_ERROR([systemd support requested but pkg-config unable to query systemd package])])
		with_systemdsystemunitdir=no],
	[with_systemdsystemunitdir="$def_systemdsystemunitdir"])])
AS_IF([test "x$with_systemdsystemunitdir" != "xno"],
	[AC_SUBST([systemdsystemunitdir], [$with_systemdsystemunitdir])])
AC_MSG_RESULT([$with_systemdsystemunitdir])

AC_MSG_CHECKING([bash-completion directory])
AC_ARG_WITH([bash-completion-dir],
	AS_HELP_STRING([--with-bash-completion-dir[=PATH]],
		[Install the bash auto-completion script in this directory.]),
	[],
	[with_bash_completion_dir=yes])
AS_IF([test "x$with_bash_completion_dir" = "xyes"], [
	BASH_COMPLETION_DIR="`pkg-config --variable=completionsdir bash-completion`"
	AS_IF([test "x$BASH_COMPLETION_DIR" = "x"], [
		[BASH_COMPLETION_DIR="$datadir/bash-completion/completions"]
	])
], [
	BASH_COMPLETION_DIR="$with_bash_completion_dir"
])
AC_SUBST([BASH_COMPLETION_DIR])
AC_MSG_RESULT([$BASH_COMPLETION_DIR])
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3471: -1- AC_DEFUN([LC_CONDITIONALS], [
AM_CONDITIONAL(MPITESTS, test x$enable_mpitests = xyes, Build MPI Tests)
AM_CONDITIONAL(CLIENT, test x$enable_client = xyes)
AM_CONDITIONAL(SERVER, test x$enable_server = xyes)
AM_CONDITIONAL(SPLIT, test x$enable_split = xyes)
AM_CONDITIONAL(EXT2FS_DEVEL, test x$ac_cv_header_ext2fs_ext2fs_h = xyes)
AM_CONDITIONAL(GSS, test x$enable_gss = xyes)
AM_CONDITIONAL(GSS_KEYRING, test x$enable_gss_keyring = xyes)
AM_CONDITIONAL(GSS_PIPEFS, test x$enable_gss_pipefs = xyes)
AM_CONDITIONAL(GSS_SSK, test x$enable_ssk = xyes)
AM_CONDITIONAL(LIBPTHREAD, test x$enable_libpthread = xyes)
AM_CONDITIONAL(HAVE_SYSTEMD, test "x$with_systemdsystemunitdir" != "xno")
AM_CONDITIONAL(ENABLE_BASH_COMPLETION, test "x$with_bash_completion_dir" != "xno")
AM_CONDITIONAL(XATTR_HANDLER, test "x$lb_cv_compile_xattr_handler_flags" = xyes)
AM_CONDITIONAL(SELINUX, test "$SELINUX" = "-lselinux")
AM_CONDITIONAL(GETSEPOL, test x$enable_getsepol = xyes)
])
m4trace:/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3561: -1- AC_DEFUN([LC_CONFIG_FILES], [AC_CONFIG_FILES([
lustre/Makefile
lustre/autoMakefile
lustre/autoconf/Makefile
lustre/conf/Makefile
lustre/conf/resource/Makefile
lustre/contrib/Makefile
lustre/doc/Makefile
lustre/include/Makefile
lustre/include/lustre/Makefile
lustre/include/uapi/linux/lustre/Makefile
lustre/kernel_patches/targets/4.18-rhel8.target
lustre/kernel_patches/targets/3.10-rhel7.7.target
lustre/kernel_patches/targets/3.10-rhel7.6.target
lustre/kernel_patches/targets/3.10-rhel7.5.target
lustre/kernel_patches/targets/4.14-rhel7.5.target
lustre/kernel_patches/targets/4.14-rhel7.6.target
lustre/kernel_patches/targets/3.0-sles11.target
lustre/kernel_patches/targets/3.0-sles11sp3.target
lustre/kernel_patches/targets/3.0-sles11sp4.target
lustre/kernel_patches/targets/3.12-sles12.target
lustre/kernel_patches/targets/4.4-sles12.target
lustre/kernel_patches/targets/4.4-sles12sp3.target
lustre/kernel_patches/targets/4.12-sles12sp4.target
lustre/kernel_patches/targets/3.x-fc18.target
lustre/ldlm/Makefile
lustre/fid/Makefile
lustre/fid/autoMakefile
lustre/llite/Makefile
lustre/llite/autoMakefile
lustre/lov/Makefile
lustre/lov/autoMakefile
lustre/mdc/Makefile
lustre/mdc/autoMakefile
lustre/lmv/Makefile
lustre/lmv/autoMakefile
lustre/lfsck/Makefile
lustre/lfsck/autoMakefile
lustre/mdt/Makefile
lustre/mdt/autoMakefile
lustre/mdd/Makefile
lustre/mdd/autoMakefile
lustre/fld/Makefile
lustre/fld/autoMakefile
lustre/obdclass/Makefile
lustre/obdclass/autoMakefile
lustre/obdecho/Makefile
lustre/obdecho/autoMakefile
lustre/ofd/Makefile
lustre/ofd/autoMakefile
lustre/osc/Makefile
lustre/osc/autoMakefile
lustre/ost/Makefile
lustre/ost/autoMakefile
lustre/osd-ldiskfs/Makefile
lustre/osd-ldiskfs/autoMakefile
lustre/osd-zfs/Makefile
lustre/osd-zfs/autoMakefile
lustre/mgc/Makefile
lustre/mgc/autoMakefile
lustre/mgs/Makefile
lustre/mgs/autoMakefile
lustre/target/Makefile
lustre/ptlrpc/Makefile
lustre/ptlrpc/autoMakefile
lustre/ptlrpc/gss/Makefile
lustre/ptlrpc/gss/autoMakefile
lustre/quota/Makefile
lustre/quota/autoMakefile
lustre/scripts/Makefile
lustre/scripts/systemd/Makefile
lustre/tests/Makefile
lustre/tests/mpi/Makefile
lustre/tests/kernel/Makefile
lustre/tests/kernel/autoMakefile
lustre/utils/Makefile
lustre/utils/gss/Makefile
lustre/osp/Makefile
lustre/osp/autoMakefile
lustre/lod/Makefile
lustre/lod/autoMakefile
])
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:20: -1- AC_DEFUN([LN_CHECK_GCC_VERSION], [
AC_MSG_CHECKING([compiler version])
PTL_CC_VERSION=`$CC --version | awk '/^gcc/{print $ 3}'`
PTL_MIN_CC_VERSION="3.2.2"
v2n() {
	awk -F. '{printf "%d\n", (($ 1)*100+($ 2))*100+($ 3)}'
}
if test -z "$PTL_CC_VERSION" -o \
	$(echo $PTL_CC_VERSION | v2n) -ge $(echo $PTL_MIN_CC_VERSION | v2n); then
	AC_MSG_RESULT([ok])
else
	AC_MSG_RESULT([Buggy compiler found])
	AC_MSG_ERROR([Need gcc version >= $PTL_MIN_CC_VERSION])
fi
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:48: -1- AC_DEFUN([LN_CONFIG_AFFINITY], [
AC_MSG_CHECKING([whether to enable CPU affinity support])
AC_ARG_ENABLE([affinity],
	AC_HELP_STRING([--disable-affinity],
		[disable process/irq affinity]),
	[], [enable_affinity="yes"])
AC_MSG_RESULT([$enable_affinity])
AS_IF([test "x$enable_affinity" = xyes], [
	LB_CHECK_COMPILE([if Linux kernel has cpu affinity support],
	set_cpus_allowed_ptr, [
		#include <linux/sched.h>
	],[
		struct task_struct *t = NULL;
		cpumask_t m = { };

		set_cpus_allowed_ptr(t, &m);
	],[
		AC_DEFINE(CPU_AFFINITY, 1,
			[kernel has cpu affinity support])
	])
])
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:74: -1- AC_DEFUN([LN_CONFIG_BACKOFF], [
AC_MSG_CHECKING([whether to enable tunable backoff TCP support])
AC_ARG_ENABLE([backoff],
	AC_HELP_STRING([--disable-backoff],
		[disable socknal tunable backoff]),
	[], [enable_backoff="yes"])
AC_MSG_RESULT([$enable_backoff])
AS_IF([test "x$enable_backoff" = xyes], [
	AC_MSG_CHECKING([if Linux kernel has tunable backoff TCP support])
	AS_IF([grep -c TCP_BACKOFF $LINUX/include/linux/tcp.h >/dev/null], [
		AC_MSG_RESULT([yes])
		AC_DEFINE(SOCKNAL_BACKOFF, 1, [use tunable backoff TCP])
		AS_IF([grep rto_max $LINUX/include/linux/tcp.h | grep -q __u16 >/dev/null],
			[AC_DEFINE(SOCKNAL_BACKOFF_MS, 1,
				[tunable backoff TCP in ms])])
	], [
		AC_MSG_RESULT([no])
	])
])
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:90: -1- AC_DEFUN([LN_CONFIG_DLC], [
	AS_IF([test "x$enable_dist" = xno], [
		AC_CHECK_LIB([yaml], [yaml_parser_initialize],
			     [LIBYAML="libyaml"],
			     [AC_MSG_ERROR([YAML development libraries not not installed])],
			     [-lm])
	])
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:575: -1- AC_DEFUN([LN_CONFIG_O2IB], [
AC_MSG_CHECKING([whether to use Compat RDMA])
AC_ARG_WITH([o2ib],
	AC_HELP_STRING([--with-o2ib=[yes|no|<path>]],
		[build o2iblnd against path]),
	[], [with_o2ib="yes"])

case $with_o2ib in
	yes)    AS_IF([which ofed_info 2>/dev/null], [
			AS_IF([test x$uses_dpkg = xyes], [
				OFED_INFO="ofed_info | awk '{print \[$]2}'"
				LSPKG="dpkg --listfiles"
			], [
				OFED_INFO="ofed_info"
				LSPKG="rpm -ql"
			])
			O2IBPATHS=$(eval $OFED_INFO | egrep -w 'mlnx-ofed-kernel-dkms|mlnx-ofa_kernel-devel|compat-rdma-devel|kernel-ib-devel|ofa_kernel-devel' | xargs $LSPKG | grep '\(/openib\|/ofa_kernel/default\|/ofa_kernel\)$' | head -n1)
			AS_IF([test -z "$O2IBPATHS"], [
				AC_MSG_ERROR([
You seem to have an OFED installed but have not installed it's devel package.
If you still want to build Lustre for your OFED I/B stack, you need to install its devel headers RPM.
Instead, if you want to build Lustre for your kernel's built-in I/B stack rather than your installed OFED stack, either remove the OFED package(s) or use --with-o2ib=no.
					     ])
			])
			AS_IF([test $(echo $O2IBPATHS | wc -w) -ge 2], [
				AC_MSG_ERROR([
It appears that you have multiple OFED versions installed.
If you still want to build Lustre for your OFED I/B stack, you need to install a single version with its devel headers RPM.
Instead, if you want to build Lustre for your kernel's built-in I/B stack rather than your installed OFED stack, either remove the OFED package(s) or use --with-o2ib=no.
					     ])
			])
			if test -e $O2IBPATHS/${LINUXRELEASE}; then
			    O2IBPATHS=$O2IBPATHS/${LINUXRELEASE}
			elif test -e $O2IBPATHS/default; then
			    O2IBPATHS=$O2IBPATHS/default
			fi
			OFED="yes"
		], [
			O2IBPATHS="$LINUX $LINUX/drivers/infiniband"
		])
		ENABLEO2IB="yes"
		;;
	no)     ENABLEO2IB="no"
		;;
	*)      O2IBPATHS=$with_o2ib
		ENABLEO2IB="withpath"
		OFED="yes"
		;;
esac

AS_IF([test $ENABLEO2IB = "no"], [
	AC_MSG_RESULT([no])
], [
	o2ib_found=false
	for O2IBPATH in $O2IBPATHS; do
		AS_IF([test \( -f ${O2IBPATH}/include/rdma/rdma_cm.h -a \
			   -f ${O2IBPATH}/include/rdma/ib_cm.h -a \
			   -f ${O2IBPATH}/include/rdma/ib_verbs.h -a \
			   -f ${O2IBPATH}/include/rdma/ib_fmr_pool.h \)], [
			o2ib_found=true
			break
		])
	done
	if ! $o2ib_found; then
		AC_MSG_RESULT([no])
		case $ENABLEO2IB in
			"yes") AC_MSG_ERROR([no OFED nor kernel OpenIB gen2 headers present]) ;;
			"withpath") AC_MSG_ERROR([bad --with-o2ib path]) ;;
			*) AC_MSG_ERROR([internal error]) ;;
		esac
	else
		COMPAT_AUTOCONF=""
		compatrdma_found=false
		if test -f ${O2IBPATH}/include/linux/compat-2.6.h; then
			AC_MSG_RESULT([yes])
			compatrdma_found=true
			AC_DEFINE(HAVE_COMPAT_RDMA, 1, [compat rdma found])
			EXTRA_OFED_CONFIG="$EXTRA_OFED_CONFIG -include ${O2IBPATH}/include/linux/compat-2.6.h"
			if test -f "$O2IBPATH/include/linux/compat_autoconf.h"; then
				COMPAT_AUTOCONF="$O2IBPATH/include/linux/compat_autoconf.h"
			fi
		else
			AC_MSG_RESULT([no])
		fi
		if ! $compatrdma_found; then
			if test -f "$O2IBPATH/config.mk"; then
				. "$O2IBPATH/config.mk"
			elif test -f "$O2IBPATH/ofed_patch.mk"; then
				. "$O2IBPATH/ofed_patch.mk"
			fi
		elif test -z "$COMPAT_AUTOCONF"; then
			# Depreciated checks
			if test "x$RHEL_KERNEL" = xyes; then
				RHEL_MAJOR=$(awk '/ RHEL_MAJOR / { print [$]3 }' $LINUX_OBJ/include/$VERSION_HDIR/version.h)
				I=$(awk '/ RHEL_MINOR / { print [$]3 }' $LINUX_OBJ/include/$VERSION_HDIR/version.h)
				while test "$I" -ge 0; do
					EXTRA_OFED_INCLUDE="$EXTRA_OFED_INCLUDE -DCONFIG_COMPAT_RHEL_${RHEL_MAJOR}_$I"
					I=$(($I-1))
				done
			elif test "x$SUSE_KERNEL" = xyes; then
				SP=$(grep PATCHLEVEL /etc/SuSE-release | sed -e 's/.*= *//')
				EXTRA_OFED_INCLUDE="$EXTRA_OFED_INCLUDE -DCONFIG_COMPAT_SLES_11_$SP"
			fi
		fi

		AC_MSG_CHECKING([whether to use any OFED backport headers])
		if test -n "$BACKPORT_INCLUDES"; then
			AC_MSG_RESULT([yes])
			OFED_BACKPORT_PATH="$O2IBPATH/${BACKPORT_INCLUDES/*\/kernel_addons/kernel_addons}/"
			EXTRA_OFED_INCLUDE="-I$OFED_BACKPORT_PATH $EXTRA_OFED_INCLUDE"
		else
			AC_MSG_RESULT([no])
		fi

		O2IBLND=""
		O2IBPATH=$(readlink --canonicalize $O2IBPATH)
		EXTRA_OFED_INCLUDE="$EXTRA_OFED_INCLUDE -I$O2IBPATH/include -I$O2IBPATH/include/uapi"
		EXTRA_CHECK_INCLUDE="$EXTRA_OFED_CONFIG $EXTRA_OFED_INCLUDE"
		LB_CHECK_COMPILE([whether to enable OpenIB gen2 support],
		openib_gen2_support, [
			#ifdef HAVE_COMPAT_RDMA
			#undef PACKAGE_NAME
			#undef PACKAGE_TARNAME
			#undef PACKAGE_VERSION
			#undef PACKAGE_STRING
			#undef PACKAGE_BUGREPORT
			#undef PACKAGE_URL
			#include <linux/compat-2.6.h>
			#endif
			#include <linux/version.h>
			#include <linux/pci.h>
			#include <linux/gfp.h>
			#include <rdma/rdma_cm.h>
			#include <rdma/ib_cm.h>
			#include <rdma/ib_verbs.h>
			#include <rdma/ib_fmr_pool.h>
		],[
			struct rdma_cm_id      *cm_idi __attribute__ ((unused));
			struct rdma_conn_param  conn_param __attribute__ ((unused));
			struct ib_device_attr   device_attr __attribute__ ((unused));
			struct ib_qp_attr       qp_attr __attribute__ ((unused));
			struct ib_pool_fmr      pool_fmr __attribute__ ((unused));
			enum   ib_cm_rej_reason rej_reason __attribute__ ((unused));
			rdma_destroy_id(NULL);
		],[
			O2IBLND="o2iblnd"
		],[
			case $ENABLEO2IB in
			"yes") AC_MSG_ERROR([can't compile with OpenIB gen2 headers]) ;;
			"withpath") AC_MSG_ERROR([can't compile with OpenIB gen2 headers under $O2IBPATH]) ;;
			*) AC_MSG_ERROR([internal error]) ;;
			esac
		])
		# we know at this point that the found OFED source is good
		O2IB_SYMVER=""
		if test $ENABLEO2IB = "withpath" -o "x$OFED" = "xyes" ; then
			if test -f $O2IBPATH/Module.symvers; then
				O2IB_SYMVER=$O2IBPATH/Module.symvers;
				break;
			fi
			if test -n "$O2IB_SYMVER"; then
				AC_MSG_NOTICE([adding $O2IB_SYMVER to Symbol Path])
				EXTRA_SYMBOLS="$EXTRA_SYMBOLS $O2IB_SYMVER"
				AC_SUBST(EXTRA_SYMBOLS)
			else
				AC_MSG_ERROR([an external source tree was, either specified or detected, for o2iblnd however I could not find a $O2IBPATH/Module.symvers there])
			fi
		fi

		LB_CHECK_COMPILE([if Linux kernel has kthread_worker],
		linux_kthread_worker, [
			#ifdef HAVE_COMPAT_RDMA
			#undef PACKAGE_NAME
			#undef PACKAGE_TARNAME
			#undef PACKAGE_VERSION
			#undef PACKAGE_STRING
			#undef PACKAGE_BUGREPORT
			#undef PACKAGE_URL
			#include <linux/compat-2.6.h>
			#endif
			#include <linux/kthread.h>
		],[
			struct kthread_work *kth_wrk = NULL;
			flush_kthread_work(kth_wrk);
		],[
			AC_DEFINE(HAVE_KTHREAD_WORK, 1, [kthread_worker found])
			if test -z "$COMPAT_AUTOCONF"; then
				EXTRA_OFED_INCLUDE="$EXTRA_OFED_INCLUDE -DCONFIG_COMPAT_IS_KTHREAD"
			fi
		])
		EXTRA_CHECK_INCLUDE=""
	fi
])
AC_SUBST(EXTRA_OFED_CONFIG)
AC_SUBST(EXTRA_OFED_INCLUDE)
AC_SUBST(O2IBLND)
AC_SUBST(O2IBPATH)
AC_SUBST(ENABLEO2IB)

AS_IF([test $ENABLEO2IB != "no"], [
	EXTRA_CHECK_INCLUDE="$EXTRA_OFED_CONFIG $EXTRA_OFED_INCLUDE"

	# In RHEL 6.2, rdma_create_id() takes the queue-pair type as a fourth argument
	LB_CHECK_COMPILE([if 'rdma_create_id' wants four args],
	rdma_create_id_4args, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/rdma_cm.h>
	],[
		rdma_create_id(NULL, NULL, 0, 0);
	],[
		AC_DEFINE(HAVE_RDMA_CREATE_ID_4ARG, 1,
			[rdma_create_id wants 4 args])
	])

	# 4.4 added network namespace parameter for rdma_create_id()
	LB_CHECK_COMPILE([if 'rdma_create_id' wants five args],
	rdma_create_id_5args, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/rdma_cm.h>
	],[
		rdma_create_id(NULL, NULL, NULL, 0, 0);
	],[
		AC_DEFINE(HAVE_RDMA_CREATE_ID_5ARG, 1,
			[rdma_create_id wants 5 args])
	])

	# 4.2 introduced struct ib_cq_init_attr which is used
	# by ib_create_cq(). Note some OFED stacks only keep
	# their headers in sync with latest kernels but not
	# the functionality which means for infiniband testing
	# we need to always test functionality testings.
	LB_CHECK_COMPILE([if 'struct ib_cq_init_attr' is used],
	ib_cq_init_attr, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		struct ib_cq_init_attr cq_attr;

		ib_create_cq(NULL, NULL, NULL, NULL, &cq_attr);
	],[
		AC_DEFINE(HAVE_IB_CQ_INIT_ATTR, 1,
			[struct ib_cq_init_attr is used by ib_create_cq])
	])

	# 4.3 removed ib_alloc_fast_reg_mr()
	LB_CHECK_COMPILE([if 'ib_alloc_fast_reg_mr' exists],
	ib_alloc_fast_reg_mr, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		ib_alloc_fast_reg_mr(NULL, 0);
	],[
		AC_DEFINE(HAVE_IB_ALLOC_FAST_REG_MR, 1,
			[ib_alloc_fast_reg_mr is defined])
	])

	# 4.9 must stop using ib_get_dma_mr and the global MR
	# We then have to use FMR/Fastreg for all RDMA.
	LB_CHECK_COMPILE([if 'ib_get_dma_mr' exists],
	ib_get_dma_mr, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		ib_get_dma_mr(NULL, 0);
	],[
		AC_DEFINE(HAVE_IB_GET_DMA_MR, 1,
			[ib_get_dma_mr is defined])
	])

	# In v4.4 Linux kernel,
	# commit e622f2f4ad2142d2a613a57fb85f8cf737935ef5
	# split up struct ib_send_wr so that all non-trivial verbs
	# use their own structure which embedds struct ib_send_wr.
	LB_CHECK_COMPILE([if 'struct ib_rdma_wr' is defined],
	ib_rdma_wr, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		struct ib_rdma_wr *wr __attribute__ ((unused));

		wr = rdma_wr(NULL);
	],[
		AC_DEFINE(HAVE_IB_RDMA_WR, 1,
			[struct ib_rdma_wr is defined])
	])

	# new fast registration API introduced in 4.4
	LB_CHECK_COMPILE([if 4arg 'ib_map_mr_sg' exists],
	ib_map_mr_sg_4args, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		ib_map_mr_sg(NULL, NULL, 0, 0);
	],[
		AC_DEFINE(HAVE_IB_MAP_MR_SG, 1,
			[ib_map_mr_sg exists])
	])

	# ib_map_mr_sg changes from 4 to 5 args (adding sg_offset_p)
	# in kernel 4.7 (and RHEL 7.3)
	LB_CHECK_COMPILE([if 5arg 'ib_map_mr_sg' exists],
	ib_map_mr_sg_5args, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		ib_map_mr_sg(NULL, NULL, 0, NULL, 0);
	],[
		AC_DEFINE(HAVE_IB_MAP_MR_SG, 1,
			[ib_map_mr_sg exists])
		AC_DEFINE(HAVE_IB_MAP_MR_SG_5ARGS, 1,
			[ib_map_mr_sg has 5 arguments])
	])

	# ib_query_device() removed in 4.5
	LB_CHECK_COMPILE([if 'struct ib_device' has member 'attrs'],
	ib_device.attrs, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		struct ib_device dev;
		struct ib_device_attr dev_attr = {};
		dev.attrs = dev_attr;
	],[
		AC_DEFINE(HAVE_IB_DEVICE_ATTRS, 1,
			[struct ib_device.attrs is defined])
	])

	# A flags argument was added to ib_alloc_pd() in Linux 4.9,
	# commit ed082d36a7b2c27d1cda55fdfb28af18040c4a89
	LB_CHECK_COMPILE([if 2arg 'ib_alloc_pd' exists],
	ib_alloc_pd, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		ib_alloc_pd(NULL, 0);
	],[
		AC_DEFINE(HAVE_IB_ALLOC_PD_2ARGS, 1,
			[ib_alloc_pd has 2 arguments])
	])

	LB_CHECK_COMPILE([if function 'ib_inc_rkey' is defined],
	ib_inc_rkey, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		(void)ib_inc_rkey(0);
	],[
		AC_DEFINE(HAVE_IB_INC_RKEY, 1,
			  [function ib_inc_rkey exist])
	])

	# In MOFED 4.6, the second and third parameters for
	# ib_post_send() and ib_post_recv() are declared with
	# 'const'.
	tmp_flags="$EXTRA_KCFLAGS"
	EXTRA_KCFLAGS="-Werror"
	LB_CHECK_COMPILE([if 'ib_post_send() and ib_post_recv()' have const parameters],
	ib_post_send_recv_const, [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	],[
		ib_post_send(NULL, (const struct ib_send_wr *)NULL,
			     (const struct ib_send_wr **)NULL);
	],[
		AC_DEFINE(HAVE_IB_POST_SEND_RECV_CONST, 1,
			[ib_post_send and ib_post_recv have const parameters])
	])
	EXTRA_KCFLAGS="$tmp_flags"

	# 5.0
	LN_IB_DEVICE_OPS_EXISTS
	# 5.1
	LN_IB_SG_DMA_ADDRESS_EXISTS

	EXTRA_CHECK_INCLUDE=""
]) # ENABLEO2IB != "no"
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:635: -1- AC_DEFUN([LN_CONFIG_GNILND], [
AC_MSG_CHECKING([whether to enable GNI lnd])
AC_ARG_ENABLE([gni],
	AC_HELP_STRING([--enable-gni],
		[enable GNI lnd]),
	[], [enable_gni="no"])
AC_MSG_RESULT([$enable_gni])

AS_IF([test "x$enable_gni" = xyes], [
	# GNICPPFLAGS was set in spec file
	EXTRA_KCFLAGS_save="$EXTRA_KCFLAGS"
	EXTRA_KCFLAGS="$EXTRA_KCFLAGS $GNICPPFLAGS"
	LB_CHECK_COMPILE([if GNI kernel headers are present],
	GNI_header, [
		#include <linux/types.h>
		#include <gni_pub.h>
	],[
		gni_cdm_handle_t kgni_domain;
		gni_return_t	 rc;
		int		 rrc;
		rc = gni_cdm_create(0, 1, 1, 0, &kgni_domain);
		rrc = (rc == GNI_RC_SUCCESS) ? 0 : 1;
		return rrc;
	],[
		GNILND="gnilnd"
	],[
		AC_MSG_ERROR([can't compile gnilnd with given GNICPPFLAGS: $GNICPPFLAGS])
	])
	# at this point, we have gnilnd basic support,
	# now check for extra features
	LB_CHECK_COMPILE([to use RCA in gnilnd],
	RCA_gnilnd, [
		#include <linux/types.h>
		#include <gni_pub.h>
		#include <krca_lib.h>
	],[
		gni_cdm_handle_t kgni_domain;
		gni_return_t	 rc;
		krca_ticket_t	 ticket = KRCA_NULL_TICKET;
		int		 rrc;
		__u32		 nid = 0, nic_addr;
		rc = gni_cdm_create(0, 1, 1, 0, &kgni_domain);
		rrc = (rc == GNI_RC_SUCCESS) ? 0 : 1;
		rrc += krca_nid_to_nicaddrs(nid, 1, &nic_addr);
		rrc += krca_register(&ticket, RCA_MAKE_SERVICE_INDEX(RCA_IO_CLASS, 9), 99, 0);
		return rrc;
	],[
		GNICPPFLAGS="$GNICPPFLAGS -DGNILND_USE_RCA=1"
	])
	EXTRA_KCFLAGS="$EXTRA_KCFLAGS_save"
])
AC_SUBST(GNICPPFLAGS)
AC_SUBST(GNILND)
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:652: -1- AC_DEFUN([LN_CONFIG_SK_SLEEP], [
LB_CHECK_COMPILE([if Linux kernel has 'sk_sleep'],
sk_sleep, [
	#include <net/sock.h>
],[
	sk_sleep(NULL);
],[
	AC_DEFINE(HAVE_SK_SLEEP, 1,
		  [kernel has sk_sleep])
])
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:674: -1- AC_DEFUN([LN_CONFIG_TCP_SENDPAGE], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'tcp_sendpage' first parameter is socket],
tcp_sendpage_socket, [
	#include <linux/net.h>
	#include <net/tcp.h>
],[
	tcp_sendpage((struct socket*)0, NULL, 0, 0, 0);
],[
	AC_DEFINE(HAVE_TCP_SENDPAGE_USE_SOCKET, 1,
		[tcp_sendpage use socket as first parameter])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:695: -1- AC_DEFUN([LN_CONFIG_SOCK_CREATE_KERN], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'sock_create_kern' first parameter is net],
sock_create_kern_net, [
	#include <linux/net.h>
	#include <net/net_namespace.h>
],[
	sock_create_kern((struct net*)0, 0, 0, 0, NULL);
],[
	AC_DEFINE(HAVE_SOCK_CREATE_KERN_USE_NET, 1,
		[sock_create_kern use net as first parameter])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:716: -1- AC_DEFUN([LN_CONFIG_SK_DATA_READY], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'sk_data_ready' takes only one argument],
sk_data_ready, [
	#include <linux/net.h>
	#include <net/sock.h>
],[
	((struct sock *)0)->sk_data_ready(NULL);
],[
	AC_DEFINE(HAVE_SK_DATA_READY_ONE_ARG, 1,
		[sk_data_ready uses only one argument])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:727: -1- AC_DEFUN([LN_EXPORT_KMAP_TO_PAGE], [
LB_CHECK_EXPORT([kmap_to_page], [mm/highmem.c],
	[AC_DEFINE(HAVE_KMAP_TO_PAGE, 1,
		[kmap_to_page is exported by the kernel])])
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:748: -1- AC_DEFUN([LN_CONFIG_SOCK_ACCEPT], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'struct sock' accept function requires a bool argument],
kern_sock_flag, [
	#include <linux/net.h>
],[
	((struct socket *)0)->ops->accept(NULL, NULL, O_NONBLOCK, false);
],[
	AC_DEFINE(HAVE_KERN_SOCK_ACCEPT_FLAG_ARG, 1,
		['struct sock' accept function requires bool argument])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:768: -1- AC_DEFUN([LN_HAVE_ORACLE_OFED_EXTENSIONS], [
LB_CHECK_COMPILE([if Oracle OFED Extensions are enabled],
oracle_ofed_ext, [
	#include <rdma/ib_fmr_pool.h>
],[
	struct ib_fmr_pool_param param = {
		.relaxed           = 0
	};
	(void)param;
],[
	AC_DEFINE(HAVE_ORACLE_OFED_EXTENSIONS, 1,
		[if Oracle OFED Extensions are enabled])
])
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:789: -1- AC_DEFUN([LN_CONFIG_SOCK_GETNAME], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'getname' has two args],
kern_sock_getname_2args, [
	#include <linux/net.h>
],[
	kernel_getsockname(NULL, NULL);
],[
	AC_DEFINE(HAVE_KERN_SOCK_GETNAME_2ARGS, 1,
		['getname' has two args])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:814: -1- AC_DEFUN([LN_IB_DEVICE_OPS_EXISTS], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if struct ib_device_ops is defined],
ib_device_ops_test, [
	#include <rdma/ib_verbs.h>
],[
	int x = offsetof(struct ib_device_ops, unmap_fmr);
	x = x;
	(void)x;
],[
	AC_DEFINE(HAVE_IB_DEVICE_OPS, 1,
		[if struct ib_device_ops is defined])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:838: -1- AC_DEFUN([LN_IB_SG_DMA_ADDRESS_EXISTS], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if ib_sg_dma_address wrapper exists],
ib_sg_dma_address_test, [
	#include <rdma/ib_verbs.h>
],[
	u64 x = ib_sg_dma_address(NULL, NULL);
	x = x;
	(void)x;
],[
	AC_DEFINE(HAVE_IB_SG_DMA_ADDRESS, 1,
		[if ib_sg_dma_address wrapper exists])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:869: -1- AC_DEFUN([LN_PROG_LINUX], [
AC_MSG_NOTICE([LNet kernel checks
==============================================================================])

LN_CONFIG_AFFINITY
LN_CONFIG_BACKOFF
LN_CONFIG_O2IB
LN_CONFIG_GNILND
# 2.6.35
LN_CONFIG_SK_SLEEP
# 2.6.36
LN_CONFIG_TCP_SENDPAGE
# 3.10
LN_EXPORT_KMAP_TO_PAGE
# 3.15
LN_CONFIG_SK_DATA_READY
# 4.x
LN_CONFIG_SOCK_CREATE_KERN
# 4.11
LN_CONFIG_SOCK_ACCEPT
# 4.14
LN_HAVE_ORACLE_OFED_EXTENSIONS
# 4.17
LN_CONFIG_SOCK_GETNAME
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:877: -1- AC_DEFUN([LN_PATH_DEFAULTS], [
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:913: -1- AC_DEFUN([LN_CONFIGURE], [
AC_MSG_NOTICE([LNet core checks
==============================================================================])

# lnet/utils/portals.c
AC_CHECK_HEADERS([netdb.h])
AC_CHECK_FUNCS([gethostbyname])

# lnet/utils/wirecheck.c
AC_CHECK_FUNCS([strnlen])

# --------  Check for required packages  --------------

AC_MSG_CHECKING([whether to enable 'efence' debugging support])
AC_ARG_ENABLE(efence,
	AC_HELP_STRING([--enable-efence],
		[use efence library]),
	[], [enable_efence="no"])
AC_MSG_RESULT([$enable_efence])

LIBEFENCE=""
AS_IF([test "$enable_efence" = yes], [
	LIBEFENCE="-lefence"
	AC_DEFINE(HAVE_LIBEFENCE, 1,
		[libefence support is requested])
])
AC_SUBST(LIBEFENCE)

LN_CONFIG_DLC
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:923: -1- AC_DEFUN([LN_CONDITIONALS], [
AM_CONDITIONAL(BUILD_O2IBLND,    test x$O2IBLND = "xo2iblnd")
AM_CONDITIONAL(BUILD_GNILND,     test x$GNILND  = "xgnilnd")
])
m4trace:/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:954: -1- AC_DEFUN([LN_CONFIG_FILES], [
AC_CONFIG_FILES([
lnet/Makefile
lnet/autoMakefile
lnet/autoconf/Makefile
lnet/doc/Makefile
lnet/include/Makefile
lnet/include/lnet/Makefile
lnet/include/uapi/linux/lnet/Makefile
lnet/klnds/Makefile
lnet/klnds/autoMakefile
lnet/klnds/o2iblnd/Makefile
lnet/klnds/o2iblnd/autoMakefile
lnet/klnds/gnilnd/Makefile
lnet/klnds/gnilnd/autoMakefile
lnet/klnds/socklnd/Makefile
lnet/klnds/socklnd/autoMakefile
lnet/lnet/Makefile
lnet/lnet/autoMakefile
lnet/selftest/Makefile
lnet/selftest/autoMakefile
lnet/utils/Makefile
lnet/utils/lnetconfig/Makefile
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:33: -1- AC_DEFUN([LIBCFS_CONFIG_CDEBUG], [
AC_MSG_CHECKING([whether to enable CDEBUG, CWARN])
AC_ARG_ENABLE([libcfs_cdebug],
	AC_HELP_STRING([--disable-libcfs-cdebug],
		[disable libcfs CDEBUG, CWARN]),
	[], [enable_libcfs_cdebug="yes"])
AC_MSG_RESULT([$enable_libcfs_cdebug])
AS_IF([test "x$enable_libcfs_cdebug" = xyes],
	[AC_DEFINE(CDEBUG_ENABLED, 1, [enable libcfs CDEBUG, CWARN])])

AC_MSG_CHECKING([whether to enable ENTRY/EXIT])
AC_ARG_ENABLE([libcfs_trace],
	AC_HELP_STRING([--disable-libcfs-trace],
		[disable libcfs ENTRY/EXIT]),
	[], [enable_libcfs_trace="yes"])
AC_MSG_RESULT([$enable_libcfs_trace])
AS_IF([test "x$enable_libcfs_trace" = xyes],
	[AC_DEFINE(CDEBUG_ENTRY_EXIT, 1, [enable libcfs ENTRY/EXIT])])

AC_MSG_CHECKING([whether to enable LASSERT, LASSERTF])
AC_ARG_ENABLE([libcfs_assert],
	AC_HELP_STRING([--disable-libcfs-assert],
		[disable libcfs LASSERT, LASSERTF]),
	[], [enable_libcfs_assert="yes"])
AC_MSG_RESULT([$enable_libcfs_assert])
AS_IF([test x$enable_libcfs_assert = xyes],
	[AC_DEFINE(LIBCFS_DEBUG, 1, [enable libcfs LASSERT, LASSERTF])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:49: -1- AC_DEFUN([LIBCFS_CONFIG_PANIC_DUMPLOG], [
AC_MSG_CHECKING([whether to use tunable 'panic_dumplog' support])
AC_ARG_ENABLE([panic_dumplog],
	AC_HELP_STRING([--enable-panic_dumplog],
		[enable panic_dumplog]),
	[], [enable_panic_dumplog="no"])
AC_MSG_RESULT([$enable_panic_dumplog])
AS_IF([test "x$enable_panic_dumplog" = xyes],
	[AC_DEFINE(LNET_DUMP_ON_PANIC, 1, [use dumplog on panic])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:66: -1- AC_DEFUN([LIBCFS_STACKTRACE_OPS_HAVE_WALK_STACK], [
LB_CHECK_COMPILE([if 'struct stacktrace_ops' has 'walk_stack' field],
stacktrace_ops_walk_stack, [
	#include <asm/stacktrace.h>
],[
	((struct stacktrace_ops *)0)->walk_stack(NULL, NULL, 0, NULL, NULL, NULL, NULL);
],[
	AC_DEFINE(STACKTRACE_OPS_HAVE_WALK_STACK, 1,
		['struct stacktrace_ops' has 'walk_stack' field])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:85: -1- AC_DEFUN([LIBCFS_STACKTRACE_WARNING], [
LB_CHECK_COMPILE([if 'stacktrace_ops.warning' is exist],
stacktrace_ops_warning, [
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
],[
	((struct stacktrace_ops *)0)->warning(NULL, NULL);
],[
	AC_DEFINE(HAVE_STACKTRACE_WARNING, 1,
		[stacktrace_ops.warning is exist])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:103: -1- AC_DEFUN([LC_SHRINKER_WANT_SHRINK_PTR], [
LB_CHECK_COMPILE([if 'shrinker' want self pointer in handler],
shrink_self_pointer, [
	#include <linux/mm.h>
],[
	struct shrinker *tmp = NULL;
	tmp->shrink(tmp, 0, 0);
],[
	AC_DEFINE(HAVE_SHRINKER_WANT_SHRINK_PTR, 1,
		[shrinker want self pointer in handler])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:121: -1- AC_DEFUN([LIBCFS_SYSCTL_CTLNAME], [
LB_CHECK_COMPILE([if 'ctl_table' has a 'ctl_name' field],
ctl_table_ctl_name, [
	#include <linux/sysctl.h>
],[
	struct ctl_table ct;
	ct.ctl_name = sizeof(ct);
],[
	AC_DEFINE(HAVE_SYSCTL_CTLNAME, 1,
		[ctl_table has ctl_name field])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:139: -1- AC_DEFUN([LIBCFS_MODULE_LOCKING], [
LB_CHECK_COMPILE([does the kernel support module param locking],
module_param_locking, [
	#include <linux/moduleparam.h>
],[
	__kernel_param_lock(NULL);
	__kernel_param_unlock(NULL);
],[
	AC_DEFINE(HAVE_MODULE_PARAM_LOCKING, 1,
		[locking module param is supported])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:157: -1- AC_DEFUN([LIBCFS_KSTRTOUL], [
LB_CHECK_COMPILE([if Linux kernel has 'kstrtoul'],
kstrtoul, [
	#include <linux/kernel.h>
],[
	unsigned long result;
	return kstrtoul("12345", 0, &result);
],[
	AC_DEFINE(HAVE_KSTRTOUL, 1,
		[kernel has kstrtoul])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:176: -1- AC_DEFUN([LIBCFS_DUMP_TRACE_ADDRESS], [
LB_CHECK_COMPILE([if 'dump_trace' want address],
dump_trace_address, [
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
],[
	dump_trace(NULL, NULL, NULL, 0, NULL, NULL);
],[
	AC_DEFINE(HAVE_DUMP_TRACE_ADDRESS, 1,
		[dump_trace want address argument])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:196: -1- AC_DEFUN([LC_SHRINK_CONTROL], [
LB_CHECK_COMPILE([if 'shrink_control' is present],
shrink_control, [
	#include <linux/atomic.h>
	#include <linux/mm.h>
],[
	struct shrink_control tmp = {0};
	tmp.nr_to_scan = sizeof(tmp);
],[
	AC_DEFINE(HAVE_SHRINK_CONTROL, 1,
		[shrink_control is present])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:206: -1- AC_DEFUN([LIBCFS_PROCESS_NAMESPACE], [
LB_CHECK_LINUX_HEADER([linux/uidgid.h], [
	AC_DEFINE(HAVE_UIDGID_HEADER, 1,
		[uidgid.h is present])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:223: -1- AC_DEFUN([LIBCFS_I_UID_READ], [
LB_CHECK_COMPILE([if 'i_uid_read' is present],
i_uid_read, [
	#include <linux/fs.h>
],[
	i_uid_read(NULL);
],[
	AC_DEFINE(HAVE_I_UID_READ, 1, [i_uid_read is present])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:234: -1- AC_DEFUN([LIBCFS_HAVE_CRC32], [
LB_CHECK_CONFIG_IM([CRC32],
	[have_crc32="yes"], [have_crc32="no"])
AS_IF([test "x$have_crc32" = xyes],
	[AC_DEFINE(HAVE_CRC32, 1,
		[kernel compiled with CRC32 functions])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:245: -1- AC_DEFUN([LIBCFS_ENABLE_CRC32_ACCEL], [
LB_CHECK_CONFIG_IM([CRYPTO_CRC32_PCLMUL],
	[enable_crc32_crypto="no"], [enable_crc32_crypto="yes"])
AS_IF([test "x$have_crc32" = xyes -a "x$enable_crc32_crypto" = xyes], [
	AC_DEFINE(NEED_CRC32_ACCEL, 1, [need pclmulqdq based crc32])
	AC_MSG_WARN([No crc32 pclmulqdq crypto api found, enable internal pclmulqdq based crc32])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:256: -1- AC_DEFUN([LIBCFS_ENABLE_CRC32C_ACCEL], [
LB_CHECK_CONFIG_IM([CRYPTO_CRC32C_INTEL],
	[enable_crc32c_crypto="no"], [enable_crc32c_crypto="yes"])
AS_IF([test "x$enable_crc32c_crypto" = xyes], [
	AC_DEFINE(NEED_CRC32C_ACCEL, 1, [need pclmulqdq based crc32c])
	AC_MSG_WARN([No crc32c pclmulqdq crypto api found, enable internal pclmulqdq based crc32c])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:274: -1- AC_DEFUN([LIBCFS_KTIME_GET_TS64], [
LB_CHECK_COMPILE([does function 'ktime_get_ts64' exist],
ktime_get_ts64, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	struct timespec64 *ts = NULL;

	ktime_get_ts64(ts);
],[
	AC_DEFINE(HAVE_KTIME_GET_TS64, 1,
		['ktime_get_ts64' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:289: -1- AC_DEFUN([LIBCFS_PREPARE_TO_WAIT_EVENT], [
LB_CHECK_COMPILE([does function 'prepare_to_wait_event' exist],
prepare_to_wait_event, [
	#include <linux/wait.h>
],[
	prepare_to_wait_event(NULL, NULL, 0);
],[
	AC_DEFINE(HAVE_PREPARE_TO_WAIT_EVENT, 1,
		['prepare_to_wait_event' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:308: -1- AC_DEFUN([LIBCFS_KERNEL_PARAM_OPS], [
LB_CHECK_COMPILE([does 'struct kernel_param_ops' exist],
kernel_param_ops, [
	#include <linux/module.h>
],[
	struct kernel_param_ops ops;

	ops.set = NULL;
],[
	AC_DEFINE(HAVE_KERNEL_PARAM_OPS, 1,
		['struct kernel_param_ops' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:328: -1- AC_DEFUN([LIBCFS_KTIME_ADD], [
LB_CHECK_COMPILE([does function 'ktime_add' exist],
ktime_add, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;
	ktime_t total;

	total = ktime_add(start, end);
],[
	AC_DEFINE(HAVE_KTIME_ADD, 1,
		[ktime_add is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:347: -1- AC_DEFUN([LIBCFS_KTIME_AFTER], [
LB_CHECK_COMPILE([does function 'ktime_after' exist],
ktime_after, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_after(start, end);
],[
	AC_DEFINE(HAVE_KTIME_AFTER, 1,
		[ktime_after is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:367: -1- AC_DEFUN([LIBCFS_KTIME_BEFORE], [
LB_CHECK_COMPILE([does function 'ktime_before' exist],
ktime_before, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_before(start, end);
],[
	AC_DEFINE(HAVE_KTIME_BEFORE, 1,
		[ktime_before is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:386: -1- AC_DEFUN([LIBCFS_KTIME_COMPARE], [
LB_CHECK_COMPILE([does function 'ktime_compare' exist],
ktime_compare, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_compare(start, end);
],[
	AC_DEFINE(HAVE_KTIME_COMPARE, 1,
		[ktime_compare is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:404: -1- AC_DEFUN([LIBCFS_SHRINKER_COUNT], [
LB_CHECK_COMPILE([shrinker has 'count_objects'],
shrinker_count_objects, [
	#include <linux/mmzone.h>
	#include <linux/shrinker.h>
],[
	struct shrinker shrinker;

	shrinker.count_objects = NULL;
],[
	AC_DEFINE(HAVE_SHRINKER_COUNT, 1,
		[shrinker has count_objects member])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:426: -1- AC_DEFUN([LIBCFS_IOV_ITER_HAS_TYPE], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if iov_iter has member type],
iov_iter_has_type_member, [
	#include <linux/uio.h>
],[
	struct iov_iter iter = { .type = ITER_KVEC };
	(void)iter;
],[
	AC_DEFINE(HAVE_IOV_ITER_HAS_TYPE_MEMBER, 1,
		[if iov_iter has member type])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:442: -1- AC_DEFUN([LIBCFS_HLIST_ADD_AFTER], [
LB_CHECK_COMPILE([does function 'hlist_add_after' exist],
hlist_add_after, [
	#include <linux/list.h>
],[
	hlist_add_after(NULL, NULL);
],[
	AC_DEFINE(HAVE_HLIST_ADD_AFTER, 1,
		[hlist_add_after is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:460: -1- AC_DEFUN([LIBCFS_TIMESPEC64], [
LB_CHECK_COMPILE([does 'struct timespec64' exist],
timespec64, [
	#include <linux/time.h>
],[
	struct timespec64 ts;

	ts.tv_sec = 0;
	ts.tv_nsec = 0;
],[
	AC_DEFINE(HAVE_TIMESPEC64, 1,
		['struct timespec64' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:477: -1- AC_DEFUN([LIBCFS_KTIME_GET_REAL_TS64], [
LB_CHECK_COMPILE([does function 'ktime_get_real_ts64' exist],
ktime_get_real_ts64, [
	#include <linux/ktime.h>
],[
	struct timespec64 *ts = NULL;

	ktime_get_real_ts64(ts);
],[
	AC_DEFINE(HAVE_KTIME_GET_REAL_TS64, 1,
		['ktime_get_real_ts64' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:495: -1- AC_DEFUN([LIBCFS_KTIME_GET_REAL_SECONDS], [
LB_CHECK_COMPILE([does function 'ktime_get_real_seconds' exist],
ktime_get_real_seconds, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	time64_t now;

	now = ktime_get_real_seconds();
],[
	AC_DEFINE(HAVE_KTIME_GET_REAL_SECONDS, 1,
		['ktime_get_real_seconds' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:513: -1- AC_DEFUN([LIBCFS_KTIME_GET_NS], [
LB_CHECK_COMPILE([does function 'ktime_get_ns' exist],
ktime_get_ns, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	u64 nanoseconds;

	nanoseconds = ktime_get_ns();
],[],[
	AC_DEFINE(NEED_KTIME_GET_NS, 1,
		['ktime_get_ns' is not available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:531: -1- AC_DEFUN([LIBCFS_KTIME_GET_REAL_NS], [
LB_CHECK_COMPILE([does function 'ktime_get_real_ns' exist],
ktime_get_real_ns, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	u64 nanoseconds;

	nanoseconds = ktime_get_real_ns();
],[],[
	AC_DEFINE(NEED_KTIME_GET_REAL_NS, 1,
		['ktime_get_real_ns' is not available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:550: -1- AC_DEFUN([LIBCFS_KTIME_TO_TIMESPEC64], [
LB_CHECK_COMPILE([does function 'ktime_to_timespec64' exist],
ktime_to_timespec64, [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
],[
	ktime_t now = ktime_set(0, 0);
	struct timespec64 ts;

	ts = ktime_to_timespec64(now);
],[
	AC_DEFINE(HAVE_KTIME_TO_TIMESPEC64, 1,
		['ktime_to_timespec64' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:567: -1- AC_DEFUN([LIBCFS_TIMESPEC64_SUB], [
LB_CHECK_COMPILE([does function 'timespec64_sub' exist],
timespec64_sub, [
	#include <linux/time.h>
],[
	struct timespec64 later = { }, earlier = { }, diff;

	diff = timespec64_sub(later, earlier);
],[
	AC_DEFINE(HAVE_TIMESPEC64_SUB, 1,
		['timespec64_sub' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:585: -1- AC_DEFUN([LIBCFS_TIMESPEC64_TO_KTIME], [
LB_CHECK_COMPILE([does function 'timespec64_to_ktime' exist],
timespec64_to_ktime, [
	#include <linux/ktime.h>
],[
	struct timespec64 ts;
	ktime_t now;

	now = timespec64_to_ktime(ts);
],[
	AC_DEFINE(HAVE_TIMESPEC64_TO_KTIME, 1,
		['timespec64_to_ktime' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:602: -1- AC_DEFUN([LIBCFS_KTIME_GET_SECONDS], [
LB_CHECK_COMPILE([does function 'ktime_get_seconds' exist],
ktime_get_seconds, [
	#include <linux/ktime.h>
],[
	time64_t now;

	now = ktime_get_seconds();
],[
	AC_DEFINE(HAVE_KTIME_GET_SECONDS, 1,
		['ktime_get_seconds' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:621: -1- AC_DEFUN([LIBCFS_KTIME_MS_DELTA], [
LB_CHECK_COMPILE([does function 'ktime_ms_delta' exist],
ktime_ms_delta, [
	#include <linux/ktime.h>
],[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_ms_delta(start, end);
],[
	AC_DEFINE(HAVE_KTIME_MS_DELTA, 1,
		['ktime_ms_delta' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:640: -1- AC_DEFUN([LIBCFS_KERNEL_PARAM_LOCK], [
LB_CHECK_COMPILE([does function 'kernel_param_[un]lock' exist],
kernel_param_lock, [
	#include <linux/moduleparam.h>
],[
	kernel_param_lock(NULL);
	kernel_param_unlock(NULL);
],[
	AC_DEFINE(HAVE_KERNEL_PARAM_LOCK, 1,
		['kernel_param_[un]lock' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:658: -1- AC_DEFUN([LIBCFS_HAVE_TOPOLOGY_SIBLING_CPUMASK], [
LB_CHECK_COMPILE([does function 'topology_sibling_cpumask' exist],
topology_sibling_cpumask, [
	#include <linux/topology.h>
],[
	const struct cpumask *mask;

	mask = topology_sibling_cpumask(0);
],[
	AC_DEFINE(HAVE_TOPOLOGY_SIBLING_CPUMASK, 1,
		[topology_sibling_cpumask is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:668: -1- AC_DEFUN([LIBCFS_FPU_API], [
LB_CHECK_LINUX_HEADER([asm/fpu/api.h], [
	AC_DEFINE(HAVE_FPU_API_HEADER, 1,
		[fpu/api.h is present])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:685: -1- AC_DEFUN([LIBCFS_KSTRTOBOOL_FROM_USER], [
LB_CHECK_COMPILE([if Linux kernel has 'kstrtobool_from_user'],
kstrtobool_from_user, [
	#include <linux/kernel.h>
],[
	bool result;
	return kstrtobool_from_user(NULL, 0, &result);
],[
	AC_DEFINE(HAVE_KSTRTOBOOL_FROM_USER, 1,
		[kernel has kstrtobool_from_user])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:702: -1- AC_DEFUN([LIBCFS_CRYPTO_HASH_HELPERS], [
LB_CHECK_COMPILE([does crypto hash helper functions exist],
crypto_hash_helpers, [
	#include <crypto/hash.h>
],[
	crypto_ahash_alg_name(NULL);
	crypto_ahash_driver_name(NULL);
],[
	AC_DEFINE(HAVE_CRYPTO_HASH_HELPERS, 1,
		[crypto hash helper functions are available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:720: -1- AC_DEFUN([LIBCFS_RHASHTABLE_REPLACE], [
LB_CHECK_COMPILE([if 'rhashtable_replace_fast' exists],
rhashtable_replace_fast, [
	#include <linux/rhashtable.h>
],[
	const struct rhashtable_params params = { 0 };

	rhashtable_replace_fast(NULL, NULL, NULL, params);
],[
	AC_DEFINE(HAVE_RHASHTABLE_REPLACE, 1,
		[rhashtable_replace_fast() is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:730: -1- AC_DEFUN([LIBCFS_EXPORT_KSET_FIND_OBJ], [
LB_CHECK_EXPORT([kset_find_obj], [lib/kobject.c],
	[AC_DEFINE(HAVE_KSET_FIND_OBJ, 1,
		[kset_find_obj is exported by the kernel])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:746: -1- AC_DEFUN([LIBCFS_BROKEN_HASH_64], [
LB_CHECK_COMPILE([kernel has fixed hash_64()],
broken_hash_64, [
	#include <linux/hash.h>
],[
	int tmp = GOLDEN_RATIO_PRIME_64;
],[
	AC_DEFINE(HAVE_BROKEN_HASH_64, 1, [kernel hash_64() is broken])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:765: -1- AC_DEFUN([LIBCFS_STACKTRACE_OPS_ADDRESS_RETURN_INT], [
LB_CHECK_COMPILE([if 'struct stacktrace_ops' address function returns an int],
stacktrace_ops_address_return_int, [
	#include <asm/stacktrace.h>
],[
	int rc;

	rc = ((struct stacktrace_ops *)0)->address(NULL, 0, 0);
],[
	AC_DEFINE(STACKTRACE_OPS_ADDRESS_RETURN_INT, 1,
		['struct stacktrace_ops' address function returns an int])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:783: -1- AC_DEFUN([LIBCFS_GET_USER_PAGES_6ARG], [
LB_CHECK_COMPILE([if 'get_user_pages()' takes 6 arguments],
get_user_pages_6arg, [
	#include <linux/mm.h>
],[
	int rc;

	rc = get_user_pages(0, 0, 0, 0, NULL, NULL);
],[
	AC_DEFINE(HAVE_GET_USER_PAGES_6ARG, 1,
		[get_user_pages takes 6 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:795: -1- AC_DEFUN([LIBCFS_STRINGHASH], [
LB_CHECK_LINUX_HEADER([linux/stringhash.h], [
	AC_DEFINE(HAVE_STRINGHASH, 1,
		[stringhash.h is present])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:820: -1- AC_DEFUN([LIBCFS_RHASHTABLE_INSERT_FAST], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if internal '__rhashtable_insert_fast()' returns int],
rhashtable_insert_fast, [
	#include <linux/rhashtable.h>
],[
	const struct rhashtable_params params = { 0 };
	int rc;

	rc = __rhashtable_insert_fast(NULL, NULL, NULL, params);
],[
	AC_DEFINE(HAVE_HASHTABLE_INSERT_FAST_RETURN_INT, 1,
		  ['__rhashtable_insert_fast()' returns int])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:837: -1- AC_DEFUN([LIBCFS_RHASHTABLE_WALK_INIT_3ARG], [
LB_CHECK_COMPILE([if 'rhashtable_walk_init' has 3 args],
rhashtable_walk_init, [
	#include <linux/gfp.h>
	#include <linux/rhashtable.h>
],[
	rhashtable_walk_init(NULL, NULL, GFP_KERNEL);
],[
	AC_DEFINE(HAVE_3ARG_RHASHTABLE_WALK_INIT, 1,
		[rhashtable_walk_init() has 3 args])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:856: -1- AC_DEFUN([LIBCFS_RHASHTABLE_LOOKUP], [
LB_CHECK_COMPILE([if 'rhashtable_lookup' exist],
rhashtable_lookup, [
	#include <linux/rhashtable.h>
],[
	const struct rhashtable_params params = { 0 };
	void *ret;

	ret = rhashtable_lookup(NULL, NULL, params);
],[
	AC_DEFINE(HAVE_RHASHTABLE_LOOKUP, 1,
		[rhashtable_lookup() is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:876: -1- AC_DEFUN([LIBCFS_RHLTABLE], [
LB_CHECK_COMPILE([does 'struct rhltable' exist],
rhtable, [
	#include <linux/rhashtable.h>
],[
	struct rhltable *hlt;

	rhltable_destroy(hlt);
],[
	AC_DEFINE(HAVE_RHLTABLE, 1,
		  [struct rhltable exist])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:897: -1- AC_DEFUN([LIBCFS_STACKTRACE_OPS], [
LB_CHECK_COMPILE([if 'struct stacktrace_ops' exists],
stacktrace_ops, [
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
],[
	struct stacktrace_ops ops;
	ops.stack = NULL;
],[
	AC_DEFINE(HAVE_STACKTRACE_OPS, 1,
		[struct stacktrace_ops exists])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:913: -1- AC_DEFUN([LIBCFS_RHASHTABLE_WALK_ENTER], [
LB_CHECK_COMPILE([if 'rhashtable_walk_enter' exists],
rhashtable_walk_enter, [
	#include <linux/rhashtable.h>
],[
	rhashtable_walk_enter(NULL, NULL);
],[
	AC_DEFINE(HAVE_RHASHTABLE_WALK_ENTER, 1,
		[rhashtable_walk_enter() is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:930: -1- AC_DEFUN([LIBCFS_GET_USER_PAGES_GUP_FLAGS], [
LB_CHECK_COMPILE([if 'get_user_pages()' takes gup_flags in arguments],
get_user_pages_gup_flags, [
	#include <linux/mm.h>
],[
	int rc;
	rc = get_user_pages(0, 0, FOLL_WRITE, NULL, NULL);
],[
	AC_DEFINE(HAVE_GET_USER_PAGES_GUP_FLAGS, 1,
		[get_user_pages takes gup_flags in arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:946: -1- AC_DEFUN([LIBCFS_HOTPLUG_STATE_MACHINE], [
LB_CHECK_COMPILE([if libcfs supports CPU hotplug state machine],
cpu_hotplug_state_machine, [
	#include <linux/cpuhotplug.h>
],[
	cpuhp_remove_state(CPUHP_LUSTRE_CFS_DEAD);
],[
	AC_DEFINE(HAVE_HOTPLUG_STATE_MACHINE, 1,
		[hotplug state machine is supported])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:957: -1- AC_DEFUN([LIBCFS_SCHED_HEADERS], [
LB_CHECK_LINUX_HEADER([linux/sched/signal.h], [
	AC_DEFINE(HAVE_SCHED_HEADERS, 1,
		[linux/sched header directory exist])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:974: -1- AC_DEFUN([LIBCFS_RHT_BUCKET_VAR], [
LB_CHECK_COMPILE([if 'rht_bucket_var' exists],
rht_bucket_var, [
	#include <linux/rhashtable.h>
],[

	rht_bucket_var(NULL, 0);
],[
	AC_DEFINE(HAVE_RHT_BUCKET_VAR, 1,
		[rht_bucket_var() is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:993: -1- AC_DEFUN([LIBCFS_RHASHTABLE_LOOKUP_GET_INSERT_FAST], [
LB_CHECK_COMPILE([if 'rhashtable_lookup_get_insert_fast' exist],
rhashtable_lookup_get_insert_fast, [
	#include <linux/rhashtable.h>
],[
	const struct rhashtable_params params = { 0 };
	void *ret;

	ret = rhashtable_lookup_get_insert_fast(NULL, NULL, params);
],[
	AC_DEFINE(HAVE_RHASHTABLE_LOOKUP_GET_INSERT_FAST, 1,
		[rhashtable_lookup_get_insert_fast() is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1010: -1- AC_DEFUN([LIBCFS_UUID_T], [
LB_CHECK_COMPILE([if 'uuid_t' exist],
uuid_t, [
	#include <linux/uuid.h>
],[
	uuid_t uuid;

	memset(uuid.b, 0, 16);
],[
	AC_DEFINE(HAVE_UUID_T, 1, ['uuid_t' exist])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1020: -1- AC_DEFUN([LIBCFS_HAVE_PROCESSOR_HEADER], [
LB_CHECK_LINUX_HEADER([linux/processor.h], [
	AC_DEFINE(HAVE_PROCESSOR_H, 1,
		[processor.h is present])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1030: -1- AC_DEFUN([LIBCFS_HAVE_WAIT_BIT_HEADER], [
LB_CHECK_LINUX_HEADER([linux/wait_bit.h], [
	AC_DEFINE(HAVE_WAIT_BIT_HEADER_H, 1,
		[wait_bit.h is present])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1050: -1- AC_DEFUN([LIBCFS_WAIT_QUEUE_TASK_LIST_RENAME], [
LB_CHECK_COMPILE([if linux wait_queue_head list_head is named head],
wait_queue_task_list, [
	#include <linux/wait.h>
],[
	wait_queue_head_t e;

	INIT_LIST_HEAD(&e.head);
],[
	AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_LIST, 1,
		[linux wait_queue_head_t list_head is name head])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1070: -1- AC_DEFUN([LIBCFS_WAIT_QUEUE_ENTRY], [
LB_CHECK_COMPILE([if 'wait_queue_entry_t' exists],
wait_queue_entry, [
	#include <linux/wait.h>
],[
	wait_queue_entry_t e;

	e.flags = 0;
],[
	AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY, 1,
		['wait_queue_entry_t' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1094: -1- AC_DEFUN([LIBCFS_NEW_KERNEL_WRITE], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'kernel_write' matches other read/write helpers],
kernel_write_match, [
	#include <linux/fs.h>
],[
	const void *buf = NULL;
	loff_t pos = 0;
	return kernel_write(NULL, buf, 0, &pos);
],[
	AC_DEFINE(HAVE_NEW_KERNEL_WRITE, 1,
		['kernel_write' aligns with read/write helpers])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1115: -1- AC_DEFUN([LIBCFS_MM_TOTALRAM_PAGES_FUNC], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if totalram_pages is a function],
totalram_pages, [
	#include <linux/mm.h>
],[
	totalram_pages_inc();
],[
	AC_DEFINE(HAVE_TOTALRAM_PAGES_AS_FUNC, 1,
		[if totalram_pages is a function])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1138: -1- AC_DEFUN([LIBCFS_NEW_KERNEL_READ], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if 'kernel_read()' has loff_t *pos as last parameter],
kernel_read, [
	#include <linux/fs.h>
	],[
	loff_t pos = 0;
	kernel_read(NULL, NULL, 0, &pos);
],[
	AC_DEFINE(HAVE_KERNEL_READ_LAST_POSP, 1,
		[kernel_read() signature ends with loff_t *pos])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1157: -1- AC_DEFUN([LIBCFS_DEFINE_TIMER], [
LB_CHECK_COMPILE([if DEFINE_TIMER takes only 2 arguments],
define_timer, [
	#include <linux/timer.h>
],[
	static DEFINE_TIMER(my_timer, NULL);
],[
	AC_DEFINE(HAVE_NEW_DEFINE_TIMER, 1,
		[DEFINE_TIMER uses only 2 arguements])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1175: -1- AC_DEFUN([LIBCFS_EXPORT_SAVE_STACK_TRACE_TSK], [
LB_CHECK_EXPORT([save_stack_trace_tsk], [arch/$SUBARCH/kernel/stacktrace.c],
	[AC_DEFINE(HAVE_SAVE_STACK_TRACE_TSK, 1,
		[save_stack_trace_tsk is exported])])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1194: -1- AC_DEFUN([LIBCFS_TIMER_SETUP], [
LB_CHECK_COMPILE([if setup_timer has been replaced with timer_setup],
timer_setup, [
	#include <linux/timer.h>
],[
	timer_setup(NULL, NULL, 0);
],[
	AC_DEFINE(HAVE_TIMER_SETUP, 1,
		[timer_setup has replaced setup_timer])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1215: -1- AC_DEFUN([LIBCFS_WAIT_VAR_EVENT], [
LB_CHECK_COMPILE([if 'wait_var_event' exist],
wait_var_event, [
	#ifdef HAVE_WAIT_BIT_HEADER_H
	#include <linux/wait_bit.h>
	#endif
	#include <linux/wait.h>
],[
	wake_up_var(NULL);
],[
	AC_DEFINE(HAVE_WAIT_VAR_EVENT, 1,
		['wait_var_event' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1236: -1- AC_DEFUN([LIBCFS_CLEAR_AND_WAKE_UP_BIT], [
LB_CHECK_COMPILE([if 'clear_and_wake_up_bit' exist],
clear_and_wake_up_bit, [
	#ifdef HAVE_WAIT_BIT_HEADER_H
	#include <linux/wait_bit.h>
	#endif
	#include <linux/wait.h>
],[
	clear_and_wake_up_bit(0, NULL);
],[
	AC_DEFINE(HAVE_CLEAR_AND_WAKE_UP_BIT, 1,
		['clear_and_wake_up_bit' is available])
])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1259: -1- AC_DEFUN([LIBCFS_HAVE_IOV_ITER_TYPE], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if iov_iter_type exists],
macro_iov_iter_type_exists, [
	#include <linux/uio.h>
],[
	struct iov_iter iter = { .type = ITER_KVEC };
	enum iter_type type = iov_iter_type(&iter);
	(void)type;
],[
	AC_DEFINE(HAVE_IOV_ITER_TYPE, 1,
		[if iov_iter_type exists])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1374: -1- AC_DEFUN([LIBCFS_PROG_LINUX], [
AC_MSG_NOTICE([LibCFS kernel checks
==============================================================================])
LIBCFS_CONFIG_PANIC_DUMPLOG

# 2.6.32
LIBCFS_STACKTRACE_OPS_HAVE_WALK_STACK
LC_SHRINKER_WANT_SHRINK_PTR
# 2.6.33
LIBCFS_SYSCTL_CTLNAME
# 2.6.36
LIBCFS_MODULE_LOCKING
# 2.6.38
LIBCFS_KSTRTOUL
# 2.6.39
LIBCFS_DUMP_TRACE_ADDRESS
# 2.6.40 fc15
LC_SHRINK_CONTROL
# 3.0
LIBCFS_STACKTRACE_WARNING
# 3.5
LIBCFS_PROCESS_NAMESPACE
LIBCFS_I_UID_READ
# 3.8
LIBCFS_HAVE_CRC32
LIBCFS_ENABLE_CRC32_ACCEL
# 3.10
LIBCFS_ENABLE_CRC32C_ACCEL
# 3.11
LIBCFS_KTIME_GET_TS64
# 3.12
LIBCFS_PREPARE_TO_WAIT_EVENT
LIBCFS_KERNEL_PARAM_OPS
LIBCFS_KTIME_ADD
LIBCFS_KTIME_AFTER
LIBCFS_KTIME_BEFORE
LIBCFS_KTIME_COMPARE
LIBCFS_SHRINKER_COUNT
# 3.15
LIBCFS_IOV_ITER_HAS_TYPE
# 3.17
LIBCFS_HLIST_ADD_AFTER
LIBCFS_TIMESPEC64
LIBCFS_KTIME_GET_NS
LIBCFS_KTIME_GET_REAL_TS64
LIBCFS_KTIME_GET_REAL_SECONDS
LIBCFS_KTIME_GET_REAL_NS
LIBCFS_KTIME_TO_TIMESPEC64
LIBCFS_TIMESPEC64_SUB
LIBCFS_TIMESPEC64_TO_KTIME
# 3.19
LIBCFS_KTIME_GET_SECONDS
# 4.0
LIBCFS_KTIME_MS_DELTA
# 4.1
LIBCFS_KERNEL_PARAM_LOCK
# 4.2
LIBCFS_HAVE_TOPOLOGY_SIBLING_CPUMASK
LIBCFS_FPU_API
# 4.4
LIBCFS_KSTRTOBOOL_FROM_USER
# 4.5
LIBCFS_CRYPTO_HASH_HELPERS
LIBCFS_EXPORT_KSET_FIND_OBJ
LIBCFS_RHASHTABLE_REPLACE
# 4.6
LIBCFS_BROKEN_HASH_64
LIBCFS_STACKTRACE_OPS_ADDRESS_RETURN_INT
LIBCFS_GET_USER_PAGES_6ARG
LIBCFS_STRINGHASH
# 4.7
LIBCFS_RHASHTABLE_INSERT_FAST
LIBCFS_RHASHTABLE_WALK_INIT_3ARG
# 4.8
LIBCFS_RHASHTABLE_LOOKUP
LIBCFS_RHLTABLE
LIBCFS_STACKTRACE_OPS
# 4.9
LIBCFS_GET_USER_PAGES_GUP_FLAGS
LIBCFS_RHASHTABLE_WALK_ENTER
# 4.10
LIBCFS_HOTPLUG_STATE_MACHINE
# 4.11
LIBCFS_RHASHTABLE_LOOKUP_GET_INSERT_FAST
LIBCFS_SCHED_HEADERS
LIBCFS_RHT_BUCKET_VAR
# 4.12
LIBCFS_HAVE_PROCESSOR_HEADER
LIBCFS_HAVE_WAIT_BIT_HEADER
LIBCFS_WAIT_QUEUE_TASK_LIST_RENAME
LIBCFS_UUID_T
# 4.13
LIBCFS_WAIT_QUEUE_ENTRY
# 4.14
LIBCFS_DEFINE_TIMER
LIBCFS_NEW_KERNEL_WRITE
LIBCFS_NEW_KERNEL_READ
LIBCFS_EXPORT_SAVE_STACK_TRACE_TSK
# 4.15
LIBCFS_TIMER_SETUP
# 4.16
LIBCFS_WAIT_VAR_EVENT
# 4.17
LIBCFS_CLEAR_AND_WAKE_UP_BIT
# 4.20
LIBCFS_HAVE_IOV_ITER_TYPE
# 5.0
LIBCFS_MM_TOTALRAM_PAGES_FUNC
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1382: -1- AC_DEFUN([LIBCFS_PATH_DEFAULTS], [
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1437: -1- AC_DEFUN([LIBCFS_CONFIGURE], [
AC_MSG_NOTICE([LibCFS core checks
==============================================================================])

# libcfs/libcfs/util/nidstrings.c
AC_CHECK_HEADERS([netdb.h asm/types.h endian.h])
AC_CHECK_FUNCS([gethostbyname])

# --------  Check for required packages  --------------

AC_MSG_NOTICE([LibCFS required packages checks
==============================================================================])

AC_MSG_CHECKING([whether to enable readline support])
AC_ARG_ENABLE(readline,
	AC_HELP_STRING([--disable-readline],
		[disable readline support]),
	[], [enable_readline="yes"])
AC_MSG_RESULT([$enable_readline])

LIBREADLINE=""
AS_IF([test "x$enable_readline" = xyes], [
	AC_CHECK_LIB([readline], [readline], [
		LIBREADLINE="-lreadline"
		AC_DEFINE(HAVE_LIBREADLINE, 1,
			[readline library is available])
	])
])
AC_SUBST(LIBREADLINE)

AC_MSG_CHECKING([whether to use libpthread for libcfs library])
AC_ARG_ENABLE([libpthread],
	AC_HELP_STRING([--disable-libpthread],
		[disable libpthread]),
	[], [enable_libpthread="yes"])
AC_MSG_RESULT([$enable_libpthread])

PTHREAD_LIBS=""
AS_IF([test "x$enable_libpthread" = xyes], [
	AC_CHECK_LIB([pthread], [pthread_create], [
		PTHREAD_LIBS="-lpthread"
		AC_DEFINE([HAVE_LIBPTHREAD], 1,
			[use libpthread for libcfs library])
	])
], [
	AC_MSG_WARN([Using libpthread for libcfs library is disabled explicitly])
])
AC_SUBST(PTHREAD_LIBS)
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1446: -1- AC_DEFUN([LIBCFS_CONDITIONALS], [
AM_CONDITIONAL(HAVE_CRC32, [test "x$have_crc32" = xyes])
AM_CONDITIONAL(NEED_PCLMULQDQ_CRC32,  [test "x$have_crc32" = xyes -a "x$enable_crc32_crypto" = xyes])
AM_CONDITIONAL(NEED_PCLMULQDQ_CRC32C, [test "x$enable_crc32c_crypto" = xyes])
])
m4trace:/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1467: -1- AC_DEFUN([LIBCFS_CONFIG_FILES], [
AC_CONFIG_FILES([
libcfs/Makefile
libcfs/autoMakefile
libcfs/autoconf/Makefile
libcfs/include/Makefile
libcfs/include/libcfs/Makefile
libcfs/include/libcfs/linux/Makefile
libcfs/include/libcfs/util/Makefile
libcfs/libcfs/Makefile
libcfs/libcfs/autoMakefile
libcfs/libcfs/linux/Makefile
libcfs/libcfs/util/Makefile
])
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:96: -1- AC_DEFUN([LT_INIT], [AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK
AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl
AC_BEFORE([$0], [LT_LANG])dnl
AC_BEFORE([$0], [LT_OUTPUT])dnl
AC_BEFORE([$0], [LTDL_INIT])dnl
m4_require([_LT_CHECK_BUILDDIR])dnl

dnl Autoconf doesn't catch unexpanded LT_ macros by default:
m4_pattern_forbid([^_?LT_[A-Z_]+$])dnl
m4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl
dnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4
dnl unless we require an AC_DEFUNed macro:
AC_REQUIRE([LTOPTIONS_VERSION])dnl
AC_REQUIRE([LTSUGAR_VERSION])dnl
AC_REQUIRE([LTVERSION_VERSION])dnl
AC_REQUIRE([LTOBSOLETE_VERSION])dnl
m4_require([_LT_PROG_LTMAIN])dnl

_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])

dnl Parse OPTIONS
_LT_SET_OPTIONS([$0], [$1])

# This can be used to rebuild libtool when needed
LIBTOOL_DEPS=$ltmain

# Always use our own libtool.
LIBTOOL='$(SHELL) $(top_builddir)/libtool'
AC_SUBST(LIBTOOL)dnl

_LT_SETUP

# Only expand once:
m4_define([LT_INIT])
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:99: -1- AU_DEFUN([AC_PROG_LIBTOOL], [m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:99: -1- AC_DEFUN([AC_PROG_LIBTOOL], [AC_DIAGNOSE([obsolete], [The macro `AC_PROG_LIBTOOL' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:100: -1- AU_DEFUN([AM_PROG_LIBTOOL], [m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:100: -1- AC_DEFUN([AM_PROG_LIBTOOL], [AC_DIAGNOSE([obsolete], [The macro `AM_PROG_LIBTOOL' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_INIT], [LT_INIT($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:704: -1- AC_DEFUN([LT_OUTPUT], [: ${CONFIG_LT=./config.lt}
AC_MSG_NOTICE([creating $CONFIG_LT])
_LT_GENERATED_FILE_INIT(["$CONFIG_LT"],
[# Run this file to recreate a libtool stub with the current configuration.])

cat >>"$CONFIG_LT" <<\_LTEOF
lt_cl_silent=false
exec AS_MESSAGE_LOG_FD>>config.log
{
  echo
  AS_BOX([Running $as_me.])
} >&AS_MESSAGE_LOG_FD

lt_cl_help="\
'$as_me' creates a local libtool stub from the current configuration,
for use in further configure time tests before the real libtool is
generated.

Usage: $[0] [[OPTIONS]]

  -h, --help      print this help, then exit
  -V, --version   print version number, then exit
  -q, --quiet     do not print progress messages
  -d, --debug     don't remove temporary files

Report bugs to <bug-libtool@gnu.org>."

lt_cl_version="\
m4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl
m4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])
configured by $[0], generated by m4_PACKAGE_STRING.

Copyright (C) 2011 Free Software Foundation, Inc.
This config.lt script is free software; the Free Software Foundation
gives unlimited permision to copy, distribute and modify it."

while test 0 != $[#]
do
  case $[1] in
    --version | --v* | -V )
      echo "$lt_cl_version"; exit 0 ;;
    --help | --h* | -h )
      echo "$lt_cl_help"; exit 0 ;;
    --debug | --d* | -d )
      debug=: ;;
    --quiet | --q* | --silent | --s* | -q )
      lt_cl_silent=: ;;

    -*) AC_MSG_ERROR([unrecognized option: $[1]
Try '$[0] --help' for more information.]) ;;

    *) AC_MSG_ERROR([unrecognized argument: $[1]
Try '$[0] --help' for more information.]) ;;
  esac
  shift
done

if $lt_cl_silent; then
  exec AS_MESSAGE_FD>/dev/null
fi
_LTEOF

cat >>"$CONFIG_LT" <<_LTEOF
_LT_OUTPUT_LIBTOOL_COMMANDS_INIT
_LTEOF

cat >>"$CONFIG_LT" <<\_LTEOF
AC_MSG_NOTICE([creating $ofile])
_LT_OUTPUT_LIBTOOL_COMMANDS
AS_EXIT(0)
_LTEOF
chmod +x "$CONFIG_LT"

# configure is writing to config.log, but config.lt does its own redirection,
# appending to config.log, which fails on DOS, as config.log is still kept
# open by configure.  Here we exec the FD to /dev/null, effectively closing
# config.log, so it can be properly (re)opened and appended to by config.lt.
lt_cl_success=:
test yes = "$silent" &&
  lt_config_lt_args="$lt_config_lt_args --quiet"
exec AS_MESSAGE_LOG_FD>/dev/null
$SHELL "$CONFIG_LT" $lt_config_lt_args || lt_cl_success=false
exec AS_MESSAGE_LOG_FD>>config.log
$lt_cl_success || AS_EXIT(1)
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:812: -1- AC_DEFUN([LT_SUPPORTED_TAG], [])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:836: -1- AC_DEFUN([LT_LANG], [AC_BEFORE([$0], [LT_OUTPUT])dnl
m4_case([$1],
  [C],			[_LT_LANG(C)],
  [C++],		[_LT_LANG(CXX)],
  [Go],			[_LT_LANG(GO)],
  [Java],		[_LT_LANG(GCJ)],
  [Fortran 77],		[_LT_LANG(F77)],
  [Fortran],		[_LT_LANG(FC)],
  [Windows Resource],	[_LT_LANG(RC)],
  [m4_ifdef([_LT_LANG_]$1[_CONFIG],
    [_LT_LANG($1)],
    [m4_fatal([$0: unsupported language: "$1"])])])dnl
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:915: -1- AU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:915: -1- AC_DEFUN([AC_LIBTOOL_CXX], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_CXX' is obsolete.
You should run autoupdate.])dnl
LT_LANG(C++)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:916: -1- AU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:916: -1- AC_DEFUN([AC_LIBTOOL_F77], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_F77' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Fortran 77)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:917: -1- AU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:917: -1- AC_DEFUN([AC_LIBTOOL_FC], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_FC' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Fortran)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:918: -1- AU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:918: -1- AC_DEFUN([AC_LIBTOOL_GCJ], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_GCJ' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Java)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:919: -1- AU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:919: -1- AC_DEFUN([AC_LIBTOOL_RC], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_RC' is obsolete.
You should run autoupdate.])dnl
LT_LANG(Windows Resource)])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1277: -1- AC_DEFUN([_LT_WITH_SYSROOT], [AC_MSG_CHECKING([for sysroot])
AC_ARG_WITH([sysroot],
[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],
  [Search for dependent libraries within DIR (or the compiler's sysroot
   if not specified).])],
[], [with_sysroot=no])

dnl lt_sysroot will always be passed unquoted.  We quote it here
dnl in case the user passed a directory name.
lt_sysroot=
case $with_sysroot in #(
 yes)
   if test yes = "$GCC"; then
     lt_sysroot=`$CC --print-sysroot 2>/dev/null`
   fi
   ;; #(
 /*)
   lt_sysroot=`echo "$with_sysroot" | sed -e "$sed_quote_subst"`
   ;; #(
 no|'')
   ;; #(
 *)
   AC_MSG_RESULT([$with_sysroot])
   AC_MSG_ERROR([The sysroot must be an absolute path.])
   ;;
esac

 AC_MSG_RESULT([${lt_sysroot:-no}])
_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl
[dependent libraries, and where our libraries should be installed.])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1617: -1- AC_DEFUN([_LT_COMPILER_OPTION], [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
m4_require([_LT_DECL_SED])dnl
AC_CACHE_CHECK([$1], [$2],
  [$2=no
   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])
   echo "$lt_simple_compile_test_code" > conftest.$ac_ext
   lt_compiler_flag="$3"  ## exclude from sc_useless_quotes_in_assignment
   # Insert the option either (1) after the last *FLAGS variable, or
   # (2) before a word containing "conftest.", or (3) at the end.
   # Note that $ac_compile itself does not contain backslashes and begins
   # with a dollar sign (not a hyphen), so the echo should work correctly.
   # The option is referenced via a variable to avoid confusing sed.
   lt_compile=`echo "$ac_compile" | $SED \
   -e 's:.*FLAGS}\{0,1\} :&$lt_compiler_flag :; t' \
   -e 's: [[^ ]]*conftest\.: $lt_compiler_flag&:; t' \
   -e 's:$: $lt_compiler_flag:'`
   (eval echo "\"\$as_me:$LINENO: $lt_compile\"" >&AS_MESSAGE_LOG_FD)
   (eval "$lt_compile" 2>conftest.err)
   ac_status=$?
   cat conftest.err >&AS_MESSAGE_LOG_FD
   echo "$as_me:$LINENO: \$? = $ac_status" >&AS_MESSAGE_LOG_FD
   if (exit $ac_status) && test -s "$ac_outfile"; then
     # The compiler can only warn and ignore the option if not recognized
     # So say no if there are warnings other than the usual output.
     $ECHO "$_lt_compiler_boilerplate" | $SED '/^$/d' >conftest.exp
     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then
       $2=yes
     fi
   fi
   $RM conftest*
])

if test yes = "[$]$2"; then
    m4_if([$5], , :, [$5])
else
    m4_if([$6], , :, [$6])
fi
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1620: -1- AU_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [m4_if($#, 0, [_LT_COMPILER_OPTION], [_LT_COMPILER_OPTION($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1620: -1- AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_COMPILER_OPTION' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_COMPILER_OPTION], [_LT_COMPILER_OPTION($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1661: -1- AC_DEFUN([_LT_LINKER_OPTION], [m4_require([_LT_FILEUTILS_DEFAULTS])dnl
m4_require([_LT_DECL_SED])dnl
AC_CACHE_CHECK([$1], [$2],
  [$2=no
   save_LDFLAGS=$LDFLAGS
   LDFLAGS="$LDFLAGS $3"
   echo "$lt_simple_link_test_code" > conftest.$ac_ext
   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then
     # The linker can only warn and ignore the option if not recognized
     # So say no if there are warnings
     if test -s conftest.err; then
       # Append any errors to the config.log.
       cat conftest.err 1>&AS_MESSAGE_LOG_FD
       $ECHO "$_lt_linker_boilerplate" | $SED '/^$/d' > conftest.exp
       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2
       if diff conftest.exp conftest.er2 >/dev/null; then
         $2=yes
       fi
     else
       $2=yes
     fi
   fi
   $RM -r conftest*
   LDFLAGS=$save_LDFLAGS
])

if test yes = "[$]$2"; then
    m4_if([$4], , :, [$4])
else
    m4_if([$5], , :, [$5])
fi
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1664: -1- AU_DEFUN([AC_LIBTOOL_LINKER_OPTION], [m4_if($#, 0, [_LT_LINKER_OPTION], [_LT_LINKER_OPTION($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1664: -1- AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_LINKER_OPTION' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_LINKER_OPTION], [_LT_LINKER_OPTION($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1807: -1- AC_DEFUN([LT_CMD_MAX_LEN], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
# find the maximum length of command line arguments
AC_MSG_CHECKING([the maximum length of command line arguments])
AC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl
  i=0
  teststring=ABCD

  case $build_os in
  msdosdjgpp*)
    # On DJGPP, this test can blow up pretty badly due to problems in libc
    # (any single argument exceeding 2000 bytes causes a buffer overrun
    # during glob expansion).  Even if it were fixed, the result of this
    # check would be larger than it should be.
    lt_cv_sys_max_cmd_len=12288;    # 12K is about right
    ;;

  gnu*)
    # Under GNU Hurd, this test is not required because there is
    # no limit to the length of command line arguments.
    # Libtool will interpret -1 as no limit whatsoever
    lt_cv_sys_max_cmd_len=-1;
    ;;

  cygwin* | mingw* | cegcc*)
    # On Win9x/ME, this test blows up -- it succeeds, but takes
    # about 5 minutes as the teststring grows exponentially.
    # Worse, since 9x/ME are not pre-emptively multitasking,
    # you end up with a "frozen" computer, even though with patience
    # the test eventually succeeds (with a max line length of 256k).
    # Instead, let's just punt: use the minimum linelength reported by
    # all of the supported platforms: 8192 (on NT/2K/XP).
    lt_cv_sys_max_cmd_len=8192;
    ;;

  mint*)
    # On MiNT this can take a long time and run out of memory.
    lt_cv_sys_max_cmd_len=8192;
    ;;

  amigaos*)
    # On AmigaOS with pdksh, this test takes hours, literally.
    # So we just punt and use a minimum line length of 8192.
    lt_cv_sys_max_cmd_len=8192;
    ;;

  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)
    # This has been around since 386BSD, at least.  Likely further.
    if test -x /sbin/sysctl; then
      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`
    elif test -x /usr/sbin/sysctl; then
      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`
    else
      lt_cv_sys_max_cmd_len=65536	# usable default for all BSDs
    fi
    # And add a safety zone
    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
    ;;

  interix*)
    # We know the value 262144 and hardcode it with a safety zone (like BSD)
    lt_cv_sys_max_cmd_len=196608
    ;;

  os2*)
    # The test takes a long time on OS/2.
    lt_cv_sys_max_cmd_len=8192
    ;;

  osf*)
    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure
    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not
    # nice to cause kernel panics so lets avoid the loop below.
    # First set a reasonable default.
    lt_cv_sys_max_cmd_len=16384
    #
    if test -x /sbin/sysconfig; then
      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in
        *1*) lt_cv_sys_max_cmd_len=-1 ;;
      esac
    fi
    ;;
  sco3.2v5*)
    lt_cv_sys_max_cmd_len=102400
    ;;
  sysv5* | sco5v6* | sysv4.2uw2*)
    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`
    if test -n "$kargmax"; then
      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[	 ]]//'`
    else
      lt_cv_sys_max_cmd_len=32768
    fi
    ;;
  *)
    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`
    if test -n "$lt_cv_sys_max_cmd_len" && \
       test undefined != "$lt_cv_sys_max_cmd_len"; then
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 4`
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \* 3`
    else
      # Make teststring a little bigger before we do anything with it.
      # a 1K string should be a reasonable start.
      for i in 1 2 3 4 5 6 7 8; do
        teststring=$teststring$teststring
      done
      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}
      # If test is not a shell built-in, we'll probably end up computing a
      # maximum length that is only half of the actual maximum length, but
      # we can't tell.
      while { test X`env echo "$teststring$teststring" 2>/dev/null` \
	         = "X$teststring$teststring"; } >/dev/null 2>&1 &&
	      test 17 != "$i" # 1/2 MB should be enough
      do
        i=`expr $i + 1`
        teststring=$teststring$teststring
      done
      # Only check the string length outside the loop.
      lt_cv_sys_max_cmd_len=`expr "X$teststring" : ".*" 2>&1`
      teststring=
      # Add a significant safety factor because C++ compilers can tack on
      # massive amounts of additional arguments before passing them to the
      # linker.  It appears as though 1/2 is a usable value.
      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \/ 2`
    fi
    ;;
  esac
])
if test -n "$lt_cv_sys_max_cmd_len"; then
  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)
else
  AC_MSG_RESULT(none)
fi
max_cmd_len=$lt_cv_sys_max_cmd_len
_LT_DECL([], [max_cmd_len], [0],
    [What is the maximum length of a command?])
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1810: -1- AU_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [m4_if($#, 0, [LT_CMD_MAX_LEN], [LT_CMD_MAX_LEN($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:1810: -1- AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_SYS_MAX_CMD_LEN' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_CMD_MAX_LEN], [LT_CMD_MAX_LEN($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:2043: -1- AC_DEFUN([LT_SYS_DLOPEN_SELF], [m4_require([_LT_HEADER_DLFCN])dnl
if test yes != "$enable_dlopen"; then
  enable_dlopen=unknown
  enable_dlopen_self=unknown
  enable_dlopen_self_static=unknown
else
  lt_cv_dlopen=no
  lt_cv_dlopen_libs=

  case $host_os in
  beos*)
    lt_cv_dlopen=load_add_on
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=yes
    ;;

  mingw* | pw32* | cegcc*)
    lt_cv_dlopen=LoadLibrary
    lt_cv_dlopen_libs=
    ;;

  cygwin*)
    lt_cv_dlopen=dlopen
    lt_cv_dlopen_libs=
    ;;

  darwin*)
    # if libdl is installed we need to link against it
    AC_CHECK_LIB([dl], [dlopen],
		[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[
    lt_cv_dlopen=dyld
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=yes
    ])
    ;;

  tpf*)
    # Don't try to run any link tests for TPF.  We know it's impossible
    # because TPF is a cross-compiler, and we know how we open DSOs.
    lt_cv_dlopen=dlopen
    lt_cv_dlopen_libs=
    lt_cv_dlopen_self=no
    ;;

  *)
    AC_CHECK_FUNC([shl_load],
	  [lt_cv_dlopen=shl_load],
      [AC_CHECK_LIB([dld], [shl_load],
	    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],
	[AC_CHECK_FUNC([dlopen],
	      [lt_cv_dlopen=dlopen],
	  [AC_CHECK_LIB([dl], [dlopen],
		[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],
	    [AC_CHECK_LIB([svld], [dlopen],
		  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],
	      [AC_CHECK_LIB([dld], [dld_link],
		    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])
	      ])
	    ])
	  ])
	])
      ])
    ;;
  esac

  if test no = "$lt_cv_dlopen"; then
    enable_dlopen=no
  else
    enable_dlopen=yes
  fi

  case $lt_cv_dlopen in
  dlopen)
    save_CPPFLAGS=$CPPFLAGS
    test yes = "$ac_cv_header_dlfcn_h" && CPPFLAGS="$CPPFLAGS -DHAVE_DLFCN_H"

    save_LDFLAGS=$LDFLAGS
    wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $export_dynamic_flag_spec\"

    save_LIBS=$LIBS
    LIBS="$lt_cv_dlopen_libs $LIBS"

    AC_CACHE_CHECK([whether a program can dlopen itself],
	  lt_cv_dlopen_self, [dnl
	  _LT_TRY_DLOPEN_SELF(
	    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,
	    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)
    ])

    if test yes = "$lt_cv_dlopen_self"; then
      wl=$lt_prog_compiler_wl eval LDFLAGS=\"\$LDFLAGS $lt_prog_compiler_static\"
      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],
	  lt_cv_dlopen_self_static, [dnl
	  _LT_TRY_DLOPEN_SELF(
	    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,
	    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)
      ])
    fi

    CPPFLAGS=$save_CPPFLAGS
    LDFLAGS=$save_LDFLAGS
    LIBS=$save_LIBS
    ;;
  esac

  case $lt_cv_dlopen_self in
  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;
  *) enable_dlopen_self=unknown ;;
  esac

  case $lt_cv_dlopen_self_static in
  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;
  *) enable_dlopen_self_static=unknown ;;
  esac
fi
_LT_DECL([dlopen_support], [enable_dlopen], [0],
	 [Whether dlopen is supported])
_LT_DECL([dlopen_self], [enable_dlopen_self], [0],
	 [Whether dlopen of programs is supported])
_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],
	 [Whether dlopen of statically linked programs is supported])
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:2046: -1- AU_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [m4_if($#, 0, [LT_SYS_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:2046: -1- AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_DLOPEN_SELF' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_SYS_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3214: -1- AC_DEFUN([_LT_PATH_TOOL_PREFIX], [m4_require([_LT_DECL_EGREP])dnl
AC_MSG_CHECKING([for $1])
AC_CACHE_VAL(lt_cv_path_MAGIC_CMD,
[case $MAGIC_CMD in
[[\\/*] |  ?:[\\/]*])
  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.
  ;;
*)
  lt_save_MAGIC_CMD=$MAGIC_CMD
  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
dnl $ac_dummy forces splitting on constant user-supplied paths.
dnl POSIX.2 word splitting is done only on the output of word expansions,
dnl not every word.  This closes a longstanding sh security hole.
  ac_dummy="m4_if([$2], , $PATH, [$2])"
  for ac_dir in $ac_dummy; do
    IFS=$lt_save_ifs
    test -z "$ac_dir" && ac_dir=.
    if test -f "$ac_dir/$1"; then
      lt_cv_path_MAGIC_CMD=$ac_dir/"$1"
      if test -n "$file_magic_test_file"; then
	case $deplibs_check_method in
	"file_magic "*)
	  file_magic_regex=`expr "$deplibs_check_method" : "file_magic \(.*\)"`
	  MAGIC_CMD=$lt_cv_path_MAGIC_CMD
	  if eval $file_magic_cmd \$file_magic_test_file 2> /dev/null |
	    $EGREP "$file_magic_regex" > /dev/null; then
	    :
	  else
	    cat <<_LT_EOF 1>&2

*** Warning: the command libtool uses to detect shared libraries,
*** $file_magic_cmd, produces output that libtool cannot recognize.
*** The result is that libtool may fail to recognize shared libraries
*** as such.  This will affect the creation of libtool libraries that
*** depend on shared libraries, but programs linked with such libtool
*** libraries will work regardless of this problem.  Nevertheless, you
*** may want to report the problem to your system manager and/or to
*** bug-libtool@gnu.org

_LT_EOF
	  fi ;;
	esac
      fi
      break
    fi
  done
  IFS=$lt_save_ifs
  MAGIC_CMD=$lt_save_MAGIC_CMD
  ;;
esac])
MAGIC_CMD=$lt_cv_path_MAGIC_CMD
if test -n "$MAGIC_CMD"; then
  AC_MSG_RESULT($MAGIC_CMD)
else
  AC_MSG_RESULT(no)
fi
_LT_DECL([], [MAGIC_CMD], [0],
	 [Used to examine libraries when file_magic_cmd begins with "file"])dnl
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3217: -1- AU_DEFUN([AC_PATH_TOOL_PREFIX], [m4_if($#, 0, [_LT_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3217: -1- AC_DEFUN([AC_PATH_TOOL_PREFIX], [AC_DIAGNOSE([obsolete], [The macro `AC_PATH_TOOL_PREFIX' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [_LT_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3326: -1- AC_DEFUN([LT_PATH_LD], [AC_REQUIRE([AC_PROG_CC])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl
AC_REQUIRE([AC_CANONICAL_BUILD])dnl
m4_require([_LT_DECL_SED])dnl
m4_require([_LT_DECL_EGREP])dnl
m4_require([_LT_PROG_ECHO_BACKSLASH])dnl

AC_ARG_WITH([gnu-ld],
    [AS_HELP_STRING([--with-gnu-ld],
	[assume the C compiler uses GNU ld @<:@default=no@:>@])],
    [test no = "$withval" || with_gnu_ld=yes],
    [with_gnu_ld=no])dnl

ac_prog=ld
if test yes = "$GCC"; then
  # Check if gcc -print-prog-name=ld gives a path.
  AC_MSG_CHECKING([for ld used by $CC])
  case $host in
  *-*-mingw*)
    # gcc leaves a trailing carriage return, which upsets mingw
    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\015'` ;;
  *)
    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;
  esac
  case $ac_prog in
    # Accept absolute paths.
    [[\\/]]* | ?:[[\\/]]*)
      re_direlt='/[[^/]][[^/]]*/\.\./'
      # Canonicalize the pathname of ld
      ac_prog=`$ECHO "$ac_prog"| $SED 's%\\\\%/%g'`
      while $ECHO "$ac_prog" | $GREP "$re_direlt" > /dev/null 2>&1; do
	ac_prog=`$ECHO $ac_prog| $SED "s%$re_direlt%/%"`
      done
      test -z "$LD" && LD=$ac_prog
      ;;
  "")
    # If it fails, then pretend we aren't using GCC.
    ac_prog=ld
    ;;
  *)
    # If it is relative, then search for the first ld in PATH.
    with_gnu_ld=unknown
    ;;
  esac
elif test yes = "$with_gnu_ld"; then
  AC_MSG_CHECKING([for GNU ld])
else
  AC_MSG_CHECKING([for non-GNU ld])
fi
AC_CACHE_VAL(lt_cv_path_LD,
[if test -z "$LD"; then
  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
  for ac_dir in $PATH; do
    IFS=$lt_save_ifs
    test -z "$ac_dir" && ac_dir=.
    if test -f "$ac_dir/$ac_prog" || test -f "$ac_dir/$ac_prog$ac_exeext"; then
      lt_cv_path_LD=$ac_dir/$ac_prog
      # Check to see if the program is GNU ld.  I'd rather use --version,
      # but apparently some variants of GNU ld only accept -v.
      # Break only if it was the GNU/non-GNU ld that we prefer.
      case `"$lt_cv_path_LD" -v 2>&1 </dev/null` in
      *GNU* | *'with BFD'*)
	test no != "$with_gnu_ld" && break
	;;
      *)
	test yes != "$with_gnu_ld" && break
	;;
      esac
    fi
  done
  IFS=$lt_save_ifs
else
  lt_cv_path_LD=$LD # Let the user override the test with a path.
fi])
LD=$lt_cv_path_LD
if test -n "$LD"; then
  AC_MSG_RESULT($LD)
else
  AC_MSG_RESULT(no)
fi
test -z "$LD" && AC_MSG_ERROR([no acceptable ld found in \$PATH])
_LT_PATH_LD_GNU
AC_SUBST([LD])

_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3329: -1- AU_DEFUN([AM_PROG_LD], [m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3329: -1- AC_DEFUN([AM_PROG_LD], [AC_DIAGNOSE([obsolete], [The macro `AM_PROG_LD' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3330: -1- AU_DEFUN([AC_PROG_LD], [m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3330: -1- AC_DEFUN([AC_PROG_LD], [AC_DIAGNOSE([obsolete], [The macro `AC_PROG_LD' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_LD], [LT_PATH_LD($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3751: -1- AC_DEFUN([LT_PATH_NM], [AC_REQUIRE([AC_PROG_CC])dnl
AC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,
[if test -n "$NM"; then
  # Let the user override the test.
  lt_cv_path_NM=$NM
else
  lt_nm_to_check=${ac_tool_prefix}nm
  if test -n "$ac_tool_prefix" && test "$build" = "$host"; then
    lt_nm_to_check="$lt_nm_to_check nm"
  fi
  for lt_tmp_nm in $lt_nm_to_check; do
    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR
    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do
      IFS=$lt_save_ifs
      test -z "$ac_dir" && ac_dir=.
      tmp_nm=$ac_dir/$lt_tmp_nm
      if test -f "$tmp_nm" || test -f "$tmp_nm$ac_exeext"; then
	# Check to see if the nm accepts a BSD-compat flag.
	# Adding the 'sed 1q' prevents false positives on HP-UX, which says:
	#   nm: unknown option "B" ignored
	# Tru64's nm complains that /dev/null is an invalid object file
	# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty
	case $build_os in
	mingw*) lt_bad_file=conftest.nm/nofile ;;
	*) lt_bad_file=/dev/null ;;
	esac
	case `"$tmp_nm" -B $lt_bad_file 2>&1 | sed '1q'` in
	*$lt_bad_file* | *'Invalid file or object type'*)
	  lt_cv_path_NM="$tmp_nm -B"
	  break 2
	  ;;
	*)
	  case `"$tmp_nm" -p /dev/null 2>&1 | sed '1q'` in
	  */dev/null*)
	    lt_cv_path_NM="$tmp_nm -p"
	    break 2
	    ;;
	  *)
	    lt_cv_path_NM=${lt_cv_path_NM="$tmp_nm"} # keep the first match, but
	    continue # so that we can try to find one that supports BSD flags
	    ;;
	  esac
	  ;;
	esac
      fi
    done
    IFS=$lt_save_ifs
  done
  : ${lt_cv_path_NM=no}
fi])
if test no != "$lt_cv_path_NM"; then
  NM=$lt_cv_path_NM
else
  # Didn't find any BSD compatible name lister, look for dumpbin.
  if test -n "$DUMPBIN"; then :
    # Let the user override the test.
  else
    AC_CHECK_TOOLS(DUMPBIN, [dumpbin "link -dump"], :)
    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in
    *COFF*)
      DUMPBIN="$DUMPBIN -symbols -headers"
      ;;
    *)
      DUMPBIN=:
      ;;
    esac
  fi
  AC_SUBST([DUMPBIN])
  if test : != "$DUMPBIN"; then
    NM=$DUMPBIN
  fi
fi
test -z "$NM" && NM=nm
AC_SUBST([NM])
_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl

AC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],
  [lt_cv_nm_interface="BSD nm"
  echo "int some_variable = 0;" > conftest.$ac_ext
  (eval echo "\"\$as_me:$LINENO: $ac_compile\"" >&AS_MESSAGE_LOG_FD)
  (eval "$ac_compile" 2>conftest.err)
  cat conftest.err >&AS_MESSAGE_LOG_FD
  (eval echo "\"\$as_me:$LINENO: $NM \\\"conftest.$ac_objext\\\"\"" >&AS_MESSAGE_LOG_FD)
  (eval "$NM \"conftest.$ac_objext\"" 2>conftest.err > conftest.out)
  cat conftest.err >&AS_MESSAGE_LOG_FD
  (eval echo "\"\$as_me:$LINENO: output\"" >&AS_MESSAGE_LOG_FD)
  cat conftest.out >&AS_MESSAGE_LOG_FD
  if $GREP 'External.*some_variable' conftest.out > /dev/null; then
    lt_cv_nm_interface="MS dumpbin"
  fi
  rm -f conftest*])
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3754: -1- AU_DEFUN([AM_PROG_NM], [m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3754: -1- AC_DEFUN([AM_PROG_NM], [AC_DIAGNOSE([obsolete], [The macro `AM_PROG_NM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3755: -1- AU_DEFUN([AC_PROG_NM], [m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3755: -1- AC_DEFUN([AC_PROG_NM], [AC_DIAGNOSE([obsolete], [The macro `AC_PROG_NM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PATH_NM], [LT_PATH_NM($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3834: -1- AC_DEFUN([_LT_DLL_DEF_P], [dnl
  test DEF = "`$SED -n dnl
    -e '\''s/^[[	 ]]*//'\'' dnl Strip leading whitespace
    -e '\''/^\(;.*\)*$/d'\'' dnl      Delete empty lines and comments
    -e '\''s/^\(EXPORTS\|LIBRARY\)\([[	 ]].*\)*$/DEF/p'\'' dnl
    -e q dnl                          Only consider the first "real" line
    $1`" dnl
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3856: -1- AC_DEFUN([LT_LIB_M], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
LIBM=
case $host in
*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)
  # These system don't have libm, or don't need it
  ;;
*-ncr-sysv4.3*)
  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)
  AC_CHECK_LIB(m, cos, LIBM="$LIBM -lm")
  ;;
*)
  AC_CHECK_LIB(m, cos, LIBM=-lm)
  ;;
esac
AC_SUBST([LIBM])
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3859: -1- AU_DEFUN([AC_CHECK_LIBM], [m4_if($#, 0, [LT_LIB_M], [LT_LIB_M($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:3859: -1- AC_DEFUN([AC_CHECK_LIBM], [AC_DIAGNOSE([obsolete], [The macro `AC_CHECK_LIBM' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_LIB_M], [LT_LIB_M($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8128: -1- AC_DEFUN([LT_PROG_GCJ], [m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],
  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],
    [AC_CHECK_TOOL(GCJ, gcj,)
      test set = "${GCJFLAGS+set}" || GCJFLAGS="-g -O2"
      AC_SUBST(GCJFLAGS)])])[]dnl
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8131: -1- AU_DEFUN([LT_AC_PROG_GCJ], [m4_if($#, 0, [LT_PROG_GCJ], [LT_PROG_GCJ($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8131: -1- AC_DEFUN([LT_AC_PROG_GCJ], [AC_DIAGNOSE([obsolete], [The macro `LT_AC_PROG_GCJ' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PROG_GCJ], [LT_PROG_GCJ($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8140: -1- AC_DEFUN([LT_PROG_GO], [AC_CHECK_TOOL(GOC, gccgo,)
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8147: -1- AC_DEFUN([LT_PROG_RC], [AC_CHECK_TOOL(RC, windres,)
])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8150: -1- AU_DEFUN([LT_AC_PROG_RC], [m4_if($#, 0, [LT_PROG_RC], [LT_PROG_RC($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8150: -1- AC_DEFUN([LT_AC_PROG_RC], [AC_DIAGNOSE([obsolete], [The macro `LT_AC_PROG_RC' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [LT_PROG_RC], [LT_PROG_RC($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8270: -1- AU_DEFUN([LT_AC_PROG_SED], [m4_if($#, 0, [AC_PROG_SED], [AC_PROG_SED($@)])])
m4trace:/Users/crb002/github/lustre-release/config/libtool.m4:8270: -1- AC_DEFUN([LT_AC_PROG_SED], [AC_DIAGNOSE([obsolete], [The macro `LT_AC_PROG_SED' is obsolete.
You should run autoupdate.])dnl
m4_if($#, 0, [AC_PROG_SED], [AC_PROG_SED($@)])])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:14: -1- AC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:118: -1- AU_DEFUN([AC_LIBTOOL_DLOPEN], [_LT_SET_OPTION([LT_INIT], [dlopen])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'dlopen' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:118: -1- AC_DEFUN([AC_LIBTOOL_DLOPEN], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_DLOPEN' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [dlopen])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'dlopen' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:154: -1- AU_DEFUN([AC_LIBTOOL_WIN32_DLL], [AC_REQUIRE([AC_CANONICAL_HOST])dnl
_LT_SET_OPTION([LT_INIT], [win32-dll])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'win32-dll' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:154: -1- AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_WIN32_DLL' is obsolete.
You should run autoupdate.])dnl
AC_REQUIRE([AC_CANONICAL_HOST])dnl
_LT_SET_OPTION([LT_INIT], [win32-dll])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'win32-dll' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:199: -1- AC_DEFUN([AC_ENABLE_SHARED], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:203: -1- AC_DEFUN([AC_DISABLE_SHARED], [_LT_SET_OPTION([LT_INIT], [disable-shared])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:205: -1- AU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:205: -1- AC_DEFUN([AM_ENABLE_SHARED], [AC_DIAGNOSE([obsolete], [The macro `AM_ENABLE_SHARED' is obsolete.
You should run autoupdate.])dnl
AC_ENABLE_SHARED($@)])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:206: -1- AU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:206: -1- AC_DEFUN([AM_DISABLE_SHARED], [AC_DIAGNOSE([obsolete], [The macro `AM_DISABLE_SHARED' is obsolete.
You should run autoupdate.])dnl
AC_DISABLE_SHARED($@)])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:253: -1- AC_DEFUN([AC_ENABLE_STATIC], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:257: -1- AC_DEFUN([AC_DISABLE_STATIC], [_LT_SET_OPTION([LT_INIT], [disable-static])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:259: -1- AU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:259: -1- AC_DEFUN([AM_ENABLE_STATIC], [AC_DIAGNOSE([obsolete], [The macro `AM_ENABLE_STATIC' is obsolete.
You should run autoupdate.])dnl
AC_ENABLE_STATIC($@)])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:260: -1- AU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:260: -1- AC_DEFUN([AM_DISABLE_STATIC], [AC_DIAGNOSE([obsolete], [The macro `AM_DISABLE_STATIC' is obsolete.
You should run autoupdate.])dnl
AC_DISABLE_STATIC($@)])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:310: -1- AU_DEFUN([AC_ENABLE_FAST_INSTALL], [_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'fast-install' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:310: -1- AC_DEFUN([AC_ENABLE_FAST_INSTALL], [AC_DIAGNOSE([obsolete], [The macro `AC_ENABLE_FAST_INSTALL' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'fast-install' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:317: -1- AU_DEFUN([AC_DISABLE_FAST_INSTALL], [_LT_SET_OPTION([LT_INIT], [disable-fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'disable-fast-install' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:317: -1- AC_DEFUN([AC_DISABLE_FAST_INSTALL], [AC_DIAGNOSE([obsolete], [The macro `AC_DISABLE_FAST_INSTALL' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [disable-fast-install])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you put
the 'disable-fast-install' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:416: -1- AU_DEFUN([AC_LIBTOOL_PICMODE], [_LT_SET_OPTION([LT_INIT], [pic-only])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'pic-only' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltoptions.m4:416: -1- AC_DEFUN([AC_LIBTOOL_PICMODE], [AC_DIAGNOSE([obsolete], [The macro `AC_LIBTOOL_PICMODE' is obsolete.
You should run autoupdate.])dnl
_LT_SET_OPTION([LT_INIT], [pic-only])
AC_DIAGNOSE([obsolete],
[$0: Remove this warning and the call to _LT_SET_OPTION when you
put the 'pic-only' option into LT_INIT's first parameter.])
])
m4trace:/Users/crb002/github/lustre-release/config/ltsugar.m4:14: -1- AC_DEFUN([LTSUGAR_VERSION], [m4_if([0.1])])
m4trace:/Users/crb002/github/lustre-release/config/ltversion.m4:23: -1- AC_DEFUN([LTVERSION_VERSION], [macro_version='2.4.6'
macro_revision='2.4.6'
_LT_DECL(, macro_version, 0, [Which release of libtool.m4 was used?])
_LT_DECL(, macro_revision, 0)
])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:37: -1- AC_DEFUN([LTOBSOLETE_VERSION], [m4_if([1])])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:41: -1- AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:42: -1- AC_DEFUN([_LT_AC_SHELL_INIT])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:43: -1- AC_DEFUN([_LT_AC_SYS_LIBPATH_AIX])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:45: -1- AC_DEFUN([_LT_AC_TAGVAR])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:46: -1- AC_DEFUN([AC_LTDL_ENABLE_INSTALL])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:47: -1- AC_DEFUN([AC_LTDL_PREOPEN])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:48: -1- AC_DEFUN([_LT_AC_SYS_COMPILER])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:49: -1- AC_DEFUN([_LT_AC_LOCK])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:50: -1- AC_DEFUN([AC_LIBTOOL_SYS_OLD_ARCHIVE])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:51: -1- AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:52: -1- AC_DEFUN([AC_LIBTOOL_PROG_CC_C_O])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:53: -1- AC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:54: -1- AC_DEFUN([AC_LIBTOOL_OBJDIR])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:55: -1- AC_DEFUN([AC_LTDL_OBJDIR])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:56: -1- AC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:57: -1- AC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:58: -1- AC_DEFUN([AC_PATH_MAGIC])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:59: -1- AC_DEFUN([AC_PROG_LD_GNU])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:60: -1- AC_DEFUN([AC_PROG_LD_RELOAD_FLAG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:61: -1- AC_DEFUN([AC_DEPLIBS_CHECK_METHOD])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:62: -1- AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:63: -1- AC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:64: -1- AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:65: -1- AC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:66: -1- AC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:67: -1- AC_DEFUN([LT_AC_PROG_EGREP])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:72: -1- AC_DEFUN([_AC_PROG_LIBTOOL])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:73: -1- AC_DEFUN([AC_LIBTOOL_SETUP])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:74: -1- AC_DEFUN([_LT_AC_CHECK_DLFCN])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:75: -1- AC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:76: -1- AC_DEFUN([_LT_AC_TAGCONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:78: -1- AC_DEFUN([_LT_AC_LANG_CXX])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:79: -1- AC_DEFUN([_LT_AC_LANG_F77])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:80: -1- AC_DEFUN([_LT_AC_LANG_GCJ])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:81: -1- AC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:82: -1- AC_DEFUN([_LT_AC_LANG_C_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:83: -1- AC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:84: -1- AC_DEFUN([_LT_AC_LANG_CXX_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:85: -1- AC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:86: -1- AC_DEFUN([_LT_AC_LANG_F77_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:87: -1- AC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:88: -1- AC_DEFUN([_LT_AC_LANG_GCJ_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:89: -1- AC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:90: -1- AC_DEFUN([_LT_AC_LANG_RC_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:91: -1- AC_DEFUN([AC_LIBTOOL_CONFIG])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:92: -1- AC_DEFUN([_LT_AC_FILE_LTDLL_C])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:94: -1- AC_DEFUN([_LT_AC_PROG_CXXCPP])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:97: -1- AC_DEFUN([_LT_PROG_F77])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:98: -1- AC_DEFUN([_LT_PROG_FC])
m4trace:/Users/crb002/github/lustre-release/config/lt~obsolete.m4:99: -1- AC_DEFUN([_LT_PROG_CXX])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:96: -1- AC_DEFUN([LDISKFS_LINUX_SERIES], [
AC_MSG_CHECKING([which ldiskfs series to use])
case x$LDISKFS_SERIES in
	x)			# not set
		;;
	*.series)		# set externally
		;;
	*) LDISKFS_SERIES=
esac
AS_IF([test -z "$LDISKFS_SERIES"], [
AS_IF([test x$RHEL_KERNEL = xyes], [
	case $RHEL_RELEASE_NO in
	80)     LDISKFS_SERIES="4.18-rhel8.series"      ;;
	77)	LDISKFS_SERIES="3.10-rhel7.7.series"	;;
	76)	LDISKFS_SERIES="3.10-rhel7.6.series"	;;
	75)	LDISKFS_SERIES="3.10-rhel7.5.series"	;;
	74)	LDISKFS_SERIES="3.10-rhel7.4.series"	;;
	73)	LDISKFS_SERIES="3.10-rhel7.3.series"	;;
	72)	LDISKFS_SERIES="3.10-rhel7.2.series"	;;
	71)	LDISKFS_SERIES="3.10-rhel7.series"	;;
	69)	LDISKFS_SERIES="2.6-rhel6.9.series"	;;
	68)	LDISKFS_SERIES="2.6-rhel6.8.series"	;;
	67)	LDISKFS_SERIES="2.6-rhel6.7.series"	;;
	66)	LDISKFS_SERIES="2.6-rhel6.6.series"	;;
	65)	LDISKFS_SERIES="2.6-rhel6.5.series"	;;
	64)	LDISKFS_SERIES="2.6-rhel6.4.series"	;;
	6[0-3])	LDISKFS_SERIES="2.6-rhel6.series"	;;
	esac
], [test x$SUSE_KERNEL = xyes], [
	AS_VERSION_COMPARE([$LINUXRELEASE],[4.4.82],[
	AS_VERSION_COMPARE([$LINUXRELEASE],[4.4.0],[
	AS_VERSION_COMPARE([$LINUXRELEASE],[3.12.0],[
	AS_VERSION_COMPARE([$LINUXRELEASE],[3.0.0],[
	AS_VERSION_COMPARE([$LINUXRELEASE],[2.6.32], [],
	[LDISKFS_SERIES="2.6-sles11.series"],[LDISKFS_SERIES="2.6-sles11.series"])],
	[LDISKFS_SERIES="3.0-sles11.series"],[
		PLEV=$(grep PATCHLEVEL /etc/SuSE-release | sed -e 's/.*= *//')
		case $PLEV in
		2) LDISKFS_SERIES="3.0-sles11.series"
			;;
		3) LDISKFS_SERIES="3.0-sles11sp3.series"
			;;
		4) LDISKFS_SERIES="3.0-sles11sp4.series"
			;;
		esac
	])],[LDISKFS_SERIES="3.12-sles12.series"],[
		PLEV=$(grep PATCHLEVEL /etc/SuSE-release | sed -e 's/.*= *//')
		case $PLEV in
		1) LDISKFS_SERIES="3.12-sles12sp1.series"
			;;
		*) LDISKFS_SERIES="3.12-sles12.series"
			;;
		esac
	])],[LDISKFS_SERIES="4.4-sles12sp2.series"],
	    [LDISKFS_SERIES="4.4-sles12sp2.series"]
	)], [LDISKFS_SERIES="4.4-sles12sp3.series"],
            [LDISKFS_SERIES="4.4-sles12sp3.series"])
], [test x$UBUNTU_KERNEL = xyes], [
	AS_VERSION_COMPARE([$LINUXRELEASE],[4.15.0],[
	AS_VERSION_COMPARE([$LINUXRELEASE],[4.4.0], [],
	[
		KPLEV=$(echo $LINUXRELEASE | sed -n 's/.*-\([0-9]\+\).*/\1/p')
		AS_IF(
			[test -z "$KPLEV"], [
				AC_MSG_WARN([Failed to determine Kernel patch level. Assume latest.])
				LDISKFS_SERIES="4.4.0-73-ubuntu14+16.series"
			],
			[test $KPLEV -ge 73], [LDISKFS_SERIES="4.4.0-73-ubuntu14+16.series"],
			[test $KPLEV -ge 62], [LDISKFS_SERIES="4.4.0-62-ubuntu14+16.series"],
			[test $KPLEV -ge 49], [LDISKFS_SERIES="4.4.0-49-ubuntu14+16.series"],
			[LDISKFS_SERIES="4.4.0-45-ubuntu14+16.series"]
		)
	],
	[LDISKFS_SERIES="4.4.0-73-ubuntu14+16.series"])],
	[
		KPLEV=$(echo $LINUXRELEASE | sed -n 's/.*-\([0-9]\+\).*/\1/p')
		AS_IF(
			[test -z "$KPLEV"], [
				AC_MSG_WARN([Failed to determine Kernel patch level. Assume latest.])
				LDISKFS_SERIES="4.15.0-24-ubuntu18.series"
			],
			[test $KPLEV -ge 24], [LDISKFS_SERIES="4.15.0-24-ubuntu18.series"],
			[test $KPLEV -ge 20], [LDISKFS_SERIES="4.15.0-20-ubuntu18.series"]
		)
	],
	[LDISKFS_SERIES="4.15.0-24-ubuntu18.series"])
])
])
AS_IF([test -z "$LDISKFS_SERIES"],
	[AC_MSG_RESULT([failed to identify series])],
	[AC_MSG_RESULT([$LDISKFS_SERIES])])
AC_SUBST(LDISKFS_SERIES)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:115: -1- AC_DEFUN([LB_EXT_FREE_BLOCKS_WITH_BUFFER_HEAD], [
LB_CHECK_COMPILE([if 'ext4_free_blocks' needs 'struct buffer_head'],
ext4_free_blocks_with_buffer_head, [
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
],[
	ext4_free_blocks(NULL, NULL, NULL, 0, 0, 0);
],[
	AC_DEFINE(HAVE_EXT_FREE_BLOCK_WITH_BUFFER_HEAD, 1,
		[ext4_free_blocks do not require struct buffer_head])
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:132: -1- AC_DEFUN([LB_EXT4_JOURNAL_START_3ARGS], [
LB_CHECK_COMPILE([if ext4_journal_start takes 3 arguments],
ext4_journal_start, [
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4_jbd2.h"
],[
	ext4_journal_start(NULL, 0, 0);
],[
	AC_DEFINE(JOURNAL_START_HAS_3ARGS, 1, [ext4_journal_start takes 3 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:149: -1- AC_DEFUN([LB_EXT4_BREAD_4ARGS], [
LB_CHECK_COMPILE([if ext4_bread takes 4 arguments],
ext4_bread, [
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
],[
	ext4_bread(NULL, NULL, 0, 0);
],[
	AC_DEFINE(HAVE_EXT4_BREAD_4ARGS, 1, [ext4_bread takes 4 arguments])
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:170: -1- AC_DEFUN([LB_EXT4_HAVE_INFO_DQUOT], [
LB_CHECK_COMPILE([if i_dquot is in ext4_inode_info],
ext4_info_dquot, [
	#include <linux/fs.h>
	#include <linux/quota.h>
	#include "$EXT4_SRC_DIR/ext4.h"
],[
	struct ext4_inode_info in;
	struct dquot *dq;

	dq = in.i_dquot[0];
],[
	AC_DEFINE(HAVE_EXT4_INFO_DQUOT, 1, [i_dquot is in ext4_inode_info])
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:206: -1- AC_DEFUN([LB_EXT4_HAVE_I_CRYPT_INFO], [
LB_CHECK_COMPILE([if i_crypt_info is in ext4_inode_info],
ext4_i_crypt_info, [
	#define CONFIG_EXT4_FS_ENCRYPTION 1
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
],[
	struct ext4_inode_info in;

	in.i_crypt_info = NULL;
],[
	AC_DEFINE(
		CONFIG_LDISKFS_FS_ENCRYPTION, 1,
		[enable encryption for ldiskfs]
	)
],[
	LB_CHECK_CONFIG([EXT4_FS_ENCRYPTION],[
		AC_DEFINE(
			CONFIG_LDISKFS_FS_ENCRYPTION, 1,
			[enable encryption for ldiskfs]
		)
	])
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:229: -1- AC_DEFUN([LB_LDISKFS_IGET_HAS_FLAGS_ARG], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if ldiskfs_iget takes a flags argument],
ext4_iget_3args, [
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
],[
	int f = EXT4_IGET_SPECIAL;
	(void)f;
],[
	AC_DEFINE(HAVE_LDISKFS_IGET_WITH_FLAGS, 1,
		[if ldiskfs_iget takes a flags argument])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:262: -1- AC_DEFUN([LDISKFS_AC_PATCH_PROGRAM], [
	AC_ARG_ENABLE([quilt],
		[AC_HELP_STRING([--disable-quilt],
			[disable use of quilt for ldiskfs])],
		[AS_IF([test "x$enableval" = xno],
			[use_quilt=no],
			[use_quilt=maybe])],
		[use_quilt=maybe]
	)

	AS_IF([test x$use_quilt = xmaybe], [
		AC_PATH_PROG([quilt_avail], [quilt], [no])
		AS_IF([test x$quilt_avail = xno], [
			use_quilt=no
		], [
			use_quilt=yes
		])
	])

	AS_IF([test x$use_quilt = xno], [
		AC_PATH_PROG([patch_avail], [patch], [no])
		AS_IF([test x$patch_avail = xno], [
			AC_MSG_ERROR([*** Need "quilt" or "patch" command])
		])
	])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:284: -1- AC_DEFUN([LB_HAVE_BVEC_ITER_ALL], [
tmp_flags="$EXTRA_KCFLAGS"
EXTRA_KCFLAGS="-Werror"
LB_CHECK_COMPILE([if bvec_iter_all exists for multi-page bvec iternation],
ext4fs_dirhash, [
	#include <linux/bvec.h>
],[
	struct bvec_iter_all iter;
	(void)iter;
],[
	AC_DEFINE(HAVE_BVEC_ITER_ALL, 1,
		[if bvec_iter_all exists for multi-page bvec iternation])
])
EXTRA_KCFLAGS="$tmp_flags"
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:350: -1- AC_DEFUN([LB_CONFIG_LDISKFS], [
# --with-ldiskfs is deprecated now that ldiskfs is fully merged with lustre.
# However we continue to support this option through Lustre 2.5.
AC_ARG_WITH([ldiskfs],
	[],
	[AC_MSG_WARN([--with-ldiskfs is deprecated, please use --enable-ldiskfs])
	AS_IF([test x$withval != xyes -a x$withval != xno],
		[AC_MSG_ERROR([

The ldiskfs option is deprecated,
and no longer supports paths to external ldiskfs source
])])
])

AC_ARG_ENABLE([ldiskfs],
	[AS_HELP_STRING([--disable-ldiskfs],
		[disable ldiskfs osd (default is enable)])],
	[AS_IF([test x$enable_ldiskfs != xyes -a x$enable_ldiskfs != xno],
		[AC_MSG_ERROR([ldiskfs valid options are "yes" or "no"])])],
	[AS_IF([test "${with_ldiskfs+set}" = set],
		[enable_ldiskfs=$with_ldiskfs],
		[enable_ldiskfs=maybe])
])

AS_IF([test x$enable_server = xno],
	[AS_CASE([$enable_ldiskfs],
		[maybe], [enable_ldiskfs=no],
		[yes], [AC_MSG_ERROR([cannot build ldiskfs when servers are disabled])]
	)])

AS_IF([test x$enable_ldiskfs != xno],[
	# In the future, we chould change enable_ldiskfs from maybe to
	# either yes or no based on additional tests, e.g.  whether a patch
	# set is available for the detected kernel.  For now, we just always
	# set it to "yes".
	AS_IF([test x$enable_ldiskfs = xmaybe], [enable_ldiskfs=yes])
	AC_SUBST(ENABLE_LDISKFS, yes)

	LDISKFS_LINUX_SERIES
	LDISKFS_AC_PATCH_PROGRAM
	LB_EXT_FREE_BLOCKS_WITH_BUFFER_HEAD
	LB_EXT4_JOURNAL_START_3ARGS
	LB_EXT4_BREAD_4ARGS
	LB_EXT4_HAVE_INFO_DQUOT
	LB_EXT4_HAVE_I_CRYPT_INFO
	LB_LDISKFS_IGET_HAS_FLAGS_ARG
	LB_HAVE_BVEC_ITER_ALL
	AC_DEFINE(CONFIG_LDISKFS_FS_POSIX_ACL, 1, [posix acls for ldiskfs])
	AC_DEFINE(CONFIG_LDISKFS_FS_SECURITY, 1, [fs security for ldiskfs])
	AC_DEFINE(CONFIG_LDISKFS_FS_XATTR, 1, [extened attributes for ldiskfs])
	AC_DEFINE(CONFIG_LDISKFS_FS_RW, 1, [enable rw access for ldiskfs])
	AC_SUBST(LDISKFS_SUBDIR, ldiskfs)
	AC_DEFINE(HAVE_LDISKFS_OSD, 1, Enable ldiskfs osd)
], [
	AC_SUBST(ENABLE_LDISKFS, no)
])

AC_MSG_CHECKING([whether to build ldiskfs])
AC_MSG_RESULT([$enable_ldiskfs])

AM_CONDITIONAL([LDISKFS_ENABLED], [test x$enable_ldiskfs = xyes])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:393: -1- AC_DEFUN([LB_VALIDATE_EXT4_SRC_DIR], [
enable_ldiskfs_build="no"
AS_IF([test -n "$EXT4_SRC_DIR"], [
	enable_ldiskfs_build="yes"
	LB_CHECK_FILE([$EXT4_SRC_DIR/dir.c], [], [
		enable_ldiskfs_build="no"
		AC_MSG_WARN([ext4 must exist for ldiskfs build])
	])
	LB_CHECK_FILE([$EXT4_SRC_DIR/file.c], [], [
		enable_ldiskfs_build="no"
		AC_MSG_WARN([ext4 must exist for ldiskfs build])
	])
	LB_CHECK_FILE([$EXT4_SRC_DIR/inode.c], [], [
		enable_ldiskfs_build="no"
		AC_MSG_WARN([ext4 must exist for ldiskfs build])
	])
	LB_CHECK_FILE([$EXT4_SRC_DIR/super.c], [], [
		enable_ldiskfs_build="no"
		AC_MSG_WARN([ext4 must exist for ldiskfs build])
	])
])

AS_IF([test "x$enable_ldiskfs_build" = xno], [
	enable_ldiskfs="no"

	AC_MSG_WARN([

Disabling ldiskfs support because complete ext4 source does not exist.

If you are building using kernel-devel packages and require ldiskfs
server support then ensure that the matching kernel-debuginfo-common
and kernel-debuginfo-common-<arch> packages are installed.
])
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:429: -1- AC_DEFUN([LB_EXT4_SRC_DIR], [
AC_MSG_CHECKING([ext4 source directory])
# Kernel ext source located with devel headers
linux_src=$LINUX
AS_IF([test -e "$linux_src/fs/ext4/super.c"], [
	EXT4_SRC_DIR="$linux_src/fs/ext4"
], [
	# Kernel ext source provided by kernel-debuginfo-common package
	# that extracted to $LINUX
	linux_src=$(ls -1d $linux_src/../../debug/*/linux-${LINUXRELEASE%.*}* \
		2>/dev/null | tail -1)
	AS_IF([test -e "$linux_src/fs/ext4/super.c"], [
		EXT4_SRC_DIR="$linux_src/fs/ext4"
	], [
		# Kernel ext source provided by kernel-debuginfo-common package
		linux_src=$(ls -1d /usr/src/debug/*/linux-${LINUXRELEASE%.*}* \
			2>/dev/null | tail -1)
		AS_IF([test -e "$linux_src/fs/ext4/super.c"], [
			EXT4_SRC_DIR="$linux_src/fs/ext4"
		], [
			EXT4_SRC_DIR=""
		])
	])
])
AC_MSG_RESULT([$EXT4_SRC_DIR])
AC_SUBST(EXT4_SRC_DIR)

LB_VALIDATE_EXT4_SRC_DIR
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:483: -1- AC_DEFUN([LB_DEFINE_E2FSPROGS_NAMES], [
AC_MSG_CHECKING([whether to use alternate names for e2fsprogs])
AC_ARG_WITH([ldiskfsprogs],
	AC_HELP_STRING([--with-ldiskfsprogs],
		[use alternate names for ldiskfs-enabled e2fsprogs]),
	[], [withval="no"])

AS_IF([test "x$withval" = xyes], [
	AC_MSG_RESULT([enabled])
	AC_DEFINE(HAVE_LDISKFSPROGS, 1, [enable use of ldiskfsprogs package])
	E2FSPROGS="ldiskfsprogs"
	MKE2FS="mkfs.ldiskfs"
	DEBUGFS="debugfs.ldiskfs"
	TUNE2FS="tunefs.ldiskfs"
	E2LABEL="label.ldiskfs"
	DUMPE2FS="dumpfs.ldiskfs"
	E2FSCK="fsck.ldiskfs"
	PFSCK="pfsck.ldiskfs"
], [
	AC_MSG_RESULT([disabled])
	E2FSPROGS="e2fsprogs"
	MKE2FS="mke2fs"
	DEBUGFS="debugfs"
	TUNE2FS="tune2fs"
	E2LABEL="e2label"
	DUMPE2FS="dumpe2fs"
	E2FSCK="e2fsck"
	PFSCK="fsck"
])

AC_DEFINE_UNQUOTED(E2FSPROGS, "$E2FSPROGS", [name of ldiskfs e2fsprogs package])
AC_DEFINE_UNQUOTED(MKE2FS, "$MKE2FS", [name of ldiskfs mkfs program])
AC_DEFINE_UNQUOTED(DEBUGFS, "$DEBUGFS", [name of ldiskfs debug program])
AC_DEFINE_UNQUOTED(TUNE2FS, "$TUNE2FS", [name of ldiskfs tune program])
AC_DEFINE_UNQUOTED(E2LABEL, "$E2LABEL", [name of ldiskfs label program])
AC_DEFINE_UNQUOTED(DUMPE2FS,"$DUMPE2FS", [name of ldiskfs dump program])
AC_DEFINE_UNQUOTED(E2FSCK, "$E2FSCK", [name of ldiskfs fsck program])
AC_DEFINE_UNQUOTED(PFSCK, "$PFSCK", [name of parallel fsck program])

AC_SUBST([E2FSPROGS], [$E2FSPROGS])
AC_SUBST([MKE2FS], [$MKE2FS])
AC_SUBST([DEBUGFS], [$DEBUGFS])
AC_SUBST([TUNE2FS], [$TUNE2FS])
AC_SUBST([E2LABEL], [$E2LABEL])
AC_SUBST([DUMPE2FS], [$DUMPE2FS])
AC_SUBST([E2FSCK], [$E2FSCK])
AC_SUBST([PFSCK], [$PFSCK])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:35: -1- AC_DEFUN([LB_LINUX_VERSION], [
KMODEXT=".ko"
AC_SUBST(KMODEXT)

makerule="$PWD/build"
AC_CACHE_CHECK([for external module build target], lb_cv_module_target, [
lb_cv_module_target=""
MODULE_TARGET="SUBDIRS"
rm -f build/conftest.i
LB_LINUX_TRY_MAKE([], [],
	[$makerule LUSTRE_KERNEL_TEST=conftest.i],
	[test -s build/conftest.i],
	[lb_cv_module_target="SUBDIRS"], [
		MODULE_TARGET="M"
		makerule="_module_$PWD/build"
		LB_LINUX_TRY_MAKE([], [],
			[$makerule LUSTRE_KERNEL_TEST=conftest.i],
			[test -s build/conftest.i],
			[lb_cv_module_target="M"], [
				AC_MSG_ERROR([unknown; check config.log for details])
			])
	])
])
AS_IF([test -z "$lb_cv_module_target"],
	[AC_MSG_ERROR([unknown external module build target])],
[test "x$lb_cv_module_target" = "xM"],
	[makerule="_module_$PWD/build"])
MODULE_TARGET=$lb_cv_module_target
AC_SUBST(MODULE_TARGET)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:68: -1- AC_DEFUN([LB_LINUX_UTSRELEASE], [
AC_CACHE_CHECK([for Linux kernel utsrelease], lb_cv_utsrelease, [
lb_cv_utsrelease=""
utsrelease1=$LINUX_OBJ/include/generated/utsrelease.h
utsrelease2=$LINUX_OBJ/include/linux/utsrelease.h
utsrelease3=$LINUX_OBJ/include/linux/version.h
AS_IF([test -r $utsrelease1 && fgrep -q UTS_RELEASE $utsrelease1],
	[utsrelease=$utsrelease1],
[test -r $utsrelease2 && fgrep -q UTS_RELEASE $utsrelease2],
	[utsrelease=$utsrelease2],
[test -r $utsrelease3 && fgrep -q UTS_RELEASE $utsrelease3],
	[utsrelease=$utsrelease3])
AS_IF([test -n "$utsrelease"],
	[lb_cv_utsrelease=$(awk -F \" '/ UTS_RELEASE / { print [$]2 }' $utsrelease)],
	[AC_MSG_ERROR([

Cannot find UTS_RELEASE definition.

This is often provided by the kernel-devel package.
])
	])
])
AS_IF([test -z "$lb_cv_utsrelease"],
	[AC_MSG_ERROR([Cannot determine Linux kernel version.])])
LINUXRELEASE=$lb_cv_utsrelease
AC_SUBST(LINUXRELEASE)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:167: -1- AC_DEFUN([LB_LINUX_RELEASE], [
	LB_LINUX_UTSRELEASE

	# Define default states
	RHEL_KERNEL="no"
	SUSE_KERNEL="no"
	UBUNTU_KERNEL="no"
	DEBIAN_KERNEL="no"
	# And if any of the above kernels has been detected yet
	KERNEL_FOUND="no"

	# Check for RedHat first (no need to check KERNEL_FOUND
	AC_CACHE_CHECK([for RedHat kernel release number], lb_cv_rhel_kernel_version, [
		lb_cv_rhel_kernel_version=""
		AS_IF([fgrep -q RHEL_RELEASE $LINUX_OBJ/include/$VERSION_HDIR/version.h], [
			lb_cv_rhel_kernel_version=$(awk '/ RHEL_MAJOR / { print [$]3 }' \
				$LINUX_OBJ/include/$VERSION_HDIR/version.h)$(awk \
				'/ RHEL_MINOR / { print [$]3 }' \
				$LINUX_OBJ/include/$VERSION_HDIR/version.h)
		])
	])
	AS_IF([test -n "$lb_cv_rhel_kernel_version"], [
		RHEL_KERNEL="yes"
		KERNEL_FOUND="yes"
		RHEL_RELEASE_NO=$lb_cv_rhel_kernel_version
	])

	# Check for SuSE
	AS_IF([test "x$KERNEL_FOUND" = "xno"], [
		LB_CHECK_CONFIG([SUSE_KERNEL], [
			SUSE_KERNEL="yes"
			KERNEL_FOUND="yes"
		], [])
	])

	# Check for Ubuntu
	AS_IF([test "x$KERNEL_FOUND" = "xno"], [
		AC_CACHE_CHECK([for Ubuntu kernel signature], lb_cv_ubuntu_kernel_sig, [
			lb_cv_ubuntu_kernel_sig="no"
			AS_IF([fgrep -q "CONFIG_VERSION_SIGNATURE \"Ubuntu" $LINUX_OBJ/include/generated/autoconf.h], [
				lb_cv_ubuntu_kernel_sig="yes"
			])
		])
		AS_IF([test "x$lb_cv_ubuntu_kernel_sig" = "xyes"], [
			UBUNTU_KERNEL="yes"
			KERNEL_FOUND="yes"
		])
	])

	# Check for Debian
	AS_IF([test "x$KERNEL_FOUND" = "xno"], [
		AC_CACHE_CHECK([for Debian kernel signature], lb_cv_debian_kernel_sig, [
			lb_cv_debian_kernel_sig="no"
			AS_IF([grep -q "LINUX_PACKAGE_ID\s*\"\s*Debian" $LINUX_OBJ/include/generated/package.h], [
				lb_cv_debian_kernel_sig="yes"
			])
		])
		AS_IF([test "x$lb_cv_debian_kernel_sig" = "xyes"], [
			DEBIAN_KERNEL="yes"
			KERNEL_FOUND="yes"
		])
	])

	# If still no kernel was found, a warning is issued
	AS_IF([test "x$KERNEL_FOUND" = "xno"], [
		AC_MSG_WARN([Kernel Distro seems to be neither RedHat, SuSE, Ubuntu nor Debian])
	])

	AC_MSG_CHECKING([for Linux kernel module package directory])
	AC_ARG_WITH([kmp-moddir],
		AC_HELP_STRING([--with-kmp-moddir=string],
			[set the kmod updates or extra directory]),
		[KMP_MODDIR=$withval
		 IN_KERNEL=''],[
		AS_IF([test x$RHEL_KERNEL = xyes], [KMP_MODDIR="extra/kernel"],
			  [test x$SUSE_KERNEL = xyes], [KMP_MODDIR="updates/kernel"],
			  [test x$UBUNTU_KERNEL = xyes], [KMP_MODDIR="updates/kernel"],
			  [test x$DEBIAN_KERNEL = xyes], [KMP_MODDIR="updates/kernel"],
			  [AC_MSG_WARN([Kernel Distro seems to be neither RedHat, SuSE, Ubuntu nor Debian])]
		)
		IN_KERNEL="${PACKAGE}"])
	AC_MSG_RESULT($KMP_MODDIR)

	moduledir="/lib/modules/${LINUXRELEASE}/${KMP_MODDIR}"

	modulefsdir="${moduledir}/fs/${IN_KERNEL}"
	AC_SUBST(modulefsdir)

	modulenetdir="${moduledir}/net/${IN_KERNEL}"
	AC_SUBST(modulenetdir)

	AC_SUBST(KMP_MODDIR)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:182: -1- AC_DEFUN([LB_LINUX_SYMVERFILE], [
AC_CACHE_CHECK([for the name of module symbol version file], lb_cv_module_symvers, [
AS_IF([grep -q Modules.symvers $LINUX/scripts/Makefile.modpost],
	[lb_cv_module_symvers=Modules.symvers],
	[lb_cv_module_symvers=Module.symvers])
])
SYMVERFILE=$lb_cv_module_symvers
AC_SUBST(SYMVERFILE)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:201: -1- AC_DEFUN([LB_ARG_REPLACE_PATH], [
new_configure_args=
eval set -- $ac_configure_args
for arg; do
	case $arg in
		--with-[$1]=*)
			arg=--with-[$1]=[$2] ;;
		*\'*)
			arg=$(printf %s\n ["$arg"] | sed "s/'/'\\\\\\\\''/g") ;;
	esac
	dnl AS_VAR_APPEND([new_configure_args], [" '$arg'"])
	new_configure_args="$new_configure_args '$arg'"
done
ac_configure_args=$new_configure_args
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:211: -1- AC_DEFUN([__LB_ARG_CANON_PATH], [
	[$3]=$(readlink -f $with_$2)
	LB_ARG_REPLACE_PATH([$1], $[$3])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:221: -1- AC_DEFUN([LB_ARG_CANON_PATH], [
	__LB_ARG_CANON_PATH([$1], m4_translit([$1], [-.], [__]), [$2])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:365: -1- AC_DEFUN([LB_LINUX_PATH], [
for DEFAULT_LINUX in /usr/src/linux-source-* /lib/modules/$(uname -r)/{source,build} /usr/src/linux $(find /usr/src/kernels/ -maxdepth 1 -name @<:@0-9@:>@\* | xargs -r ls -d | tail -n 1); do
	AS_IF([readlink -q -e $DEFAULT_LINUX >/dev/null], [break])
done
if test "$DEFAULT_LINUX" = "/lib/modules/$(uname -r)/source"; then
	PATHS="/lib/modules/$(uname -r)/build"
else
	PATHS="/usr/src/linux-headers-$(uname -r)"
fi
PATHS+=" $DEFAULT_LINUX"
for DEFAULT_LINUX_OBJ in $PATHS; do
	AS_IF([readlink -q -e $DEFAULT_LINUX_OBJ >/dev/null], [break])
done

AC_MSG_CHECKING([for Linux sources])
AC_ARG_WITH([linux],
	AC_HELP_STRING([--with-linux=path],
		       [set path to Linux source (default=/lib/modules/$(uname -r)/{source,build},/usr/src/linux)]),
	[LB_ARG_CANON_PATH([linux], [LINUX])
	DEFAULT_LINUX_OBJ=$LINUX],
	[LINUX=$DEFAULT_LINUX])
AC_MSG_RESULT([$LINUX])
AC_SUBST(LINUX)

# -------- check for linux --------
LB_CHECK_FILE([$LINUX], [],
	[AC_MSG_ERROR([Kernel source $LINUX could not be found.])])

# -------- linux objects (for 2.6) --
AC_MSG_CHECKING([for Linux objects])
AC_ARG_WITH([linux-obj],
	AC_HELP_STRING([--with-linux-obj=path],
			[set path to Linux objects (default=/lib/modules/$(uname -r)/build,/usr/src/linux)]),
	[LB_ARG_CANON_PATH([linux-obj], [LINUX_OBJ])],
	[LINUX_OBJ=$DEFAULT_LINUX_OBJ])
AC_MSG_RESULT([$LINUX_OBJ])
AC_SUBST(LINUX_OBJ)

# -------- check for .config --------
AC_ARG_WITH([linux-config],
	[AC_HELP_STRING([--with-linux-config=path],
			[set path to Linux .conf (default=$LINUX_OBJ/.config)])],
	[LB_ARG_CANON_PATH([linux-config], [LINUX_CONFIG])],
	[LINUX_CONFIG=$LINUX_OBJ/.config])

# -------- check if .config exists --
LB_CHECK_FILE([$LINUX_CONFIG], [],
	[AC_MSG_ERROR([

Kernel config could not be found.
])
])
AC_SUBST(LINUX_CONFIG)

LB_CHECK_FILE([/boot/kernel.h],
	[KERNEL_SOURCE_HEADER='/boot/kernel.h'],
	[LB_CHECK_FILE([/var/adm/running-kernel.h],
		[KERNEL_SOURCE_HEADER='/var/adm/running-kernel.h'])])

AC_ARG_WITH([kernel-source-header],
	AC_HELP_STRING([--with-kernel-source-header=path],
			[Use a different kernel version header.]),
	[LB_ARG_CANON_PATH([kernel-source-header], [KERNEL_SOURCE_HEADER])])

# ----------- make dep run? ------------------
# at 2.6.19 # $LINUX/include/linux/config.h is removed
# and at more old has only one line include <autoconf.h>
#
LB_CHECK_FILE([$LINUX_OBJ/include/generated/autoconf.h],
	[AUTOCONF_HDIR=generated],
	[LB_CHECK_FILE([$LINUX_OBJ/include/linux/autoconf.h],
		[AUTOCONF_HDIR=linux],
		[AC_MSG_ERROR([Run make config in $LINUX.])])])
AC_SUBST(AUTOCONF_HDIR)

LB_CHECK_FILE([$LINUX_OBJ/include/linux/version.h],
	[VERSION_HDIR=linux],
	[LB_CHECK_FILE([$LINUX_OBJ/include/generated/uapi/linux/version.h],
		[VERSION_HDIR=generated/uapi/linux],
		[AC_MSG_ERROR([Run make config in $LINUX.])])])
AC_SUBST(VERSION_HDIR)

# ----------- kconfig.h exists ---------------
# kernel 3.1, $LINUX/include/linux/kconfig.h is added
# see kernel commit 2a11c8ea20bf850b3a2c60db8c2e7497d28aba99
#
LB_CHECK_FILE([$LINUX/include/linux/kconfig.h],
	      [CONFIG_INCLUDE=$LINUX/include/linux/kconfig.h],
              [CONFIG_INCLUDE=include/$AUTOCONF_HDIR/autoconf.h])
AC_SUBST(CONFIG_INCLUDE)

# ------------ rhconfig.h includes runtime-generated bits --
# RedHat kernel-source checks

# we know this exists after the check above.  if the user
# tarred up the tree and ran make dep etc. in it, then
# version.h gets overwritten with a standard linux one.

AS_IF([grep rhconfig $LINUX_OBJ/include/$VERSION_HDIR/version.h >/dev/null], [
	# This is a clean kernel-source tree, we need to
	# enable extensive workarounds to get this to build modules
	LB_CHECK_FILE([$KERNEL_SOURCE_HEADER], [
		AS_IF([test $KERNEL_SOURCE_HEADER = '/boot/kernel.h'],
			[AC_MSG_WARN([

Using /boot/kernel.h from RUNNING kernel.

If this is not what you want, use --with-kernel-source-header.
Consult build/README.kernel-source for details.
])
		])],
		[AC_MSG_ERROR([

$KERNEL_SOURCE_HEADER not found.

Consult build/README.kernel-source for details.
])
		])
	EXTRA_KCFLAGS="-include $KERNEL_SOURCE_HEADER $EXTRA_KCFLAGS"
])

# this is needed before we can build modules
LB_LINUX_VERSION

# --- check that we can build modules at all
LB_CHECK_COMPILE([that modules can be built at all], build_modules,
	[], [], [], [
	AC_MSG_ERROR([

Kernel modules cannot be built. Consult config.log for details.

If you are trying to build with a kernel-source rpm,
consult build/README.kernel-source
])
])

LB_LINUX_RELEASE
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:397: -1- AC_DEFUN([LC_MODULE_LOADING], [
AC_CACHE_CHECK([if Linux kernel module loading is possible], lb_cv_module_loading, [
LB_LINUX_TRY_MAKE([
	#include <linux/kmod.h>
], [
	int myretval=ENOSYS ;
	return myretval;
], [
	$makerule LUSTRE_KERNEL_TEST=conftest.i
], [dnl
	grep request_module build/conftest.i |dnl
		grep -v `grep "int myretval=" build/conftest.i |dnl
			cut -d= -f2 | cut -d" "  -f1`dnl
		>/dev/null dnl
], [lb_cv_module_loading="yes"], [lb_cv_module_loading="no"])
])
AS_IF([test "$lb_cv_module_loading" = yes],
	[AC_DEFINE(HAVE_MODULE_LOADING_SUPPORT, 1,
		[kernel module loading is possible])],
	[AC_MSG_WARN([

Kernel module loading support is highly recommended.

])
	])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:426: -1- AC_DEFUN([LB_PROG_LINUX], [
LB_LINUX_PATH
LB_LINUX_SYMVERFILE

LB_CHECK_CONFIG([MODULES], [], [
	AC_MSG_ERROR([

module support is required to build Lustre kernel modules.
])
	])

LB_CHECK_CONFIG([MODVERSIONS])

LB_CHECK_CONFIG([KALLSYMS], [], [
	AC_MSG_ERROR([

Lustre requires that CONFIG_KALLSYMS is enabled in your kernel.
])
	])

# 2.6.28
LC_MODULE_LOADING
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:439: -1- AC_DEFUN([LB_USES_DPKG], [
AC_CACHE_CHECK([if this distro uses dpkg], lb_cv_uses_dpkg, [
lb_cv_uses_dpkg="no"
AS_CASE([$(which dpkg 2>/dev/null)],[*/dpkg], [lb_cv_uses_dpkg="yes"])
])
uses_dpkg=$lb_cv_uses_dpkg
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:467: -1- AC_DEFUN([LB_CHECK_EXPORT], [
AS_VAR_PUSHDEF([lb_export], [lb_cv_export_$1])dnl
AC_CACHE_CHECK([if Linux kernel exports '$1'], lb_export, [
AS_VAR_SET([lb_export], [no])
AS_IF([grep -q -E '[[[:space:]]]$1[[[:space:]]]' $LINUX_OBJ/$SYMVERFILE 2>/dev/null],
	[AS_VAR_SET([lb_export], [yes])],
	[for file in $2; do
		AS_IF([grep -q -E "EXPORT_SYMBOL.*\($1\)" "$LINUX/$file" 2>/dev/null], [
			AS_VAR_SET([lb_export], [yes])
			break
		])
	done])
])
AS_VAR_IF([lb_export], [yes], [$3], [$4])[]dnl
AS_VAR_POPDEF([lb_export])dnl
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:486: -1- AC_DEFUN([LB_CHECK_CONFIG], [
LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_$1],
config_$1, [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_$1
	#error CONFIG_$1 not #defined
	#endif
], [$2], [$3])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:505: -1- AC_DEFUN([LB_CHECK_CONFIG_IM], [
LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_$1 in or as module],
config_im_$1, [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_$1) || defined(CONFIG_$1_MODULE))
	#error CONFIG_$1 and CONFIG_$1_MODULE not #defined
	#endif
], [$2], [$3])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:552: -1- AC_DEFUN([LB_LINUX_COMPILE_IFELSE], [m4_ifvaln([$1], [AC_LANG_CONFTEST([AC_LANG_SOURCE([$1])])])dnl
rm -f build/conftest.o build/conftest.mod.c build/conftest.ko
SUBARCH=$(echo $target_cpu | sed -e 's/powerpc.*/powerpc/' -e 's/ppc.*/powerpc/' -e 's/x86_64/x86/' -e 's/i.86/x86/' -e 's/k1om/x86/' -e 's/aarch64.*/arm64/' -e 's/armv7.*/arm/')
AS_IF([AC_TRY_COMMAND(cp conftest.c build && make -d [$2] LDFLAGS= ${LD:+LD="$LD"} CC="$CC" -f $PWD/build/Makefile LUSTRE_LINUX_CONFIG=$LINUX_CONFIG LINUXINCLUDE="$EXTRA_CHECK_INCLUDE -I$LINUX/arch/$SUBARCH/include -Iinclude -Iarch/$SUBARCH/include/generated -I$LINUX/include -Iinclude2 -I$LINUX/include/uapi -Iinclude/generated -I$LINUX/arch/$SUBARCH/include/uapi -Iarch/$SUBARCH/include/generated/uapi -I$LINUX/include/uapi -Iinclude/generated/uapi ${SPL_OBJ:+-include $SPL_OBJ/spl_config.h} ${ZFS_OBJ:+-include $ZFS_OBJ/zfs_config.h} ${SPL:+-I$SPL/include } ${ZFS:+-I$ZFS -I$ZFS/include -I${SPL:-$ZFS/include/spl}} -include $CONFIG_INCLUDE" -o tmp_include_depends -o scripts -o include/config/MARKER -C $LINUX_OBJ EXTRA_CFLAGS="-Werror-implicit-function-declaration $EXTRA_KCFLAGS" $MODULE_TARGET=$PWD/build) >/dev/null && AC_TRY_COMMAND([$3])],
	[$4],
	[_AC_MSG_LOG_CONFTEST
m4_ifvaln([$5],[$5])dnl])
rm -f build/conftest.o build/conftest.mod.c build/conftest.mod.o build/conftest.ko m4_ifval([$1], [build/conftest.c conftest.c])[]dnl
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:564: -1- AC_DEFUN([LB_LINUX_TRY_COMPILE], [
LB_LINUX_COMPILE_IFELSE(
	[AC_LANG_SOURCE([LB_LANG_PROGRAM([[$1]], [[$2]])])],
	[modules], [test -s build/conftest.o],
	[$3], [$4])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:575: -1- AC_DEFUN([LB_LINUX_TRY_MAKE], [
LB_LINUX_COMPILE_IFELSE(
	[AC_LANG_SOURCE([LB_LANG_PROGRAM([[$1]], [[$2]])])],
	[$3], [$4], [$5], [$6])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:595: -1- AC_DEFUN([LB_CHECK_COMPILE], [
AS_VAR_PUSHDEF([lb_compile], [lb_cv_compile_$2])dnl
AC_CACHE_CHECK([$1], lb_compile, [
	LB_LINUX_TRY_COMPILE([$3], [$4],
		[AS_VAR_SET([lb_compile], [yes])],
		[AS_VAR_SET([lb_compile], [no])])
])
AS_VAR_IF([lb_compile], [yes], [$5], [$6])[]dnl
AS_VAR_POPDEF([lb_compile])dnl
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-zfs.m4:180: -1- AC_DEFUN([LB_SPL], [
	AC_ARG_WITH([spl],
		AS_HELP_STRING([--with-spl=PATH],
		[Path to spl source]),
		[splsrc="$withval"])

	AC_ARG_WITH([spl-obj],
		AS_HELP_STRING([--with-spl-obj=PATH],
		[Path to spl build objects]),
		[splobj="$withval"])

	dnl #
	dnl # The existence of spl.release[.in] is used to identify a valid
	dnl # source directory.  In order of preference:
	dnl #
	splver=$(ls -1 /usr/src/ | grep -m1 spl | cut -f2 -d'-')
	spldkms="/var/lib/dkms/spl/${splver}"
	splsrc1="/usr/src/spl-${splver}/${LINUXRELEASE}"
	splsrc2="/usr/src/spl-${splver}"
	splsrc3="../spl/"
	splsrc4="$LINUX/spl"

	AC_MSG_CHECKING([spl source directory])
	AS_IF([test -z "${splsrc}"], [
		AS_IF([test -e "${spldkms}/source/spl.release.in"], [
			splsrc=${spldkms}/source
		], [test -e "${splsrc1}/spl.release.in"], [
			splsrc=${splsrc1}
		], [test -e "${splsrc2}/spl.release.in"], [
			splsrc=${splsrc2}
		], [test -e "${splsrc3}/spl.release.in"], [
			splsrc=$(readlink -f "${splsrc3}")
		], [test -e "${splsrc4}/spl.release.in"], [
			splsrc=${splsrc4}
		], [
			splsrc="[Not found]"
		])
	])
	AC_MSG_RESULT([$splsrc])

	AS_IF([test ! -e "$splsrc/spl.release" &&
	    test ! -e "$splsrc/spl.release.in"], [
		enable_zfs=no
	])

	dnl #
	dnl # The existence of the spl_config.h is used to identify a valid
	dnl # spl object directory.  In many cases the object and source
	dnl # directory are the same, however the objects may also reside
	dnl # is a subdirectory named after the kernel version.  When
	dnl # weak modules are used, the kernel version may not be the
	dnl # same as the LINUXRELEASE against which we are building lustre.
	dnl #
	AC_MSG_CHECKING([spl build directory])
	AS_IF([test -z "$splobj"], [
		last_spl_obj_dir=$(ls -d ${splsrc}/[[0-9]]*/  2> /dev/null | tail -n 1 | sed 's|/$||')
		AS_IF([test "${splsrc}" = "${spldkms}/source"], [
			AS_IF([test -e "${spldkms}/${LINUXRELEASE}/${target_cpu}/spl_config.h"], [
				splobj=${spldkms}/${LINUXRELEASE}/${target_cpu}
			], [
				splobj="[Not found]"
			])
		],[test -e "${splsrc}/${LINUXRELEASE}/spl_config.h"], [
			splobj="${splsrc}/${LINUXRELEASE}"
		], [test -e "${splsrc}/spl_config.h"], [
			splobj="${splsrc}"
		], [test -e "${last_spl_obj_dir}/spl_config.h"], [
			splobj="${last_spl_obj_dir}"
		], [
			splobj="[Not found]"
		])
	])
	AC_MSG_RESULT([$splobj])

	AS_IF([test ! -e "$splobj/spl_config.h"], [
		enable_zfs=no
	])

	dnl #
	dnl # Verify the source version using SPL_META_VERSION in spl_config.h
	dnl #
	AS_IF([test x$enable_zfs = xyes], [
		AC_MSG_CHECKING([spl source version])
		AS_IF([fgrep -q SPL_META_VERSION $splobj/spl_config.h], [
			splver=$((echo "#include <spl_config.h>";
			    echo "splver=SPL_META_VERSION-SPL_META_RELEASE") |
			    cpp -I $splobj |
			    grep "^splver=" | tr -d \" | cut -d= -f2)
		], [
			splver="[Not found]"
			enable_zfs=no
		])
		AC_MSG_RESULT([$splver])
	])

	dnl #
	dnl # Verify the modules systems exist by the expect name.
	dnl #
	AS_IF([test x$enable_zfs = xyes], [
		AC_MSG_CHECKING([spl file name for module symbols])
		AS_IF([test -r $splobj/$SYMVERFILE], [
			splsym=$SYMVERFILE
			EXTRA_SYMBOLS="$EXTRA_SYMBOLS $splobj/$SYMVERFILE"
		], [test -r $splobj/module/$SYMVERFILE], [
			splsym=$SYMVERFILE
			EXTRA_SYMBOLS="$EXTRA_SYMBOLS $splobj/module/$SYMVERFILE"
		], [
			splsym="[Not found]"
			enable_zfs=no
		])
		AC_MSG_RESULT([$splsym])
	])

	SPL=${splsrc}
	SPL_OBJ=${splobj}
	SPL_VERSION=${splver}

	AC_SUBST(SPL)
	AC_SUBST(SPL_OBJ)
	AC_SUBST(SPL_VERSION)
	AC_SUBST(EXTRA_SYMBOLS)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-zfs.m4:298: -1- AC_DEFUN([LB_ZFS], [
	AC_ARG_WITH([zfs-obj],
		AS_HELP_STRING([--with-zfs-obj=PATH],
		[Path to zfs build objects]),
		[zfsobj="$withval"])

	dnl #
	dnl # The existence of zfs.release[.in] is used to identify a valid
	dnl # source directory.  In order of preference:
	dnl #
	zfsver=$(ls -1 /usr/src/ | grep -m1 zfs | cut -f2 -d'-')
	zfsdkms="/var/lib/dkms/zfs/${zfsver}"
	zfssrc1="/usr/src/zfs-${zfsver}/${LINUXRELEASE}"
	zfssrc2="/usr/src/zfs-${zfsver}"
	zfssrc3="../zfs/"
	zfssrc4="$LINUX/zfs"

	AC_MSG_CHECKING([zfs source directory])
	AS_IF([test -z "${zfssrc}"], [
		AS_IF([test -e "${zfsdkms}/source/zfs.release.in"], [
			zfssrc=${zfsdkms}/source
		], [test -e "${zfssrc1}/zfs.release.in"], [
			zfssrc=${zfssrc1}
		], [test -e "${zfssrc2}/zfs.release.in"], [
			zfssrc=${zfssrc2}
		], [test -e "${zfssrc3}/zfs.release.in"], [
			zfssrc=$(readlink -f "${zfssrc3}")
		], [test -e "${zfssrc4}/zfs.release.in"], [
			zfssrc=${zfssrc4}
		], [
			zfssrc="[Not found]"
		])
	])
	AC_MSG_RESULT([$zfssrc])

	AS_IF([test ! -e "$zfssrc/zfs.release.in" &&
	    test ! -e "$zfssrc/zfs.release"], [
		enable_zfs=no
	])

	dnl #
	dnl # The existence of the zfs_config.h is used to identify a valid
	dnl # zfs object directory.  In many cases the object and source
	dnl # directory are the same, however the objects may also reside
	dnl # is a subdirectory named after the kernel version.  When
	dnl # weak modules are used, the kernel version may not be the
	dnl # same as the LINUXRELEASE against which we are building lustre.
	dnl #
	AC_MSG_CHECKING([zfs build directory])
	AS_IF([test -z "$zfsobj"], [
		last_zfs_obj_dir=$(ls -d ${zfssrc}/[[0-9]]*/ 2> /dev/null | tail -n 1 | sed 's|/$||')
		AS_IF([test "${zfssrc}" = "${zfsdkms}/source"], [
			AS_IF([test -e "${zfsdkms}/${LINUXRELEASE}/${target_cpu}/zfs_config.h"], [
				zfsobj=${zfsdkms}/${LINUXRELEASE}/${target_cpu}
			], [
				zfsobj="[Not found]"
			])
		], [test -e "${zfssrc}/${LINUXRELEASE}/zfs_config.h"], [
			zfsobj="${zfssrc}/${LINUXRELEASE}"
		], [test -e "${zfssrc}/zfs_config.h"], [
			zfsobj="${zfssrc}"
		], [test -e "${last_zfs_obj_dir}/zfs_config.h"], [
			zfsobj="${last_zfs_obj_dir}"
		], [
			zfsobj="[Not found]"
		])
	])

	AC_MSG_RESULT([$zfsobj])
	AS_IF([test ! -e "$zfsobj/zfs_config.h"], [
		enable_zfs=no
	])

	dnl #
	dnl # Verify the source version using SPL_META_VERSION in spl_config.h
	dnl #
	AS_IF([test x$enable_zfs = xyes], [
		AC_MSG_CHECKING([zfs source version])
		AS_IF([fgrep -q ZFS_META_VERSION $zfsobj/zfs_config.h], [
			zfsver=$((echo "#include <zfs_config.h>";
			    echo "zfsver=ZFS_META_VERSION-ZFS_META_RELEASE") |
			    cpp -I $zfsobj |
			    grep "^zfsver=" | tr -d \" | cut -d= -f2)
		],[
			zfsver="[Not found]"
			enable_zfs=no
		])
		AC_MSG_RESULT([$zfsver])
	])

	dnl #
	dnl # Verify the modules systems exist by the expect name.
	dnl #
	AS_IF([test x$enable_zfs = xyes], [
		AC_MSG_CHECKING([zfs file name for module symbols])
		AS_IF([test -r $zfsobj/$SYMVERFILE], [
			zfssym=$SYMVERFILE
			EXTRA_SYMBOLS="$EXTRA_SYMBOLS $zfsobj/$SYMVERFILE"
		], [test -r $zfsobj/module/$SYMVERFILE], [
			zfssym=$SYMVERFILE
			EXTRA_SYMBOLS="$EXTRA_SYMBOLS $zfsobj/module/$SYMVERFILE"
		], [
			zfssym="[Not found]"
			enable_zfs=no
		])
		AC_MSG_RESULT([$zfssym])
	])

	ZFS=${zfssrc}
	ZFS_OBJ=${zfsobj}
	ZFS_VERSION=${zfsver}

	AC_SUBST(ZFS)
	AC_SUBST(ZFS_OBJ)
	AC_SUBST(ZFS_VERSION)
	AC_SUBST(EXTRA_SYMBOLS)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-zfs.m4:316: -1- AC_DEFUN([LB_ZFS_DEVEL], [
	AC_ARG_WITH([zfs-devel],
		[AS_HELP_STRING([--with-zfs-devel=PATH],
		[Path to zfs development headers])],
		[zfsdevel="$withval"])

	AC_MSG_CHECKING([user provided zfs devel headers])
	AS_IF([test ! -z "${zfsdevel}"], [
		AS_IF([test -d "${zfsdevel}/usr/include/libspl" && test -d "${zfsdevel}/usr/include/libzfs"], [
			zfsinc="-I $zfsdevel/usr/include/libspl -I $zfsdevel/usr/include/libzfs"
			zfslib="-L$zfsdevel/usr/lib64 -L$zfsdevel/usr/lib -L$zfsdevel/lib64 -L$zfsdevel/lib"
		], [
			AC_MSG_ERROR([Path to development headers directory does not exist])
		])
	])
	AC_MSG_RESULT([$zfsinc])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-zfs.m4:344: -1- AC_DEFUN([LB_ZFS_USER], [
	dnl #
	dnl # Detect user space zfs development headers.
	dnl #
	AC_MSG_CHECKING([zfs devel headers])
	AS_IF([test -z "${zfsinc}"], [
        	AS_IF([test -e "${zfssrc}/include/libzfs.h" && test -e "${zfssrc}/lib/libspl/include"], [
                	zfsinc="-I $zfssrc/lib/libspl/include -I $zfssrc/include"
			zfslib="-L$zfssrc/lib/libzfs/.libs/ -L$zfssrc/lib/libnvpair/.libs"
		], [test -d /usr/include/libzfs && test -d /usr/include/libspl], [
			zfsinc="-I/usr/include/libspl -I /usr/include/libzfs"
			zfslib=""
		], [
			zfsinc="[Not Found]"
			zfslib=""
			enable_zfs=no
		])
	])
	AC_MSG_RESULT([$zfsinc])

	ZFS_LIBZFS_INCLUDE=${zfsinc}
	ZFS_LIBZFS_LDFLAGS=${zfslib}
	ZFS_LIBZFS_LIBS="-lzfs -lnvpair"
	AC_SUBST(ZFS_LIBZFS_INCLUDE)
	AC_SUBST(ZFS_LIBZFS_LDFLAGS)
	AC_SUBST(ZFS_LIBZFS_LIBS)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build-zfs.m4:732: -1- AC_DEFUN([LB_CONFIG_ZFS], [
	AC_ARG_WITH([zfs],
		[AS_HELP_STRING([--with-zfs=PATH], [Path to zfs source])],
		[
			AS_IF([test x$withval = xno], [
				enable_spl=no
				enable_zfs=no
				require_zfs=no
			], [test x$withval = xyes], [
				enable_spl=yes
				enable_zfs=yes
				require_zfs=yes
			], [
				enable_spl=yes
				enable_zfs=yes
				require_zfs=yes
				zfssrc="$withval"
			])
		], [
			AS_IF([test x$enable_server != xno], [
				enable_spl=yes
				require_zfs=no
				enable_zfs=yes
			], [
				enable_spl=no
				require_zfs=no
				enable_zfs=no
			])
		])

	AC_MSG_CHECKING([whether to enable zfs])
	AC_MSG_RESULT([$enable_zfs])

	AS_IF([test x$enable_zfs = xyes], [
		AS_IF([test x$enable_modules = xyes], [
			LB_ZFS
		])
		LB_ZFS_DEVEL
		LB_ZFS_USER

		dnl #
		dnl # Define zfs source code version
		dnl #
		ZFS_MAJOR=$(echo $zfsver | sed -re ['s/([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?.*/\1/'])
		ZFS_MINOR=$(echo $zfsver | sed -re ['s/([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?.*/\2/'])
		ZFS_PATCH=$(echo $zfsver | sed -re ['s/([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?.*/\3/'])
		ZFS_FIX=$(echo $zfsver   | sed -re ['s/([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?.*/\5/'])
		AS_IF([test -z "$ZFS_FIX"], [ZFS_FIX="0"])

		AC_DEFINE_UNQUOTED([ZFS_MAJOR], [$ZFS_MAJOR], [zfs major version])
		AC_DEFINE_UNQUOTED([ZFS_MINOR], [$ZFS_MINOR], [zfs minor version])
		AC_DEFINE_UNQUOTED([ZFS_PATCH], [$ZFS_PATCH], [zfs patch version])
		AC_DEFINE_UNQUOTED([ZFS_FIX],   [$ZFS_FIX],   [zfs fix version])

		dnl #
		dnl # SPL is only needed if ZFS is prior to 0.8.0
		dnl #
		AS_IF([test x$enable_modules = xyes && test $ZFS_MAJOR -eq 0 && test $ZFS_MINOR -lt 8], [
			LB_SPL
		],[
			enable_spl=no
		])

		dnl #
		dnl # enable_zfs will be set to no in LB_SPL or LB_ZFS if
		dnl # one of more of the build requirements is not met.
		dnl #
		AS_IF([test x$enable_zfs = xyes], [
			AC_DEFINE(HAVE_ZFS_OSD, 1, Enable zfs osd)
		],[
			AS_IF([test x$require_zfs = xyes], [
				AC_MSG_ERROR([

Required zfs osd cannot be built due to missing zfs development headers.

Support for zfs can be enabled by downloading the required packages for your
distribution.  See http://zfsonlinux.org/ to determine is zfs is supported by
your distribution.
				])
			], [
				AC_MSG_WARN([

Disabling optional zfs osd due to missing development headers.

Support for zfs can be enabled by downloading the required packages for your
distribution.  See http://zfsonlinux.org/ to determine is zfs is supported by
your distribution.
				])
			])
		])
	])


	AS_IF([test "x$enable_zfs" = xyes], [
		LB_CHECK_COMPILE([if zfs defines dsl_pool_config_enter/exit],
		dsl_pool_config_enter, [
			#include <sys/dsl_pool.h>
		],[
			dsl_pool_config_enter(NULL, FTAG);
		],[
			AC_DEFINE(HAVE_DSL_POOL_CONFIG, 1,
				[Have dsl_pool_config_enter/exit in ZFS])
		])
		LB_CHECK_COMPILE([if zfs defines dsl_sync_task_do_nowait],
		dsl_sync_task_do_nowait, [
			#include <sys/dsl_synctask.h>
		],[
			dsl_sync_task_do_nowait(NULL, NULL, NULL, NULL, NULL, 0, NULL);
		],[
			AC_DEFINE(HAVE_DSL_SYNC_TASK_DO_NOWAIT, 1,
				[Have dsl_sync_task_do_nowait in ZFS])
		])
		LB_CHECK_COMPILE([if zfs defines sa_spill_alloc],
		sa_spill_alloc, [
			#include <sys/kmem.h>
			#include <sys/sa.h>
		],[
			void *ptr;

			ptr = sa_spill_alloc(KM_SLEEP);
			sa_spill_free(ptr);
		],[
			AC_DEFINE(HAVE_SA_SPILL_ALLOC, 1,
				[Have sa_spill_alloc in ZFS])
		])
		LB_CHECK_COMPILE([if zfs defines spa_maxblocksize],
		spa_maxblocksize, [
			#include <sys/spa.h>
		],[
			spa_t *spa = NULL;
			int size;

			size = spa_maxblocksize(spa);
		],[
			AC_DEFINE(HAVE_SPA_MAXBLOCKSIZE, 1,
				[Have spa_maxblocksize in ZFS])
		])

		dnl #
		dnl # ZFS 0.7.x adds support for large dnodes.  This
		dnl # allows Lustre to optionally specify the size of a
		dnl # dnode which ZFS will then use to store metadata such
		dnl # as xattrs. The default dnode size specified by the
		dnl # 'dnodesize' dataset property will be used unless a
		dnl # specific value is provided.
		dnl #
		LB_CHECK_COMPILE([if zfs defines dmu_object_alloc_dnsize],
		dmu_object_alloc_dnsize, [
			#include <sys/dmu.h>
			#include <sys/dnode.h>
		],[
			objset_t *os = NULL;
			dmu_object_type_t objtype = DMU_OT_NONE;
			int blocksize = 0;
			dmu_object_type_t bonustype = DMU_OT_SA;
			int dnodesize = DNODE_MIN_SIZE;
			dmu_tx_t *tx = NULL;
			uint64_t id;

			id = dmu_object_alloc_dnsize(os, objtype, blocksize,
						     bonustype,
						     DN_BONUS_SIZE(dnodesize),
						     dnodesize, tx);
		],[
			AC_DEFINE(HAVE_DMU_OBJECT_ALLOC_DNSIZE, 1,
				[Have dmu_object_alloc_dnsize in ZFS])
		])

		dnl #
		dnl # ZFS 0.7.x extended dmu_prefetch() to take an additional
		dnl # 'level' and 'priority' argument.  Use a level of 0 and a
		dnl # priority of ZIO_PRIORITY_SYNC_READ to replicate the
		dnl # behavior of the four argument version.
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'dmu_prefetch' with 6 args],
		dmu_prefetch, [
			#include <sys/dmu.h>
		],[
			objset_t *os = NULL;
			uint64_t object = 0;
			int64_t level = 0;
			uint64_t offset = 0;
			uint64_t len = 0;
			enum zio_priority pri = ZIO_PRIORITY_SYNC_READ;

			dmu_prefetch(os, object, level, offset, len, pri);
		],[
			AC_DEFINE(HAVE_DMU_PREFETCH_6ARG, 1,
				[Have 6 argument dmu_pretch in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.0 feature: SPA_FEATURE_USEROBJ_ACCOUNTING
		dnl #
		LB_CHECK_COMPILE([if ZFS has native dnode accounting supported],
		dmu_objset_userobjused_enabled, [
			#include <sys/dmu_objset.h>
		],[
			dmu_objset_userobjused_enabled(NULL);
		],[
			AC_DEFINE(HAVE_DMU_USEROBJ_ACCOUNTING, 1,
				[Have native dnode accounting in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.0 feature: MULTIHOST
		dnl #
		LB_CHECK_COMPILE([if ZFS has multihost protection],
		spa_multihost, [
			#include <sys/spa.h>
		],[
			spa_multihost(NULL);
		],[
			AC_DEFINE(HAVE_ZFS_MULTIHOST, 1,
				[Have multihost protection in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.x adds new method zap_lookup_by_dnode
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'zap_lookup_by_dnode'],
		zap_lookup_by_dnode, [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		],[
			dnode_t *dn = NULL;
			zap_lookup_by_dnode(dn, NULL, 1, 1, NULL);
		],[
			AC_DEFINE(HAVE_ZAP_LOOKUP_BY_DNODE, 1,
				[Have zap_lookup_by_dnode() in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.x adds new method zap_add_by_dnode
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'zap_add_by_dnode'],
		zap_add_by_dnode, [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		],[
			dnode_t *dn = NULL;
			zap_add_by_dnode(dn, NULL, 1, 1, NULL, NULL);
		],[
			AC_DEFINE(HAVE_ZAP_ADD_BY_DNODE, 1,
				[Have zap_add_by_dnode() in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.x adds new method zap_remove_by_dnode
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'zap_remove_by_dnode'],
		zap_remove_by_dnode, [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		],[
			dnode_t *dn = NULL;
			zap_remove_by_dnode(dn, NULL, NULL);
		],[
			AC_DEFINE(HAVE_ZAP_REMOVE_ADD_BY_DNODE, 1,
				[Have zap_remove_by_dnode() in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.x adds new method dmu_tx_hold_zap_by_dnode
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'dmu_tx_hold_zap_by_dnode'],
		dmu_tx_hold_zap_by_dnode, [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		],[
			dnode_t *dn = NULL;
			dmu_tx_hold_zap_by_dnode(NULL, dn, TRUE, NULL);
		],[
			AC_DEFINE(HAVE_DMU_TX_HOLD_ZAP_BY_DNODE, 1,
				[Have dmu_tx_hold_zap_by_dnode() in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.x adds new method dmu_tx_hold_write_by_dnode
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'dmu_tx_hold_write_by_dnode'],
		dmu_tx_hold_write_by_dnode, [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		],[
			dnode_t *dn = NULL;
			dmu_tx_hold_write_by_dnode(NULL, dn, 0, 0);
		],[
			AC_DEFINE(HAVE_DMU_TX_HOLD_WRITE_BY_DNODE, 1,
				[Have dmu_tx_hold_write_by_dnode() in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.x adds new method dmu_write_by_dnode
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'dmu_write_by_dnode'],
		dmu_write_by_dnode, [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		],[
			dnode_t *dn = NULL;
			dmu_write_by_dnode(dn, 0, 0, NULL, NULL);
		],[
			AC_DEFINE(HAVE_DMU_WRITE_BY_DNODE, 1,
				[Have dmu_write_by_dnode() in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.x adds new method dmu_read_by_dnode
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'dmu_read_by_dnode'],
		dmu_read_by_dnode, [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		],[
			dnode_t *dn = NULL;
			dmu_read_by_dnode(dn, 0, 0, NULL, 0);
		],[
			AC_DEFINE(HAVE_DMU_READ_BY_DNODE, 1,
				[Have dmu_read_by_dnode() in ZFS])
		])
		dnl #
		dnl # ZFS 0.7.2 adds new method dmu_tx_mark_netfree
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'dmu_tx_mark_netfree'],
		dmu_tx_mark_netfree, [
			#include <sys/dmu.h>
		],[
			dmu_tx_t *tx = NULL;
			dmu_tx_mark_netfree(tx);
		],[
			AC_DEFINE(HAVE_DMU_TX_MARK_NETFREE, 1,
				[Have dmu_tx_mark_netfree])
		])
		dnl #
		dnl # ZFS 0.7.10 changes timestruc_t to inode_timespec_t
		dnl #
		LB_CHECK_COMPILE([if SPL has 'inode_timespec_t'],
		zfs_have_inode_timespec, [
			#include <sys/fs/zfs.h>
		],[
			inode_timespec_t now;
			gethrestime(&now);
		],[
			AC_DEFINE(HAVE_ZFS_INODE_TIMESPEC, 1,
				[Have inode_timespec_t])
		])
		dnl # ZFS 0.7.12/0.8.x uses zfs_refcount_add() instead of
		dnl # refcount_add().
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'zfs_refcount_add'],
		zfs_refcount_add, [
			#include <sys/refcount.h>
		],[
			zfs_refcount_add((zfs_refcount_t *) NULL, NULL);
		],[
			AC_DEFINE(HAVE_ZFS_REFCOUNT_ADD, 1,
				[Have zfs_refcount_add])
		])
		dnl #
		dnl # ZFS 0.8.x changes dmu_objset_own for encryption
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'dmu_objset_own' with 6 args],
		dmu_objset_own, [
			#include <sys/dmu_objset.h>
		],[
			objset_t *os = NULL;
			dmu_objset_type_t type = DMU_OST_ANY;
			dmu_objset_own(NULL, type, B_FALSE, B_TRUE, FTAG, &os);
		],[
			AC_DEFINE(HAVE_DMU_OBJSET_OWN_6ARG, 1,
				[Have dmu_objset_own() with 6 args])
		])
		dnl #
		dnl # ZFS 0.8.x changes dmu_objset_disown for encryption
		dnl #
		LB_CHECK_COMPILE([if ZFS has 'dmu_objset_disown' with 3 args],
		dmu_objset_disown, [
			#include <sys/dmu_objset.h>
		],[
			objset_t *os = NULL;
			dmu_objset_disown(os, B_TRUE, FTAG);
		],[
			AC_DEFINE(HAVE_DMU_OBJSET_DISOWN_3ARG, 1,
				[Have dmu_objset_disown() with 3 args])
		])
	])

	AS_IF([test "x$enable_zfs" = xyes], [
		AC_SUBST(ENABLE_ZFS, yes)
	], [
		AC_SUBST(ENABLE_ZFS, no)
	])
	AM_CONDITIONAL(ZFS_ENABLED, [test "x$enable_zfs" = xyes])
	AM_CONDITIONAL(SPL_ENABLED, [test "x$enable_spl" = xyes])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:13: -1- AC_DEFUN([LB_CANONICAL_SYSTEM], [
case $target_os in
	linux*)
		lb_target_os="linux"
		;;
esac
AC_SUBST(lb_target_os)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:21: -1- AC_DEFUN([LB_DOWNSTREAM_RELEASE], [AC_ARG_WITH([downstream-release],,
	AC_MSG_ERROR([--downstream-release was deprecated.  Please read Documentation/versioning.txt.])
)])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:40: -1- AC_DEFUN([LB_CHECK_FILE], [
AS_VAR_PUSHDEF([lb_file], [lb_cv_file_$1])dnl
AC_CACHE_CHECK([for $1], lb_file, [
AS_IF([test -r "$1"],
	[AS_VAR_SET(lb_file, [yes])],
	[AS_VAR_SET(lb_file, [no])])
])
AS_VAR_IF([lb_file], [yes], [$2], [$3])[]dnl
AS_VAR_POPDEF([lb_file])dnl
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:85: -1- AC_DEFUN([LB_ARG_LIBS_INCLUDES], [
lb_pathvar="m4_bpatsubst([$2], -, _)"
AC_MSG_CHECKING([for $1])
AC_ARG_WITH([$2],
	AC_HELP_STRING([--with-$2=path],
		[path to $1]),
	[], [withval=$4])
AS_IF([test "x$withval" = xyes],
	[eval "$lb_pathvar='$3'"],
	[eval "$lb_pathvar='$withval'"])
AC_MSG_RESULT([${!lb_pathvar:-no}])

AS_IF([test "x${!lb_pathvar}" != x -a "x${!lb_pathvar}" != xno], [
	AC_MSG_CHECKING([for $1 includes])
	AC_ARG_WITH([$2-includes],
		AC_HELP_STRING([--with-$2-includes=path],
			[path to $1 includes]),
		[], [withval="yes"])

	lb_includevar="${lb_pathvar}_includes"
	AS_IF([test "x$withval" = xyes],
		[eval "${lb_includevar}='${!lb_pathvar}/include'"],
		[eval "${lb_includevar}='$withval'"])
	AC_MSG_RESULT([${!lb_includevar}])

	AC_MSG_CHECKING([for $1 libs])
	AC_ARG_WITH([$2-libs],
		AC_HELP_STRING([--with-$2-libs=path],
			[path to $1 libs]),
		[], [withval="yes"])

	lb_libvar="${lb_pathvar}_libs"
	AS_IF([test "x$withval" = xyes],
		[eval "${lb_libvar}='${!lb_pathvar}/lib'"],
		[eval "${lb_libvar}='$withval'"])
	AC_MSG_RESULT([${!lb_libvar}])
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:104: -1- AC_DEFUN([LB_PATH_LUSTREIOKIT], [
AC_MSG_CHECKING([whether to build iokit])
AC_ARG_ENABLE([iokit],
	AC_HELP_STRING([--disable-iokit],
		[disable iokit (default is enable)]),
	[], [enable_iokit="yes"])
AC_MSG_RESULT([$enable_iokit])
AS_IF([test "x$enable_iokit" = xyes],
	[LUSTREIOKIT_SUBDIR="lustre-iokit"],
	[LUSTREIOKIT_SUBDIR=""])
AC_SUBST(LUSTREIOKIT_SUBDIR)
AM_CONDITIONAL([BUILD_LUSTREIOKIT], [test "x$enable_iokit" = xyes])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:117: -1- AC_DEFUN([LB_LIBCFS_DIR], [
AS_IF([test "x$libcfs_is_module" = xyes], [
		LIBCFS_INCLUDE_DIR="libcfs/include"
		LIBCFS_SUBDIR="libcfs"
	], [
		LIBCFS_INCLUDE_DIR="lnet/include"
		LIBCFS_SUBDIR=""
	])
AC_SUBST(LIBCFS_INCLUDE_DIR)
AC_SUBST(LIBCFS_SUBDIR)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:141: -1- AC_DEFUN([LB_LIBMOUNT], [
AC_CHECK_HEADER([libmount/libmount.h], [
	AC_CHECK_LIB([mount], [mnt_update_set_fs], [
		LDLIBMOUNT="-lmount"
		AC_SUBST(LDLIBMOUNT)
		AC_DEFINE(HAVE_LIBMOUNT, 1, [build with libmount])
		with_libmount="yes"
	],[with_libmount="no"])
], [with_libmount="no"])
AC_MSG_CHECKING([whether to build with libmount])
AS_IF([test "x$with_libmount" = xyes], [
	AC_MSG_RESULT([yes])
], [
	AC_MSG_RESULT([no])
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:152: -1- AC_DEFUN([LB_PATH_SNMP], [
LB_CHECK_FILE([$srcdir/snmp/lustre-snmp.c], [SNMP_DIST_SUBDIR="snmp"])
AC_SUBST(SNMP_DIST_SUBDIR)
AC_SUBST(SNMP_SUBDIR)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:183: -1- AC_DEFUN([LB_CONFIG_MODULES], [
AC_MSG_CHECKING([whether to build Linux kernel modules])
AC_ARG_ENABLE([modules],
	AC_HELP_STRING([--disable-modules],
		[disable building of Lustre kernel modules]),
	[], [
		LC_TARGET_SUPPORTED([enable_modules="yes"],
				    [enable_modules="no"])
	])
AC_MSG_RESULT([$enable_modules ($target_os)])

AS_IF([test "x$enable_modules" = xyes], [
	AS_CASE([$target_os],
		[linux*], [
			LB_PROG_LINUX
			LIBCFS_PROG_LINUX
			LN_PROG_LINUX
			AS_IF([test "x$enable_server" != xno], [LB_EXT4_SRC_DIR])
			LC_PROG_LINUX
		], [*], [
			# This is strange - Lustre supports a target we don't
			AC_MSG_ERROR([Modules are not supported on $target_os])
		])
	])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:197: -1- AC_DEFUN([LB_CONFIG_UTILS], [
AC_MSG_CHECKING([whether to build Lustre utilities])
AC_ARG_ENABLE([utils],
	AC_HELP_STRING([--disable-utils],
		[disable building of Lustre utility programs]),
	[], [enable_utils="yes"])
AC_MSG_RESULT([$enable_utils])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:211: -1- AC_DEFUN([LB_CONFIG_TESTS], [
AC_MSG_CHECKING([whether to build Lustre tests])
AC_ARG_ENABLE([tests],
	AC_HELP_STRING([--disable-tests],
		[disable building of Lustre tests]),
	[], [enable_tests="yes"])
AC_MSG_RESULT([$enable_tests])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:234: -1- AC_DEFUN([LB_CONFIG_DIST], [
AC_MSG_CHECKING([whether to configure just enough for make dist])
AC_ARG_ENABLE([dist],
	AC_HELP_STRING([--enable-dist],
			[only configure enough for make dist]),
	[], [enable_dist="no"])
AC_MSG_RESULT([$enable_dist])
AS_IF([test "x$enable_dist" != xno], [
	enable_doc="no"
	enable_utils="no"
	enable_tests="no"
	enable_modules="no"
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:251: -1- AC_DEFUN([LB_CONFIG_DOCS], [
AC_MSG_CHECKING([whether to build Lustre docs])
AC_ARG_ENABLE([doc],
	AC_HELP_STRING([--disable-doc],
			[skip creation of pdf documentation]),
	[], [enable_doc="no"])
AC_MSG_RESULT([$enable_doc])
AS_IF([test "x$enable_doc" = xyes],
	[ENABLE_DOC=1], [ENABLE_DOC=0])
AC_SUBST(ENABLE_DOC)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:265: -1- AC_DEFUN([LB_CONFIG_MANPAGES], [
AC_MSG_CHECKING([whether to build Lustre manpages])
AC_ARG_ENABLE([manpages],
	AC_HELP_STRING([--disable-manpages],
			[skip creation and inclusion of man pages (default is enable)]),
	[], [enable_manpages="yes"])
AC_MSG_RESULT([$enable_manpages])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:277: -1- AC_DEFUN([LB_CONFIG_HEADERS], [
AC_CONFIG_HEADERS([config.h])
CPPFLAGS="-include $PWD/undef.h -include $PWD/config.h $CPPFLAGS"
EXTRA_KCFLAGS="-include $PWD/undef.h -include $PWD/config.h $EXTRA_KCFLAGS"
AC_SUBST(EXTRA_KCFLAGS)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:287: -1- AC_DEFUN([LB_INCLUDE_RULES], [
INCLUDE_RULES="include $PWD/Rules"
AC_SUBST(INCLUDE_RULES)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:308: -1- AC_DEFUN([LB_PATH_DEFAULTS], [
# directories for binaries
AC_PREFIX_DEFAULT([/usr])

sysconfdir='/etc'
AC_SUBST(sysconfdir)

# Directories for documentation and demos.
docdir='${datadir}/doc/$(PACKAGE)'
AC_SUBST(docdir)

LIBCFS_PATH_DEFAULTS
LN_PATH_DEFAULTS
LC_PATH_DEFAULTS
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:340: -1- AC_DEFUN([LB_PROG_CC], [
AC_PROG_RANLIB
AC_CHECK_TOOL(LD, [ld], [no])
AC_CHECK_TOOL(OBJDUMP, [objdump], [no])
AC_CHECK_TOOL(STRIP, [strip], [no])

# ---------  unsigned long long sane? -------
AC_CHECK_SIZEOF(unsigned long long, 0)
AS_IF([test $ac_cv_sizeof_unsigned_long_long != 8],
	[AC_MSG_ERROR([we assume that sizeof(unsigned long long) == 8.])])

AS_IF([test $target_cpu = powerpc64], [
	AC_MSG_WARN([set compiler with -m64])
	CFLAGS="$CFLAGS -m64"
	CC="$CC -m64"
])

CPPFLAGS="-I$PWD/$LIBCFS_INCLUDE_DIR -I$PWD/lnet/include -I$PWD/lnet/include/uapi -I$PWD/lustre/include -I$PWD/lustre/include/uapi $CPPFLAGS"

CCASFLAGS="-Wall -fPIC -D_GNU_SOURCE"
AC_SUBST(CCASFLAGS)

# everyone builds against lnet and lustre
EXTRA_KCFLAGS="$EXTRA_KCFLAGS -g -I$PWD/$LIBCFS_INCLUDE_DIR -I$PWD/lnet/include -I$PWD/lustre/include"
AC_SUBST(EXTRA_KCFLAGS)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:362: -1- AC_DEFUN([LB_CC_NO_FORMAT_TRUNCATION], [
	AC_MSG_CHECKING([for -Wno-format-truncation support])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Wno-format-truncation"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		EXTRA_KCFLAGS="$EXTRA_KCFLAGS -Wno-format-truncation"
		AC_SUBST(EXTRA_KCFLAGS)
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:384: -1- AC_DEFUN([LB_CC_NO_STRINGOP_TRUNCATION], [
	AC_MSG_CHECKING([for -Wno-stringop-truncation support])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Wno-stringop-truncation"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		EXTRA_KCFLAGS="$EXTRA_KCFLAGS -Wno-stringop-truncation"
		AC_SUBST(EXTRA_KCFLAGS)
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:406: -1- AC_DEFUN([LB_CC_NO_STRINGOP_OVERFLOW], [
	AC_MSG_CHECKING([for -Wno-stringop-overflow support])

	saved_flags="$CFLAGS"
	CFLAGS="$CFLAGS -Wno-stringop-overflow"

	AC_COMPILE_IFELSE([AC_LANG_PROGRAM([], [])], [
		EXTRA_KCFLAGS="$EXTRA_KCFLAGS -Wno-stringop-overflow"
		AC_SUBST(EXTRA_KCFLAGS)
		AC_MSG_RESULT([yes])
	], [
		AC_MSG_RESULT([no])
	])

	CFLAGS="$saved_flags"
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:439: -1- AC_DEFUN([LB_CONDITIONALS], [
AM_CONDITIONAL([PLUGINS], [test x$enable_shared = xyes])
AM_CONDITIONAL([MODULES], [test x$enable_modules = xyes])
AM_CONDITIONAL([UTILS], [test x$enable_utils = xyes])
AM_CONDITIONAL([TESTS], [test x$enable_tests = xyes])
AM_CONDITIONAL([DOC], [test x$ENABLE_DOC = x1])
AM_CONDITIONAL([MANPAGES], [test x$enable_manpages = xyes])
AM_CONDITIONAL([LINUX], [test x$lb_target_os = xlinux])
AM_CONDITIONAL([USE_QUILT], [test x$use_quilt = xyes])
AM_CONDITIONAL([RHEL], [test x$RHEL_KERNEL = xyes])
AM_CONDITIONAL([SUSE], [test x$SUSE_KERNEL = xyes])
AM_CONDITIONAL([UBUNTU], [test x$UBUNTU_KERNEL = xyes])

# Sanity check for PCLMULQDQ instruction availability
# PCLMULQDQ instruction is a new instruction available beginning with
# the all new Core processor family based on the 32nm microarchitecture
# codename Westmere. So, $target_cpu = x86_64 should have this instruction
# except MIC microarchitecture (k1om).
AM_CONDITIONAL(HAVE_PCLMULQDQ, test x$target_cpu = "xx86_64" -a x$target_vendor != "xk1om")
AS_IF([test x$target_cpu = "xx86_64" -a x$target_vendor != "xk1om"],
	[AC_DEFINE(HAVE_PCLMULQDQ, 1, [have PCLMULQDQ instruction])])

LIBCFS_CONDITIONALS
LN_CONDITIONALS
LC_CONDITIONALS
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:464: -1- AC_DEFUN([LB_CONFIG_FILES], [
	AC_CONFIG_FILES([
		Makefile
		autoMakefile]
		config/Makefile
		[Rules:build/Rules.in]
		AC_PACKAGE_TARNAME[.spec]
		AC_PACKAGE_TARNAME[-dkms.spec]
		ldiskfs/Makefile
		ldiskfs/autoMakefile
		lustre-iokit/Makefile
		lustre-iokit/obdfilter-survey/Makefile
		lustre-iokit/ost-survey/Makefile
		lustre-iokit/sgpdd-survey/Makefile
		lustre-iokit/mds-survey/Makefile
		lustre-iokit/ior-survey/Makefile
		lustre-iokit/stats-collect/Makefile
	)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:513: -1- AC_DEFUN([LB_CONFIG_SERVERS], [
AC_ARG_ENABLE([server],
	AC_HELP_STRING([--disable-server],
			[disable Lustre server support]), [
		AS_IF([test x$enable_server != xyes -a x$enable_server != xno],
			[AC_MSG_ERROR([server valid options are "yes" or "no"])])
		AS_IF([test x$enable_server = xyes -a x$enable_dist = xyes],
			[AC_MSG_ERROR([--enable-server cannot be used with --enable-dist])])
	], [
		AS_IF([test x$enable_dist = xyes],
			[enable_server=no], [enable_server=maybe])
	])

# There are at least two good reasons why we should really run
# LB_CONFIG_MODULES elsewhere before the call to LB_CONFIG_SERVERS:
# LB_CONFIG_MODULES needs to be run for client support even when
# servers are disabled, and because module support is actually a
# prerequisite of server support.  However, some things under
# LB_CONFIG_MODULES need us to already have checked for --disable-server,
# before running, so until LB_CONFIG_MODULES can be reorganized, we
# call it here.
LB_CONFIG_MODULES
AS_IF([test x$enable_modules = xno], [enable_server=no])
LB_CONFIG_LDISKFS
LB_CONFIG_ZFS

# If no backends were configured, and the user did not explicitly
# require servers to be enabled, we just disable servers.
AS_IF([test x$enable_ldiskfs = xno -a x$enable_zfs = xno], [
	AS_CASE([$enable_server],
		[maybe], [enable_server=no],
		[yes], [AC_MSG_ERROR([cannot enable servers, no backends were configured])])
	], [
		AS_IF([test x$enable_server = xmaybe], [enable_server=yes])
	])

AC_MSG_CHECKING([whether to build Lustre server support])
AC_MSG_RESULT([$enable_server])
AS_IF([test x$enable_server = xyes], [
	AC_DEFINE(HAVE_SERVER_SUPPORT, 1, [support server])
	AC_SUBST(ENABLE_SERVER, yes)
], [
	AC_SUBST(ENABLE_SERVER, no)
])
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:605: -1- AC_DEFUN([LB_CONFIG_RPMBUILD_OPTIONS], [
RPMBINARGS=
CONFIGURE_ARGS=
eval set -- $ac_configure_args
for arg; do
	case $arg in
		--*dir=* ) ;;
		-C | --cache-file=* ) ;;
		--prefix=* | --*-prefix=* ) ;;
		--enable-dist ) ;;
		--with-kmp-moddir=* ) ;;
		--with-linux=* | --with-linux-obj=* ) ;;
		--enable-shared | --disable-shared ) ;;
		--enable-static | --disable-static ) ;;
		--enable-ldiskfs | --disable-ldiskfs ) ;;
		--enable-modules | --disable-modules ) ;;
		--enable-server | --disable-server ) ;;
		--enable-tests | --disable-tests ) ;;
		--enable-utils | --disable-utils ) ;;
		--enable-iokit | --disable-iokit ) ;;
		--enable-manpages | --disable-manpages ) ;;
		* ) CONFIGURE_ARGS="$CONFIGURE_ARGS '$arg'" ;;
	esac
done
if test -n "$CONFIGURE_ARGS" ; then
	RPMBINARGS="$RPMBINARGS --define \"configure_args $CONFIGURE_ARGS\""
fi
if test -n "$LINUX" ; then
	RPMBINARGS="$RPMBINARGS --define \"kdir $LINUX\""
	if test -n "$LINUX_OBJ" -a "$LINUX_OBJ" != x"$LINUX" ; then
		RPMBINARGS="$RPMBINARGS --define \"kobjdir $LINUX_OBJ\""
	fi
fi
if test x$enable_modules != xyes ; then
	RPMBINARGS="$RPMBINARGS --without lustre_modules"
fi
if test x$enable_tests != xyes ; then
	RPMBINARGS="$RPMBINARGS --without lustre_tests"
fi
if test x$enable_utils != xyes ; then
	RPMBINARGS="$RPMBINARGS --without lustre_utils"
fi
if test x$enable_server != xyes ; then
	RPMBINARGS="$RPMBINARGS --without servers"
fi
if test x$enable_ldiskfs != xyes ; then
	RPMBINARGS="$RPMBINARGS --without ldiskfs"
fi
if test x$enable_zfs = xyes ; then
	RPMBINARGS="$RPMBINARGS --with zfs"
fi
if test x$enable_gss_keyring = xyes ; then
	RPMBINARGS="$RPMBINARGS --with gss_keyring --with gss"
fi
if test x$enable_gss = xyes ; then
	RPMBINARGS="$RPMBINARGS --with gss"
	AC_SUBST(ENABLE_GSS, yes)
elif test x$enable_gss = xno ; then
	RPMBINARGS="$RPMBINARGS --without gss"
	AC_SUBST(ENABLE_GSS, no)
fi
if test x$enable_iokit != xyes ; then
	RPMBINARGS="$RPMBINARGS --without lustre_iokit"
fi
if test x$enable_snmp != xyes ; then
	RPMBINARGS="$RPMBINARGS --without snmp"
fi
if test x$enable_manpages != xyes ; then
	RPMBINARGS="$RPMBINARGS --without manpages"
fi
if test x$enable_shared != xyes ; then
	RPMBINARGS="$RPMBINARGS --without shared"
fi
if test x$enable_static != xyes ; then
	RPMBINARGS="$RPMBINARGS --without static"
fi

RPMBUILD_BINARY_ARGS=$RPMBINARGS

AC_SUBST(RPMBUILD_BINARY_ARGS)
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-build.m4:688: -1- AC_DEFUN([LB_CONFIGURE], [
AC_MSG_NOTICE([Lustre base checks
==============================================================================])
LB_CANONICAL_SYSTEM

LB_CONFIG_DIST

LB_DOWNSTREAM_RELEASE
LB_USES_DPKG

LB_LIBCFS_DIR

LB_INCLUDE_RULES

LB_PATH_DEFAULTS

LB_PROG_CC
LB_CC_NO_FORMAT_TRUNCATION
LB_CC_NO_STRINGOP_TRUNCATION
LB_CC_NO_STRINGOP_OVERFLOW

LC_OSD_ADDON

LB_CONFIG_DOCS
LB_CONFIG_MANPAGES
LB_CONFIG_UTILS
LB_CONFIG_TESTS
LC_CONFIG_CLIENT
LB_CONFIG_MPITESTS
LB_CONFIG_SERVERS

# Tests depends from utils (multiop from liblustreapi)
AS_IF([test "x$enable_utils" = xno], [enable_tests="no"])

LIBCFS_CONFIG_CDEBUG
LC_QUOTA

LB_LIBMOUNT
LB_PATH_SNMP
LB_PATH_LUSTREIOKIT

LB_DEFINE_E2FSPROGS_NAMES

LIBCFS_CONFIGURE
LN_CONFIGURE
LC_CONFIGURE
AS_IF([test -n "$SNMP_DIST_SUBDIR"], [LS_CONFIGURE])

LB_CONDITIONALS
LB_CONFIG_HEADERS

LIBCFS_CONFIG_FILES
LB_CONFIG_FILES
LN_CONFIG_FILES
LC_CONFIG_FILES
AS_IF([test -n "$SNMP_DIST_SUBDIR"], [LS_CONFIG_FILES])

AC_SUBST(ac_configure_args)

MOSTLYCLEANFILES='.*.cmd .*.flags *.o *.ko *.mod.c .depend .*.1.* Modules.symvers Module.symvers'
AC_SUBST(MOSTLYCLEANFILES)

LB_CONFIG_RPMBUILD_OPTIONS

AC_OUTPUT

cat <<_ACEOF

CC:            $CC
LD:            $LD
CPPFLAGS:      $CPPFLAGS
CFLAGS:        $CFLAGS
EXTRA_KCFLAGS: $EXTRA_KCFLAGS

Type 'make' to build Lustre.
_ACEOF
])
m4trace:/Users/crb002/github/lustre-release/config/lustre-version.m4:20: -1- AC_DEFUN([LUSTRE_VERSION_CPP_MACROS], [
LUSTRE_MAJOR=`echo AC_PACKAGE_VERSION | sed -re ['s/([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?.*/\1/']`
LUSTRE_MINOR=`echo AC_PACKAGE_VERSION | sed -re ['s/([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?.*/\2/']`
LUSTRE_PATCH=`echo AC_PACKAGE_VERSION | sed -re ['s/([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?.*/\3/']`
LUSTRE_FIX=`echo AC_PACKAGE_VERSION | sed -re ['s/([0-9]+)\.([0-9]+)\.([0-9]+)(\.([0-9]+))?.*/\5/']`
AS_IF([test -z "$LUSTRE_FIX"], [LUSTRE_FIX="0"])

AC_DEFINE_UNQUOTED([LUSTRE_MAJOR], [$LUSTRE_MAJOR], [First number in the Lustre version])
AC_DEFINE_UNQUOTED([LUSTRE_MINOR], [$LUSTRE_MINOR], [Second number in the Lustre version])
AC_DEFINE_UNQUOTED([LUSTRE_PATCH], [$LUSTRE_PATCH], [Third number in the Lustre version])
AC_DEFINE_UNQUOTED([LUSTRE_FIX], [$LUSTRE_FIX], [Fourth number in the Lustre version])
# Even though the code could just use VERSION or PACKAGE_VERSION directly,
# we use this copy named LUSTRE_VERSION_STRING instead to maintain less
# divergence from the Lustre client code in the upstream Linux kernel code.
AC_DEFINE_UNQUOTED([LUSTRE_VERSION_STRING], ["$PACKAGE_VERSION"], [A copy of PACKAGE_VERSION])

])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^_?A[CHUM]_])
m4trace:configure.ac:3: -1- m4_pattern_forbid([_AC_])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^LIBOBJS$], [do not use LIBOBJS directly, use AC_LIBOBJ (see section `AC_LIBOBJ vs LIBOBJS'])
m4trace:configure.ac:3: -1- m4_pattern_allow([^AS_FLAGS$])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^_?m4_])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^dnl$])
m4trace:configure.ac:3: -1- m4_pattern_forbid([^_?AS_])
m4trace:configure.ac:3: -1- m4_pattern_allow([^SHELL$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PATH_SEPARATOR$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^exec_prefix$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^prefix$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^program_transform_name$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^bindir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^sbindir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^libexecdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^datarootdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^datadir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^sharedstatedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^localstatedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^includedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^oldincludedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^infodir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^htmldir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^dvidir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^pdfdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^psdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^libdir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^localedir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^mandir$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_NAME$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_TARNAME$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_VERSION$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_STRING$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_BUGREPORT$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^PACKAGE_URL$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^DEFS$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^ECHO_C$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^ECHO_N$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^ECHO_T$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^build_alias$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^host_alias$])
m4trace:configure.ac:3: -1- m4_pattern_allow([^target_alias$])
m4trace:configure.ac:6: -1- AC_CONFIG_MACRO_DIR([config])
m4trace:configure.ac:8: -1- LC_CONFIG_SRCDIR
m4trace:configure.ac:10: -1- _m4_warn([obsolete], [The macro `AC_CANONICAL_SYSTEM' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:1857: AC_CANONICAL_SYSTEM is expanded from...
configure.ac:10: the top level])
m4trace:configure.ac:10: -1- m4_pattern_allow([^build$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^build_cpu$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^build_vendor$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^build_os$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^host$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^host_cpu$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^host_vendor$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^host_os$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^target$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^target_cpu$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^target_vendor$])
m4trace:configure.ac:10: -1- m4_pattern_allow([^target_os$])
m4trace:configure.ac:12: -1- AM_INIT_AUTOMAKE([1.10 tar-ustar -Wno-portability subdir-objects])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AM_[A-Z]+FLAGS$])
m4trace:configure.ac:12: -1- AM_SET_CURRENT_AUTOMAKE_VERSION
m4trace:configure.ac:12: -1- AM_AUTOMAKE_VERSION([1.15])
m4trace:configure.ac:12: -1- _AM_AUTOCONF_VERSION([2.69])
m4trace:configure.ac:12: -1- m4_pattern_allow([^INSTALL_PROGRAM$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^INSTALL_SCRIPT$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^INSTALL_DATA$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^am__isrc$])
m4trace:configure.ac:12: -1- _AM_SUBST_NOTMAKE([am__isrc])
m4trace:configure.ac:12: -1- m4_pattern_allow([^CYGPATH_W$])
m4trace:configure.ac:12: -1- _AM_SET_OPTIONS([1.10 tar-ustar -Wno-portability subdir-objects])
m4trace:configure.ac:12: -1- _AM_SET_OPTION([1.10])
m4trace:configure.ac:12: -2- _AM_MANGLE_OPTION([1.10])
m4trace:configure.ac:12: -1- _AM_SET_OPTION([tar-ustar])
m4trace:configure.ac:12: -2- _AM_MANGLE_OPTION([tar-ustar])
m4trace:configure.ac:12: -1- _AM_SET_OPTION([-Wno-portability])
m4trace:configure.ac:12: -2- _AM_MANGLE_OPTION([-Wno-portability])
m4trace:configure.ac:12: -1- _AM_SET_OPTION([subdir-objects])
m4trace:configure.ac:12: -2- _AM_MANGLE_OPTION([subdir-objects])
m4trace:configure.ac:12: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:12: -1- _AM_IF_OPTION([no-define], [], [AC_DEFINE_UNQUOTED([PACKAGE], ["$PACKAGE"], [Name of package])
 AC_DEFINE_UNQUOTED([VERSION], ["$VERSION"], [Version number of package])])
m4trace:configure.ac:12: -2- _AM_MANGLE_OPTION([no-define])
m4trace:configure.ac:12: -1- m4_pattern_allow([^PACKAGE$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^VERSION$])
m4trace:configure.ac:12: -1- AM_SANITY_CHECK
m4trace:configure.ac:12: -1- AM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])
m4trace:configure.ac:12: -1- AM_MISSING_HAS_RUN
m4trace:configure.ac:12: -1- AM_AUX_DIR_EXPAND
m4trace:configure.ac:12: -1- m4_pattern_allow([^ACLOCAL$])
m4trace:configure.ac:12: -1- AM_MISSING_PROG([AUTOCONF], [autoconf])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AUTOCONF$])
m4trace:configure.ac:12: -1- AM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AUTOMAKE$])
m4trace:configure.ac:12: -1- AM_MISSING_PROG([AUTOHEADER], [autoheader])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AUTOHEADER$])
m4trace:configure.ac:12: -1- AM_MISSING_PROG([MAKEINFO], [makeinfo])
m4trace:configure.ac:12: -1- m4_pattern_allow([^MAKEINFO$])
m4trace:configure.ac:12: -1- AM_PROG_INSTALL_SH
m4trace:configure.ac:12: -1- m4_pattern_allow([^install_sh$])
m4trace:configure.ac:12: -1- AM_PROG_INSTALL_STRIP
m4trace:configure.ac:12: -1- m4_pattern_allow([^STRIP$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^INSTALL_STRIP_PROGRAM$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^MKDIR_P$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^mkdir_p$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AWK$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^SET_MAKE$])
m4trace:configure.ac:12: -1- AM_SET_LEADING_DOT
m4trace:configure.ac:12: -1- m4_pattern_allow([^am__leading_dot$])
m4trace:configure.ac:12: -1- _AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])], [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],
			     [_AM_PROG_TAR([v7])])])
m4trace:configure.ac:12: -2- _AM_MANGLE_OPTION([tar-ustar])
m4trace:configure.ac:12: -1- _AM_PROG_TAR([ustar])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AMTAR$])
m4trace:configure.ac:12: -1- AM_RUN_LOG([$_am_tar --version])
m4trace:configure.ac:12: -1- AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])
m4trace:configure.ac:12: -1- AM_RUN_LOG([$am__untar <conftest.tar])
m4trace:configure.ac:12: -1- AM_RUN_LOG([cat conftest.dir/file])
m4trace:configure.ac:12: -1- m4_pattern_allow([^am__tar$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^am__untar$])
m4trace:configure.ac:12: -1- _AM_IF_OPTION([no-dependencies], [], [AC_PROVIDE_IFELSE([AC_PROG_CC],
		  [_AM_DEPENDENCIES([CC])],
		  [m4_define([AC_PROG_CC],
			     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_CXX],
		  [_AM_DEPENDENCIES([CXX])],
		  [m4_define([AC_PROG_CXX],
			     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJC],
		  [_AM_DEPENDENCIES([OBJC])],
		  [m4_define([AC_PROG_OBJC],
			     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl
AC_PROVIDE_IFELSE([AC_PROG_OBJCXX],
		  [_AM_DEPENDENCIES([OBJCXX])],
		  [m4_define([AC_PROG_OBJCXX],
			     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl
])
m4trace:configure.ac:12: -2- _AM_MANGLE_OPTION([no-dependencies])
m4trace:configure.ac:12: -1- AM_SILENT_RULES
m4trace:configure.ac:12: -1- m4_pattern_allow([^AM_V$])
m4trace:configure.ac:12: -1- AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:12: -1- _AM_SUBST_NOTMAKE([AM_V])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AM_DEFAULT_V$])
m4trace:configure.ac:12: -1- AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:12: -1- _AM_SUBST_NOTMAKE([AM_DEFAULT_V])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AM_DEFAULT_VERBOSITY$])
m4trace:configure.ac:12: -1- m4_pattern_allow([^AM_BACKSLASH$])
m4trace:configure.ac:12: -1- _AM_SUBST_NOTMAKE([AM_BACKSLASH])
m4trace:configure.ac:13: -1- AM_MAINTAINER_MODE([enable])
m4trace:configure.ac:13: -1- AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])
m4trace:configure.ac:13: -1- m4_pattern_allow([^MAINTAINER_MODE_TRUE$])
m4trace:configure.ac:13: -1- m4_pattern_allow([^MAINTAINER_MODE_FALSE$])
m4trace:configure.ac:13: -1- _AM_SUBST_NOTMAKE([MAINTAINER_MODE_TRUE])
m4trace:configure.ac:13: -1- _AM_SUBST_NOTMAKE([MAINTAINER_MODE_FALSE])
m4trace:configure.ac:13: -1- m4_pattern_allow([^MAINT$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CFLAGS$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^LDFLAGS$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^LIBS$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CC$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^ac_ct_CC$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^EXEEXT$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^OBJEXT$])
m4trace:configure.ac:15: -1- _AM_PROG_CC_C_O
m4trace:configure.ac:15: -1- AM_RUN_LOG([$CC -c conftest.$ac_ext -o conftest2.$ac_objext])
m4trace:configure.ac:15: -1- _AM_DEPENDENCIES([CC])
m4trace:configure.ac:15: -1- AM_SET_DEPDIR
m4trace:configure.ac:15: -1- m4_pattern_allow([^DEPDIR$])
m4trace:configure.ac:15: -1- AM_OUTPUT_DEPENDENCY_COMMANDS
m4trace:configure.ac:15: -1- AM_MAKE_INCLUDE
m4trace:configure.ac:15: -1- m4_pattern_allow([^am__include$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^am__quote$])
m4trace:configure.ac:15: -1- AM_DEP_TRACK
m4trace:configure.ac:15: -1- AM_CONDITIONAL([AMDEP], [test "x$enable_dependency_tracking" != xno])
m4trace:configure.ac:15: -1- m4_pattern_allow([^AMDEP_TRUE$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^AMDEP_FALSE$])
m4trace:configure.ac:15: -1- _AM_SUBST_NOTMAKE([AMDEP_TRUE])
m4trace:configure.ac:15: -1- _AM_SUBST_NOTMAKE([AMDEP_FALSE])
m4trace:configure.ac:15: -1- m4_pattern_allow([^AMDEPBACKSLASH$])
m4trace:configure.ac:15: -1- _AM_SUBST_NOTMAKE([AMDEPBACKSLASH])
m4trace:configure.ac:15: -1- m4_pattern_allow([^am__nodep$])
m4trace:configure.ac:15: -1- _AM_SUBST_NOTMAKE([am__nodep])
m4trace:configure.ac:15: -1- m4_pattern_allow([^CCDEPMODE$])
m4trace:configure.ac:15: -1- AM_CONDITIONAL([am__fastdepCC], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CC_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:15: -1- m4_pattern_allow([^am__fastdepCC_TRUE$])
m4trace:configure.ac:15: -1- m4_pattern_allow([^am__fastdepCC_FALSE$])
m4trace:configure.ac:15: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_TRUE])
m4trace:configure.ac:15: -1- _AM_SUBST_NOTMAKE([am__fastdepCC_FALSE])
m4trace:configure.ac:16: -1- AC_PROG_LIBTOOL
m4trace:configure.ac:16: -1- _m4_warn([obsolete], [The macro `AC_PROG_LIBTOOL' is obsolete.
You should run autoupdate.], [/Users/crb002/github/lustre-release/config/libtool.m4:99: AC_PROG_LIBTOOL is expanded from...
configure.ac:16: the top level])
m4trace:configure.ac:16: -1- LT_INIT
m4trace:configure.ac:16: -1- m4_pattern_forbid([^_?LT_[A-Z_]+$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])
m4trace:configure.ac:16: -1- LTOPTIONS_VERSION
m4trace:configure.ac:16: -1- LTSUGAR_VERSION
m4trace:configure.ac:16: -1- LTVERSION_VERSION
m4trace:configure.ac:16: -1- LTOBSOLETE_VERSION
m4trace:configure.ac:16: -1- _LT_PROG_LTMAIN
m4trace:configure.ac:16: -1- m4_pattern_allow([^LIBTOOL$])
m4trace:configure.ac:16: -1- _LT_PREPARE_SED_QUOTE_VARS
m4trace:configure.ac:16: -1- _LT_PROG_ECHO_BACKSLASH
m4trace:configure.ac:16: -1- LT_PATH_LD
m4trace:configure.ac:16: -1- m4_pattern_allow([^SED$])
m4trace:configure.ac:16: -1- AC_PROG_EGREP
m4trace:configure.ac:16: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^EGREP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^FGREP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^GREP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^LD$])
m4trace:configure.ac:16: -1- LT_PATH_NM
m4trace:configure.ac:16: -1- m4_pattern_allow([^DUMPBIN$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^ac_ct_DUMPBIN$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^DUMPBIN$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^NM$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^LN_S$])
m4trace:configure.ac:16: -1- LT_CMD_MAX_LEN
m4trace:configure.ac:16: -1- m4_pattern_allow([^OBJDUMP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^OBJDUMP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^DLLTOOL$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^DLLTOOL$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^ac_ct_AR$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^STRIP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^RANLIB$])
m4trace:configure.ac:16: -1- _LT_WITH_SYSROOT
m4trace:configure.ac:16: -1- m4_pattern_allow([LT_OBJDIR])
m4trace:configure.ac:16: -1- m4_pattern_allow([^LT_OBJDIR$])
m4trace:configure.ac:16: -1- _LT_CC_BASENAME([$compiler])
m4trace:configure.ac:16: -1- _LT_PATH_TOOL_PREFIX([${ac_tool_prefix}file], [/usr/bin$PATH_SEPARATOR$PATH])
m4trace:configure.ac:16: -1- _LT_PATH_TOOL_PREFIX([file], [/usr/bin$PATH_SEPARATOR$PATH])
m4trace:configure.ac:16: -1- LT_SUPPORTED_TAG([CC])
m4trace:configure.ac:16: -1- _LT_COMPILER_BOILERPLATE
m4trace:configure.ac:16: -1- _LT_LINKER_BOILERPLATE
m4trace:configure.ac:16: -1- _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions], [lt_cv_prog_compiler_rtti_exceptions], [-fno-rtti -fno-exceptions], [], [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, )="$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, ) -fno-rtti -fno-exceptions"])
m4trace:configure.ac:16: -1- _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, ) works], [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, )], [$_LT_TAGVAR(lt_prog_compiler_pic, )@&t@m4_if([],[],[ -DPIC],[m4_if([],[CXX],[ -DPIC],[])])], [], [case $_LT_TAGVAR(lt_prog_compiler_pic, ) in
     "" | " "*) ;;
     *) _LT_TAGVAR(lt_prog_compiler_pic, )=" $_LT_TAGVAR(lt_prog_compiler_pic, )" ;;
     esac], [_LT_TAGVAR(lt_prog_compiler_pic, )=
     _LT_TAGVAR(lt_prog_compiler_can_build_shared, )=no])
m4trace:configure.ac:16: -1- _LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works], [lt_cv_prog_compiler_static_works], [$lt_tmp_static_flag], [], [_LT_TAGVAR(lt_prog_compiler_static, )=])
m4trace:configure.ac:16: -1- m4_pattern_allow([^MANIFEST_TOOL$])
m4trace:configure.ac:16: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:16: -1- _LT_DLL_DEF_P([$export_symbols])
m4trace:configure.ac:16: -1- _LT_REQUIRED_DARWIN_CHECKS
m4trace:configure.ac:16: -1- m4_pattern_allow([^DSYMUTIL$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^NMEDIT$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^LIPO$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^OTOOL$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^OTOOL64$])
m4trace:configure.ac:16: -1- _LT_LINKER_OPTION([if $CC understands -b], [lt_cv_prog_compiler__b], [-b], [_LT_TAGVAR(archive_cmds, )='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'], [_LT_TAGVAR(archive_cmds, )='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])
m4trace:configure.ac:16: -1- m4_pattern_allow([^LT_SYS_LIBRARY_PATH$])
m4trace:configure.ac:16: -1- LT_SYS_DLOPEN_SELF
m4trace:configure.ac:16: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^CPPFLAGS$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^CPP$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^STDC_HEADERS$])
m4trace:configure.ac:16: -1- m4_pattern_allow([^HAVE_DLFCN_H$])
m4trace:configure.ac:18: -1- AM_PROG_AS
m4trace:configure.ac:18: -1- m4_pattern_allow([^CCAS$])
m4trace:configure.ac:18: -1- m4_pattern_allow([^CCASFLAGS$])
m4trace:configure.ac:18: -1- _AM_IF_OPTION([no-dependencies], [], [_AM_DEPENDENCIES([CCAS])])
m4trace:configure.ac:18: -2- _AM_MANGLE_OPTION([no-dependencies])
m4trace:configure.ac:18: -1- _AM_DEPENDENCIES([CCAS])
m4trace:configure.ac:18: -1- m4_pattern_allow([^CCASDEPMODE$])
m4trace:configure.ac:18: -1- AM_CONDITIONAL([am__fastdepCCAS], [
  test "x$enable_dependency_tracking" != xno \
  && test "$am_cv_CCAS_dependencies_compiler_type" = gcc3])
m4trace:configure.ac:18: -1- m4_pattern_allow([^am__fastdepCCAS_TRUE$])
m4trace:configure.ac:18: -1- m4_pattern_allow([^am__fastdepCCAS_FALSE$])
m4trace:configure.ac:18: -1- _AM_SUBST_NOTMAKE([am__fastdepCCAS_TRUE])
m4trace:configure.ac:18: -1- _AM_SUBST_NOTMAKE([am__fastdepCCAS_FALSE])
m4trace:configure.ac:20: -1- m4_pattern_allow([^RPMBUILD$])
m4trace:configure.ac:21: -1- m4_pattern_allow([^AR$])
m4trace:configure.ac:21: -1- m4_pattern_allow([^ac_ct_AR$])
m4trace:configure.ac:23: -1- LUSTRE_VERSION_CPP_MACROS
m4trace:configure.ac:23: -1- m4_pattern_allow([^LUSTRE_MAJOR$])
m4trace:configure.ac:23: -1- m4_pattern_allow([^LUSTRE_MINOR$])
m4trace:configure.ac:23: -1- m4_pattern_allow([^LUSTRE_PATCH$])
m4trace:configure.ac:23: -1- m4_pattern_allow([^LUSTRE_FIX$])
m4trace:configure.ac:23: -1- m4_pattern_allow([^LUSTRE_VERSION_STRING$])
m4trace:configure.ac:24: -1- LB_CONFIGURE
m4trace:configure.ac:24: -1- LB_CANONICAL_SYSTEM
m4trace:configure.ac:24: -1- m4_pattern_allow([^lb_target_os$])
m4trace:configure.ac:24: -1- LB_CONFIG_DIST
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:234: LB_CONFIG_DIST is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_DOWNSTREAM_RELEASE
m4trace:configure.ac:24: -1- LB_USES_DPKG
m4trace:configure.ac:24: -1- LB_LIBCFS_DIR
m4trace:configure.ac:24: -1- m4_pattern_allow([^LIBCFS_INCLUDE_DIR$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LIBCFS_SUBDIR$])
m4trace:configure.ac:24: -1- LB_INCLUDE_RULES
m4trace:configure.ac:24: -1- m4_pattern_allow([^INCLUDE_RULES$])
m4trace:configure.ac:24: -1- LB_PATH_DEFAULTS
m4trace:configure.ac:24: -1- m4_pattern_allow([^sysconfdir$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^docdir$])
m4trace:configure.ac:24: -1- LIBCFS_PATH_DEFAULTS
m4trace:configure.ac:24: -1- LN_PATH_DEFAULTS
m4trace:configure.ac:24: -1- LC_PATH_DEFAULTS
m4trace:configure.ac:24: -1- m4_pattern_allow([^LUSTRE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^rootsbindir$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^demodir$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^pkgexampledir$])
m4trace:configure.ac:24: -1- LB_PROG_CC
m4trace:configure.ac:24: -1- m4_pattern_allow([^RANLIB$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LD$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^OBJDUMP$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^STRIP$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SIZEOF_UNSIGNED_LONG_LONG$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CCASFLAGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_KCFLAGS$])
m4trace:configure.ac:24: -1- LB_CC_NO_FORMAT_TRUNCATION
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_KCFLAGS$])
m4trace:configure.ac:24: -1- LB_CC_NO_STRINGOP_TRUNCATION
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_KCFLAGS$])
m4trace:configure.ac:24: -1- LB_CC_NO_STRINGOP_OVERFLOW
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_KCFLAGS$])
m4trace:configure.ac:24: -1- LC_OSD_ADDON
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3306: LC_OSD_ADDON is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^OSDADDON$])
m4trace:configure.ac:24: -1- LB_CONFIG_DOCS
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:251: LB_CONFIG_DOCS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_DOC$])
m4trace:configure.ac:24: -1- LB_CONFIG_MANPAGES
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:265: LB_CONFIG_MANPAGES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_CONFIG_UTILS
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:197: LB_CONFIG_UTILS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_CONFIG_TESTS
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:211: LB_CONFIG_TESTS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LC_CONFIG_CLIENT
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3185: LC_CONFIG_CLIENT is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_CONFIG_MPITESTS
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3233: LB_CONFIG_MPITESTS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MPI_BIN$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MPICC_WRAPPER$])
m4trace:configure.ac:24: -1- LB_CONFIG_SERVERS
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_CONFIG_MODULES
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LC_TARGET_SUPPORTED([enable_modules="yes"], [enable_modules="no"])
m4trace:configure.ac:24: -1- LB_PROG_LINUX
m4trace:configure.ac:24: -1- LB_LINUX_PATH
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:365: LB_LINUX_PATH is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:426: LB_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_ARG_CANON_PATH([linux], [LINUX])
m4trace:configure.ac:24: -1- __LB_ARG_CANON_PATH([linux], [linux], [LINUX])
m4trace:configure.ac:24: -1- LB_ARG_REPLACE_PATH([linux], [$LINUX])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LINUX$])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX], [], [AC_MSG_ERROR([Kernel source $LINUX could not be found.])])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:365: LB_LINUX_PATH is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:426: LB_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_ARG_CANON_PATH([linux-obj], [LINUX_OBJ])
m4trace:configure.ac:24: -1- __LB_ARG_CANON_PATH([linux-obj], [linux_obj], [LINUX_OBJ])
m4trace:configure.ac:24: -1- LB_ARG_REPLACE_PATH([linux-obj], [$LINUX_OBJ])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LINUX_OBJ$])
m4trace:configure.ac:24: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1490: AC_ARG_WITH is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:365: LB_LINUX_PATH is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:426: LB_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_ARG_CANON_PATH([linux-config], [LINUX_CONFIG])
m4trace:configure.ac:24: -1- __LB_ARG_CANON_PATH([linux-config], [linux_config], [LINUX_CONFIG])
m4trace:configure.ac:24: -1- LB_ARG_REPLACE_PATH([linux-config], [$LINUX_CONFIG])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX_CONFIG], [], [AC_MSG_ERROR([

Kernel config could not be found.
])
])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LINUX_CONFIG$])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([/boot/kernel.h], [KERNEL_SOURCE_HEADER='/boot/kernel.h'], [LB_CHECK_FILE([/var/adm/running-kernel.h],
		[KERNEL_SOURCE_HEADER='/var/adm/running-kernel.h'])])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([/var/adm/running-kernel.h], [KERNEL_SOURCE_HEADER='/var/adm/running-kernel.h'])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:365: LB_LINUX_PATH is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:426: LB_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_ARG_CANON_PATH([kernel-source-header], [KERNEL_SOURCE_HEADER])
m4trace:configure.ac:24: -1- __LB_ARG_CANON_PATH([kernel-source-header], [kernel_source_header], [KERNEL_SOURCE_HEADER])
m4trace:configure.ac:24: -1- LB_ARG_REPLACE_PATH([kernel-source-header], [$KERNEL_SOURCE_HEADER])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX_OBJ/include/generated/autoconf.h], [AUTOCONF_HDIR=generated], [LB_CHECK_FILE([$LINUX_OBJ/include/linux/autoconf.h],
		[AUTOCONF_HDIR=linux],
		[AC_MSG_ERROR([Run make config in $LINUX.])])])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX_OBJ/include/linux/autoconf.h], [AUTOCONF_HDIR=linux], [AC_MSG_ERROR([Run make config in $LINUX.])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^AUTOCONF_HDIR$])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX_OBJ/include/linux/version.h], [VERSION_HDIR=linux], [LB_CHECK_FILE([$LINUX_OBJ/include/generated/uapi/linux/version.h],
		[VERSION_HDIR=generated/uapi/linux],
		[AC_MSG_ERROR([Run make config in $LINUX.])])])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX_OBJ/include/generated/uapi/linux/version.h], [VERSION_HDIR=generated/uapi/linux], [AC_MSG_ERROR([Run make config in $LINUX.])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^VERSION_HDIR$])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX/include/linux/kconfig.h], [CONFIG_INCLUDE=$LINUX/include/linux/kconfig.h], [CONFIG_INCLUDE=include/$AUTOCONF_HDIR/autoconf.h])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_INCLUDE$])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$KERNEL_SOURCE_HEADER], [
		AS_IF([test $KERNEL_SOURCE_HEADER = '/boot/kernel.h'],
			[AC_MSG_WARN([

Using /boot/kernel.h from RUNNING kernel.

If this is not what you want, use --with-kernel-source-header.
Consult build/README.kernel-source for details.
])
		])], [AC_MSG_ERROR([

$KERNEL_SOURCE_HEADER not found.

Consult build/README.kernel-source for details.
])
		])
m4trace:configure.ac:24: -1- LB_LINUX_VERSION
m4trace:configure.ac:24: -1- m4_pattern_allow([^KMODEXT$])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_MAKE([], [], [$makerule LUSTRE_KERNEL_TEST=conftest.i], [test -s build/conftest.i], [lb_cv_module_target="SUBDIRS"], [
		MODULE_TARGET="M"
		makerule="_module_$PWD/build"
		LB_LINUX_TRY_MAKE([], [],
			[$makerule LUSTRE_KERNEL_TEST=conftest.i],
			[test -s build/conftest.i],
			[lb_cv_module_target="M"], [
				AC_MSG_ERROR([unknown; check config.log for details])
			])
	])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[]], [[]])])], [$makerule LUSTRE_KERNEL_TEST=conftest.i], [test -s build/conftest.i], [lb_cv_module_target="SUBDIRS"], [
		MODULE_TARGET="M"
		makerule="_module_$PWD/build"
		LB_LINUX_TRY_MAKE([], [],
			[$makerule LUSTRE_KERNEL_TEST=conftest.i],
			[test -s build/conftest.i],
			[lb_cv_module_target="M"], [
				AC_MSG_ERROR([unknown; check config.log for details])
			])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_MAKE([], [], [$makerule LUSTRE_KERNEL_TEST=conftest.i], [test -s build/conftest.i], [lb_cv_module_target="M"], [
				AC_MSG_ERROR([unknown; check config.log for details])
			])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[]], [[]])])], [$makerule LUSTRE_KERNEL_TEST=conftest.i], [test -s build/conftest.i], [lb_cv_module_target="M"], [
				AC_MSG_ERROR([unknown; check config.log for details])
			])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MODULE_TARGET$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([that modules can be built at all], [build_modules], [], [], [], [
	AC_MSG_ERROR([

Kernel modules cannot be built. Consult config.log for details.

If you are trying to build with a kernel-source rpm,
consult build/README.kernel-source
])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([], [], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[]], [[]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_RELEASE
m4trace:configure.ac:24: -1- LB_LINUX_UTSRELEASE
m4trace:configure.ac:24: -1- m4_pattern_allow([^LINUXRELEASE$])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG([SUSE_KERNEL], [
			SUSE_KERNEL="yes"
			KERNEL_FOUND="yes"
		], [])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_SUSE_KERNEL], [config_SUSE_KERNEL], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_SUSE_KERNEL
	#error CONFIG_SUSE_KERNEL not #defined
	#endif
], [
			SUSE_KERNEL="yes"
			KERNEL_FOUND="yes"
		], [])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_SUSE_KERNEL
	#error CONFIG_SUSE_KERNEL not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#ifndef CONFIG_SUSE_KERNEL
	#error CONFIG_SUSE_KERNEL not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:167: LB_LINUX_RELEASE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:365: LB_LINUX_PATH is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-linux.m4:426: LB_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^modulefsdir$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^modulenetdir$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^KMP_MODDIR$])
m4trace:configure.ac:24: -1- LB_LINUX_SYMVERFILE
m4trace:configure.ac:24: -1- m4_pattern_allow([^SYMVERFILE$])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG([MODULES], [], [
	AC_MSG_ERROR([

module support is required to build Lustre kernel modules.
])
	])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_MODULES], [config_MODULES], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_MODULES
	#error CONFIG_MODULES not #defined
	#endif
], [], [
	AC_MSG_ERROR([

module support is required to build Lustre kernel modules.
])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_MODULES
	#error CONFIG_MODULES not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#ifndef CONFIG_MODULES
	#error CONFIG_MODULES not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG([MODVERSIONS])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_MODVERSIONS], [config_MODVERSIONS], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_MODVERSIONS
	#error CONFIG_MODVERSIONS not #defined
	#endif
], [], [])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_MODVERSIONS
	#error CONFIG_MODVERSIONS not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#ifndef CONFIG_MODVERSIONS
	#error CONFIG_MODVERSIONS not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG([KALLSYMS], [], [
	AC_MSG_ERROR([

Lustre requires that CONFIG_KALLSYMS is enabled in your kernel.
])
	])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_KALLSYMS], [config_KALLSYMS], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_KALLSYMS
	#error CONFIG_KALLSYMS not #defined
	#endif
], [], [
	AC_MSG_ERROR([

Lustre requires that CONFIG_KALLSYMS is enabled in your kernel.
])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_KALLSYMS
	#error CONFIG_KALLSYMS not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#ifndef CONFIG_KALLSYMS
	#error CONFIG_KALLSYMS not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LC_MODULE_LOADING
m4trace:configure.ac:24: -1- LB_LINUX_TRY_MAKE([
	#include <linux/kmod.h>
], [
	int myretval=ENOSYS ;
	return myretval;
], [
	$makerule LUSTRE_KERNEL_TEST=conftest.i
], [dnl
	grep request_module build/conftest.i |dnl
		grep -v `grep "int myretval=" build/conftest.i |dnl
			cut -d= -f2 | cut -d" "  -f1`dnl
		>/dev/null dnl
], [lb_cv_module_loading="yes"], [lb_cv_module_loading="no"])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/kmod.h>
]], [[
	int myretval=ENOSYS ;
	return myretval;
]])])], [
	$makerule LUSTRE_KERNEL_TEST=conftest.i
], [dnl
	grep request_module build/conftest.i |dnl
		grep -v `grep "int myretval=" build/conftest.i |dnl
			cut -d= -f2 | cut -d" "  -f1`dnl
		>/dev/null dnl
], [lb_cv_module_loading="yes"], [lb_cv_module_loading="no"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_MODULE_LOADING_SUPPORT$])
m4trace:configure.ac:24: -1- LIBCFS_PROG_LINUX
m4trace:configure.ac:24: -1- LIBCFS_CONFIG_PANIC_DUMPLOG
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:49: LIBCFS_CONFIG_PANIC_DUMPLOG is expanded from...
/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1374: LIBCFS_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LNET_DUMP_ON_PANIC$])
m4trace:configure.ac:24: -1- LIBCFS_STACKTRACE_OPS_HAVE_WALK_STACK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct stacktrace_ops' has 'walk_stack' field], [stacktrace_ops_walk_stack], [
	#include <asm/stacktrace.h>
], [
	((struct stacktrace_ops *)0)->walk_stack(NULL, NULL, 0, NULL, NULL, NULL, NULL);
], [
	AC_DEFINE(STACKTRACE_OPS_HAVE_WALK_STACK, 1,
		['struct stacktrace_ops' has 'walk_stack' field])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <asm/stacktrace.h>
], [
	((struct stacktrace_ops *)0)->walk_stack(NULL, NULL, 0, NULL, NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <asm/stacktrace.h>
]], [[
	((struct stacktrace_ops *)0)->walk_stack(NULL, NULL, 0, NULL, NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^STACKTRACE_OPS_HAVE_WALK_STACK$])
m4trace:configure.ac:24: -1- LC_SHRINKER_WANT_SHRINK_PTR
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'shrinker' want self pointer in handler], [shrink_self_pointer], [
	#include <linux/mm.h>
], [
	struct shrinker *tmp = NULL;
	tmp->shrink(tmp, 0, 0);
], [
	AC_DEFINE(HAVE_SHRINKER_WANT_SHRINK_PTR, 1,
		[shrinker want self pointer in handler])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	struct shrinker *tmp = NULL;
	tmp->shrink(tmp, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	struct shrinker *tmp = NULL;
	tmp->shrink(tmp, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SHRINKER_WANT_SHRINK_PTR$])
m4trace:configure.ac:24: -1- LIBCFS_SYSCTL_CTLNAME
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'ctl_table' has a 'ctl_name' field], [ctl_table_ctl_name], [
	#include <linux/sysctl.h>
], [
	struct ctl_table ct;
	ct.ctl_name = sizeof(ct);
], [
	AC_DEFINE(HAVE_SYSCTL_CTLNAME, 1,
		[ctl_table has ctl_name field])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/sysctl.h>
], [
	struct ctl_table ct;
	ct.ctl_name = sizeof(ct);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/sysctl.h>
]], [[
	struct ctl_table ct;
	ct.ctl_name = sizeof(ct);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SYSCTL_CTLNAME$])
m4trace:configure.ac:24: -1- LIBCFS_MODULE_LOCKING
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does the kernel support module param locking], [module_param_locking], [
	#include <linux/moduleparam.h>
], [
	__kernel_param_lock(NULL);
	__kernel_param_unlock(NULL);
], [
	AC_DEFINE(HAVE_MODULE_PARAM_LOCKING, 1,
		[locking module param is supported])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/moduleparam.h>
], [
	__kernel_param_lock(NULL);
	__kernel_param_unlock(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/moduleparam.h>
]], [[
	__kernel_param_lock(NULL);
	__kernel_param_unlock(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_MODULE_PARAM_LOCKING$])
m4trace:configure.ac:24: -1- LIBCFS_KSTRTOUL
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has 'kstrtoul'], [kstrtoul], [
	#include <linux/kernel.h>
], [
	unsigned long result;
	return kstrtoul("12345", 0, &result);
], [
	AC_DEFINE(HAVE_KSTRTOUL, 1,
		[kernel has kstrtoul])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/kernel.h>
], [
	unsigned long result;
	return kstrtoul("12345", 0, &result);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/kernel.h>
]], [[
	unsigned long result;
	return kstrtoul("12345", 0, &result);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KSTRTOUL$])
m4trace:configure.ac:24: -1- LIBCFS_DUMP_TRACE_ADDRESS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'dump_trace' want address], [dump_trace_address], [
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
], [
	dump_trace(NULL, NULL, NULL, 0, NULL, NULL);
], [
	AC_DEFINE(HAVE_DUMP_TRACE_ADDRESS, 1,
		[dump_trace want address argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
], [
	dump_trace(NULL, NULL, NULL, 0, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
]], [[
	dump_trace(NULL, NULL, NULL, 0, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DUMP_TRACE_ADDRESS$])
m4trace:configure.ac:24: -1- LC_SHRINK_CONTROL
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'shrink_control' is present], [shrink_control], [
	#include <linux/atomic.h>
	#include <linux/mm.h>
], [
	struct shrink_control tmp = {0};
	tmp.nr_to_scan = sizeof(tmp);
], [
	AC_DEFINE(HAVE_SHRINK_CONTROL, 1,
		[shrink_control is present])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/atomic.h>
	#include <linux/mm.h>
], [
	struct shrink_control tmp = {0};
	tmp.nr_to_scan = sizeof(tmp);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/atomic.h>
	#include <linux/mm.h>
]], [[
	struct shrink_control tmp = {0};
	tmp.nr_to_scan = sizeof(tmp);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SHRINK_CONTROL$])
m4trace:configure.ac:24: -1- LIBCFS_STACKTRACE_WARNING
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'stacktrace_ops.warning' is exist], [stacktrace_ops_warning], [
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
], [
	((struct stacktrace_ops *)0)->warning(NULL, NULL);
], [
	AC_DEFINE(HAVE_STACKTRACE_WARNING, 1,
		[stacktrace_ops.warning is exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
], [
	((struct stacktrace_ops *)0)->warning(NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
]], [[
	((struct stacktrace_ops *)0)->warning(NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_STACKTRACE_WARNING$])
m4trace:configure.ac:24: -1- LIBCFS_PROCESS_NAMESPACE
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([LB_LANG_PROGRAM([@%:@include <linux/uidgid.h>])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_header], [yes])], [AS_VAR_SET([lb_header], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_UIDGID_HEADER$])
m4trace:configure.ac:24: -1- LIBCFS_I_UID_READ
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'i_uid_read' is present], [i_uid_read], [
	#include <linux/fs.h>
], [
	i_uid_read(NULL);
], [
	AC_DEFINE(HAVE_I_UID_READ, 1, [i_uid_read is present])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	i_uid_read(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	i_uid_read(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_I_UID_READ$])
m4trace:configure.ac:24: -1- LIBCFS_HAVE_CRC32
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([CRC32], [have_crc32="yes"], [have_crc32="no"])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_CRC32 in or as module], [config_im_CRC32], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRC32) || defined(CONFIG_CRC32_MODULE))
	#error CONFIG_CRC32 and CONFIG_CRC32_MODULE not #defined
	#endif
], [have_crc32="yes"], [have_crc32="no"])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRC32) || defined(CONFIG_CRC32_MODULE))
	#error CONFIG_CRC32 and CONFIG_CRC32_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_CRC32) || defined(CONFIG_CRC32_MODULE))
	#error CONFIG_CRC32 and CONFIG_CRC32_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CRC32$])
m4trace:configure.ac:24: -1- LIBCFS_ENABLE_CRC32_ACCEL
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([CRYPTO_CRC32_PCLMUL], [enable_crc32_crypto="no"], [enable_crc32_crypto="yes"])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_CRYPTO_CRC32_PCLMUL in or as module], [config_im_CRYPTO_CRC32_PCLMUL], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_CRC32_PCLMUL) || defined(CONFIG_CRYPTO_CRC32_PCLMUL_MODULE))
	#error CONFIG_CRYPTO_CRC32_PCLMUL and CONFIG_CRYPTO_CRC32_PCLMUL_MODULE not #defined
	#endif
], [enable_crc32_crypto="no"], [enable_crc32_crypto="yes"])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_CRC32_PCLMUL) || defined(CONFIG_CRYPTO_CRC32_PCLMUL_MODULE))
	#error CONFIG_CRYPTO_CRC32_PCLMUL and CONFIG_CRYPTO_CRC32_PCLMUL_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_CRYPTO_CRC32_PCLMUL) || defined(CONFIG_CRYPTO_CRC32_PCLMUL_MODULE))
	#error CONFIG_CRYPTO_CRC32_PCLMUL and CONFIG_CRYPTO_CRC32_PCLMUL_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NEED_CRC32_ACCEL$])
m4trace:configure.ac:24: -1- LIBCFS_ENABLE_CRC32C_ACCEL
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([CRYPTO_CRC32C_INTEL], [enable_crc32c_crypto="no"], [enable_crc32c_crypto="yes"])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_CRYPTO_CRC32C_INTEL in or as module], [config_im_CRYPTO_CRC32C_INTEL], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_CRC32C_INTEL) || defined(CONFIG_CRYPTO_CRC32C_INTEL_MODULE))
	#error CONFIG_CRYPTO_CRC32C_INTEL and CONFIG_CRYPTO_CRC32C_INTEL_MODULE not #defined
	#endif
], [enable_crc32c_crypto="no"], [enable_crc32c_crypto="yes"])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_CRC32C_INTEL) || defined(CONFIG_CRYPTO_CRC32C_INTEL_MODULE))
	#error CONFIG_CRYPTO_CRC32C_INTEL and CONFIG_CRYPTO_CRC32C_INTEL_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_CRYPTO_CRC32C_INTEL) || defined(CONFIG_CRYPTO_CRC32C_INTEL_MODULE))
	#error CONFIG_CRYPTO_CRC32C_INTEL and CONFIG_CRYPTO_CRC32C_INTEL_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NEED_CRC32C_ACCEL$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_GET_TS64
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_get_ts64' exist], [ktime_get_ts64], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	struct timespec64 *ts = NULL;

	ktime_get_ts64(ts);
], [
	AC_DEFINE(HAVE_KTIME_GET_TS64, 1,
		['ktime_get_ts64' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	struct timespec64 *ts = NULL;

	ktime_get_ts64(ts);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	struct timespec64 *ts = NULL;

	ktime_get_ts64(ts);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_GET_TS64$])
m4trace:configure.ac:24: -1- LIBCFS_PREPARE_TO_WAIT_EVENT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'prepare_to_wait_event' exist], [prepare_to_wait_event], [
	#include <linux/wait.h>
], [
	prepare_to_wait_event(NULL, NULL, 0);
], [
	AC_DEFINE(HAVE_PREPARE_TO_WAIT_EVENT, 1,
		['prepare_to_wait_event' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/wait.h>
], [
	prepare_to_wait_event(NULL, NULL, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/wait.h>
]], [[
	prepare_to_wait_event(NULL, NULL, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PREPARE_TO_WAIT_EVENT$])
m4trace:configure.ac:24: -1- LIBCFS_KERNEL_PARAM_OPS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does 'struct kernel_param_ops' exist], [kernel_param_ops], [
	#include <linux/module.h>
], [
	struct kernel_param_ops ops;

	ops.set = NULL;
], [
	AC_DEFINE(HAVE_KERNEL_PARAM_OPS, 1,
		['struct kernel_param_ops' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/module.h>
], [
	struct kernel_param_ops ops;

	ops.set = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/module.h>
]], [[
	struct kernel_param_ops ops;

	ops.set = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KERNEL_PARAM_OPS$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_ADD
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_add' exist], [ktime_add], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;
	ktime_t total;

	total = ktime_add(start, end);
], [
	AC_DEFINE(HAVE_KTIME_ADD, 1,
		[ktime_add is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;
	ktime_t total;

	total = ktime_add(start, end);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;
	ktime_t total;

	total = ktime_add(start, end);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_ADD$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_AFTER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_after' exist], [ktime_after], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_after(start, end);
], [
	AC_DEFINE(HAVE_KTIME_AFTER, 1,
		[ktime_after is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_after(start, end);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_after(start, end);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_AFTER$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_BEFORE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_before' exist], [ktime_before], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_before(start, end);
], [
	AC_DEFINE(HAVE_KTIME_BEFORE, 1,
		[ktime_before is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_before(start, end);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_before(start, end);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_BEFORE$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_COMPARE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_compare' exist], [ktime_compare], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_compare(start, end);
], [
	AC_DEFINE(HAVE_KTIME_COMPARE, 1,
		[ktime_compare is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_compare(start, end);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_compare(start, end);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_COMPARE$])
m4trace:configure.ac:24: -1- LIBCFS_SHRINKER_COUNT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([shrinker has 'count_objects'], [shrinker_count_objects], [
	#include <linux/mmzone.h>
	#include <linux/shrinker.h>
], [
	struct shrinker shrinker;

	shrinker.count_objects = NULL;
], [
	AC_DEFINE(HAVE_SHRINKER_COUNT, 1,
		[shrinker has count_objects member])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mmzone.h>
	#include <linux/shrinker.h>
], [
	struct shrinker shrinker;

	shrinker.count_objects = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mmzone.h>
	#include <linux/shrinker.h>
]], [[
	struct shrinker shrinker;

	shrinker.count_objects = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SHRINKER_COUNT$])
m4trace:configure.ac:24: -1- LIBCFS_IOV_ITER_HAS_TYPE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if iov_iter has member type], [iov_iter_has_type_member], [
	#include <linux/uio.h>
], [
	struct iov_iter iter = { .type = ITER_KVEC };
	(void)iter;
], [
	AC_DEFINE(HAVE_IOV_ITER_HAS_TYPE_MEMBER, 1,
		[if iov_iter has member type])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/uio.h>
], [
	struct iov_iter iter = { .type = ITER_KVEC };
	(void)iter;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/uio.h>
]], [[
	struct iov_iter iter = { .type = ITER_KVEC };
	(void)iter;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOV_ITER_HAS_TYPE_MEMBER$])
m4trace:configure.ac:24: -1- LIBCFS_HLIST_ADD_AFTER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'hlist_add_after' exist], [hlist_add_after], [
	#include <linux/list.h>
], [
	hlist_add_after(NULL, NULL);
], [
	AC_DEFINE(HAVE_HLIST_ADD_AFTER, 1,
		[hlist_add_after is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/list.h>
], [
	hlist_add_after(NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/list.h>
]], [[
	hlist_add_after(NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_HLIST_ADD_AFTER$])
m4trace:configure.ac:24: -1- LIBCFS_TIMESPEC64
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does 'struct timespec64' exist], [timespec64], [
	#include <linux/time.h>
], [
	struct timespec64 ts;

	ts.tv_sec = 0;
	ts.tv_nsec = 0;
], [
	AC_DEFINE(HAVE_TIMESPEC64, 1,
		['struct timespec64' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/time.h>
], [
	struct timespec64 ts;

	ts.tv_sec = 0;
	ts.tv_nsec = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/time.h>
]], [[
	struct timespec64 ts;

	ts.tv_sec = 0;
	ts.tv_nsec = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_TIMESPEC64$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_GET_NS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_get_ns' exist], [ktime_get_ns], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	u64 nanoseconds;

	nanoseconds = ktime_get_ns();
], [], [
	AC_DEFINE(NEED_KTIME_GET_NS, 1,
		['ktime_get_ns' is not available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	u64 nanoseconds;

	nanoseconds = ktime_get_ns();
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	u64 nanoseconds;

	nanoseconds = ktime_get_ns();
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NEED_KTIME_GET_NS$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_GET_REAL_TS64
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_get_real_ts64' exist], [ktime_get_real_ts64], [
	#include <linux/ktime.h>
], [
	struct timespec64 *ts = NULL;

	ktime_get_real_ts64(ts);
], [
	AC_DEFINE(HAVE_KTIME_GET_REAL_TS64, 1,
		['ktime_get_real_ts64' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/ktime.h>
], [
	struct timespec64 *ts = NULL;

	ktime_get_real_ts64(ts);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/ktime.h>
]], [[
	struct timespec64 *ts = NULL;

	ktime_get_real_ts64(ts);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_GET_REAL_TS64$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_GET_REAL_SECONDS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_get_real_seconds' exist], [ktime_get_real_seconds], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	time64_t now;

	now = ktime_get_real_seconds();
], [
	AC_DEFINE(HAVE_KTIME_GET_REAL_SECONDS, 1,
		['ktime_get_real_seconds' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	time64_t now;

	now = ktime_get_real_seconds();
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	time64_t now;

	now = ktime_get_real_seconds();
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_GET_REAL_SECONDS$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_GET_REAL_NS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_get_real_ns' exist], [ktime_get_real_ns], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	u64 nanoseconds;

	nanoseconds = ktime_get_real_ns();
], [], [
	AC_DEFINE(NEED_KTIME_GET_REAL_NS, 1,
		['ktime_get_real_ns' is not available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	u64 nanoseconds;

	nanoseconds = ktime_get_real_ns();
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	u64 nanoseconds;

	nanoseconds = ktime_get_real_ns();
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NEED_KTIME_GET_REAL_NS$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_TO_TIMESPEC64
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_to_timespec64' exist], [ktime_to_timespec64], [
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t now = ktime_set(0, 0);
	struct timespec64 ts;

	ts = ktime_to_timespec64(now);
], [
	AC_DEFINE(HAVE_KTIME_TO_TIMESPEC64, 1,
		['ktime_to_timespec64' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
], [
	ktime_t now = ktime_set(0, 0);
	struct timespec64 ts;

	ts = ktime_to_timespec64(now);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hrtimer.h>
	#include <linux/ktime.h>
]], [[
	ktime_t now = ktime_set(0, 0);
	struct timespec64 ts;

	ts = ktime_to_timespec64(now);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_TO_TIMESPEC64$])
m4trace:configure.ac:24: -1- LIBCFS_TIMESPEC64_SUB
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'timespec64_sub' exist], [timespec64_sub], [
	#include <linux/time.h>
], [
	struct timespec64 later = { }, earlier = { }, diff;

	diff = timespec64_sub(later, earlier);
], [
	AC_DEFINE(HAVE_TIMESPEC64_SUB, 1,
		['timespec64_sub' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/time.h>
], [
	struct timespec64 later = { }, earlier = { }, diff;

	diff = timespec64_sub(later, earlier);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/time.h>
]], [[
	struct timespec64 later = { }, earlier = { }, diff;

	diff = timespec64_sub(later, earlier);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_TIMESPEC64_SUB$])
m4trace:configure.ac:24: -1- LIBCFS_TIMESPEC64_TO_KTIME
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'timespec64_to_ktime' exist], [timespec64_to_ktime], [
	#include <linux/ktime.h>
], [
	struct timespec64 ts;
	ktime_t now;

	now = timespec64_to_ktime(ts);
], [
	AC_DEFINE(HAVE_TIMESPEC64_TO_KTIME, 1,
		['timespec64_to_ktime' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/ktime.h>
], [
	struct timespec64 ts;
	ktime_t now;

	now = timespec64_to_ktime(ts);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/ktime.h>
]], [[
	struct timespec64 ts;
	ktime_t now;

	now = timespec64_to_ktime(ts);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_TIMESPEC64_TO_KTIME$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_GET_SECONDS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_get_seconds' exist], [ktime_get_seconds], [
	#include <linux/ktime.h>
], [
	time64_t now;

	now = ktime_get_seconds();
], [
	AC_DEFINE(HAVE_KTIME_GET_SECONDS, 1,
		['ktime_get_seconds' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/ktime.h>
], [
	time64_t now;

	now = ktime_get_seconds();
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/ktime.h>
]], [[
	time64_t now;

	now = ktime_get_seconds();
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_GET_SECONDS$])
m4trace:configure.ac:24: -1- LIBCFS_KTIME_MS_DELTA
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'ktime_ms_delta' exist], [ktime_ms_delta], [
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_ms_delta(start, end);
], [
	AC_DEFINE(HAVE_KTIME_MS_DELTA, 1,
		['ktime_ms_delta' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/ktime.h>
], [
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_ms_delta(start, end);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/ktime.h>
]], [[
	ktime_t start = ktime_set(0, 0);
	ktime_t end = start;

	ktime_ms_delta(start, end);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTIME_MS_DELTA$])
m4trace:configure.ac:24: -1- LIBCFS_KERNEL_PARAM_LOCK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'kernel_param_[un]lock' exist], [kernel_param_lock], [
	#include <linux/moduleparam.h>
], [
	kernel_param_lock(NULL);
	kernel_param_unlock(NULL);
], [
	AC_DEFINE(HAVE_KERNEL_PARAM_LOCK, 1,
		['kernel_param_[un]lock' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/moduleparam.h>
], [
	kernel_param_lock(NULL);
	kernel_param_unlock(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/moduleparam.h>
]], [[
	kernel_param_lock(NULL);
	kernel_param_unlock(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KERNEL_PARAM_LOCK$])
m4trace:configure.ac:24: -1- LIBCFS_HAVE_TOPOLOGY_SIBLING_CPUMASK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does function 'topology_sibling_cpumask' exist], [topology_sibling_cpumask], [
	#include <linux/topology.h>
], [
	const struct cpumask *mask;

	mask = topology_sibling_cpumask(0);
], [
	AC_DEFINE(HAVE_TOPOLOGY_SIBLING_CPUMASK, 1,
		[topology_sibling_cpumask is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/topology.h>
], [
	const struct cpumask *mask;

	mask = topology_sibling_cpumask(0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/topology.h>
]], [[
	const struct cpumask *mask;

	mask = topology_sibling_cpumask(0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_TOPOLOGY_SIBLING_CPUMASK$])
m4trace:configure.ac:24: -1- LIBCFS_FPU_API
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([LB_LANG_PROGRAM([@%:@include <asm/fpu/api.h>])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_header], [yes])], [AS_VAR_SET([lb_header], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FPU_API_HEADER$])
m4trace:configure.ac:24: -1- LIBCFS_KSTRTOBOOL_FROM_USER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has 'kstrtobool_from_user'], [kstrtobool_from_user], [
	#include <linux/kernel.h>
], [
	bool result;
	return kstrtobool_from_user(NULL, 0, &result);
], [
	AC_DEFINE(HAVE_KSTRTOBOOL_FROM_USER, 1,
		[kernel has kstrtobool_from_user])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/kernel.h>
], [
	bool result;
	return kstrtobool_from_user(NULL, 0, &result);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/kernel.h>
]], [[
	bool result;
	return kstrtobool_from_user(NULL, 0, &result);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KSTRTOBOOL_FROM_USER$])
m4trace:configure.ac:24: -1- LIBCFS_CRYPTO_HASH_HELPERS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does crypto hash helper functions exist], [crypto_hash_helpers], [
	#include <crypto/hash.h>
], [
	crypto_ahash_alg_name(NULL);
	crypto_ahash_driver_name(NULL);
], [
	AC_DEFINE(HAVE_CRYPTO_HASH_HELPERS, 1,
		[crypto hash helper functions are available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <crypto/hash.h>
], [
	crypto_ahash_alg_name(NULL);
	crypto_ahash_driver_name(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <crypto/hash.h>
]], [[
	crypto_ahash_alg_name(NULL);
	crypto_ahash_driver_name(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CRYPTO_HASH_HELPERS$])
m4trace:configure.ac:24: -1- LIBCFS_EXPORT_KSET_FIND_OBJ
m4trace:configure.ac:24: -1- LB_CHECK_EXPORT([kset_find_obj], [lib/kobject.c], [AC_DEFINE(HAVE_KSET_FIND_OBJ, 1,
		[kset_find_obj is exported by the kernel])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KSET_FIND_OBJ$])
m4trace:configure.ac:24: -1- LIBCFS_RHASHTABLE_REPLACE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'rhashtable_replace_fast' exists], [rhashtable_replace_fast], [
	#include <linux/rhashtable.h>
], [
	const struct rhashtable_params params = { 0 };

	rhashtable_replace_fast(NULL, NULL, NULL, params);
], [
	AC_DEFINE(HAVE_RHASHTABLE_REPLACE, 1,
		[rhashtable_replace_fast() is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/rhashtable.h>
], [
	const struct rhashtable_params params = { 0 };

	rhashtable_replace_fast(NULL, NULL, NULL, params);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/rhashtable.h>
]], [[
	const struct rhashtable_params params = { 0 };

	rhashtable_replace_fast(NULL, NULL, NULL, params);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RHASHTABLE_REPLACE$])
m4trace:configure.ac:24: -1- LIBCFS_BROKEN_HASH_64
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([kernel has fixed hash_64()], [broken_hash_64], [
	#include <linux/hash.h>
], [
	int tmp = GOLDEN_RATIO_PRIME_64;
], [
	AC_DEFINE(HAVE_BROKEN_HASH_64, 1, [kernel hash_64() is broken])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/hash.h>
], [
	int tmp = GOLDEN_RATIO_PRIME_64;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/hash.h>
]], [[
	int tmp = GOLDEN_RATIO_PRIME_64;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BROKEN_HASH_64$])
m4trace:configure.ac:24: -1- LIBCFS_STACKTRACE_OPS_ADDRESS_RETURN_INT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct stacktrace_ops' address function returns an int], [stacktrace_ops_address_return_int], [
	#include <asm/stacktrace.h>
], [
	int rc;

	rc = ((struct stacktrace_ops *)0)->address(NULL, 0, 0);
], [
	AC_DEFINE(STACKTRACE_OPS_ADDRESS_RETURN_INT, 1,
		['struct stacktrace_ops' address function returns an int])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <asm/stacktrace.h>
], [
	int rc;

	rc = ((struct stacktrace_ops *)0)->address(NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <asm/stacktrace.h>
]], [[
	int rc;

	rc = ((struct stacktrace_ops *)0)->address(NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^STACKTRACE_OPS_ADDRESS_RETURN_INT$])
m4trace:configure.ac:24: -1- LIBCFS_GET_USER_PAGES_6ARG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'get_user_pages()' takes 6 arguments], [get_user_pages_6arg], [
	#include <linux/mm.h>
], [
	int rc;

	rc = get_user_pages(0, 0, 0, 0, NULL, NULL);
], [
	AC_DEFINE(HAVE_GET_USER_PAGES_6ARG, 1,
		[get_user_pages takes 6 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	int rc;

	rc = get_user_pages(0, 0, 0, 0, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	int rc;

	rc = get_user_pages(0, 0, 0, 0, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GET_USER_PAGES_6ARG$])
m4trace:configure.ac:24: -1- LIBCFS_STRINGHASH
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([LB_LANG_PROGRAM([@%:@include <linux/stringhash.h>])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_header], [yes])], [AS_VAR_SET([lb_header], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_STRINGHASH$])
m4trace:configure.ac:24: -1- LIBCFS_RHASHTABLE_INSERT_FAST
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if internal '__rhashtable_insert_fast()' returns int], [rhashtable_insert_fast], [
	#include <linux/rhashtable.h>
], [
	const struct rhashtable_params params = { 0 };
	int rc;

	rc = __rhashtable_insert_fast(NULL, NULL, NULL, params);
], [
	AC_DEFINE(HAVE_HASHTABLE_INSERT_FAST_RETURN_INT, 1,
		  ['__rhashtable_insert_fast()' returns int])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/rhashtable.h>
], [
	const struct rhashtable_params params = { 0 };
	int rc;

	rc = __rhashtable_insert_fast(NULL, NULL, NULL, params);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/rhashtable.h>
]], [[
	const struct rhashtable_params params = { 0 };
	int rc;

	rc = __rhashtable_insert_fast(NULL, NULL, NULL, params);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_HASHTABLE_INSERT_FAST_RETURN_INT$])
m4trace:configure.ac:24: -1- LIBCFS_RHASHTABLE_WALK_INIT_3ARG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'rhashtable_walk_init' has 3 args], [rhashtable_walk_init], [
	#include <linux/gfp.h>
	#include <linux/rhashtable.h>
], [
	rhashtable_walk_init(NULL, NULL, GFP_KERNEL);
], [
	AC_DEFINE(HAVE_3ARG_RHASHTABLE_WALK_INIT, 1,
		[rhashtable_walk_init() has 3 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/gfp.h>
	#include <linux/rhashtable.h>
], [
	rhashtable_walk_init(NULL, NULL, GFP_KERNEL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/gfp.h>
	#include <linux/rhashtable.h>
]], [[
	rhashtable_walk_init(NULL, NULL, GFP_KERNEL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_3ARG_RHASHTABLE_WALK_INIT$])
m4trace:configure.ac:24: -1- LIBCFS_RHASHTABLE_LOOKUP
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'rhashtable_lookup' exist], [rhashtable_lookup], [
	#include <linux/rhashtable.h>
], [
	const struct rhashtable_params params = { 0 };
	void *ret;

	ret = rhashtable_lookup(NULL, NULL, params);
], [
	AC_DEFINE(HAVE_RHASHTABLE_LOOKUP, 1,
		[rhashtable_lookup() is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/rhashtable.h>
], [
	const struct rhashtable_params params = { 0 };
	void *ret;

	ret = rhashtable_lookup(NULL, NULL, params);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/rhashtable.h>
]], [[
	const struct rhashtable_params params = { 0 };
	void *ret;

	ret = rhashtable_lookup(NULL, NULL, params);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RHASHTABLE_LOOKUP$])
m4trace:configure.ac:24: -1- LIBCFS_RHLTABLE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([does 'struct rhltable' exist], [rhtable], [
	#include <linux/rhashtable.h>
], [
	struct rhltable *hlt;

	rhltable_destroy(hlt);
], [
	AC_DEFINE(HAVE_RHLTABLE, 1,
		  [struct rhltable exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/rhashtable.h>
], [
	struct rhltable *hlt;

	rhltable_destroy(hlt);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/rhashtable.h>
]], [[
	struct rhltable *hlt;

	rhltable_destroy(hlt);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RHLTABLE$])
m4trace:configure.ac:24: -1- LIBCFS_STACKTRACE_OPS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct stacktrace_ops' exists], [stacktrace_ops], [
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
], [
	struct stacktrace_ops ops;
	ops.stack = NULL;
], [
	AC_DEFINE(HAVE_STACKTRACE_OPS, 1,
		[struct stacktrace_ops exists])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
], [
	struct stacktrace_ops ops;
	ops.stack = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	struct task_struct;
	struct pt_regs;
	#include <asm/stacktrace.h>
]], [[
	struct stacktrace_ops ops;
	ops.stack = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_STACKTRACE_OPS$])
m4trace:configure.ac:24: -1- LIBCFS_GET_USER_PAGES_GUP_FLAGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'get_user_pages()' takes gup_flags in arguments], [get_user_pages_gup_flags], [
	#include <linux/mm.h>
], [
	int rc;
	rc = get_user_pages(0, 0, FOLL_WRITE, NULL, NULL);
], [
	AC_DEFINE(HAVE_GET_USER_PAGES_GUP_FLAGS, 1,
		[get_user_pages takes gup_flags in arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	int rc;
	rc = get_user_pages(0, 0, FOLL_WRITE, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	int rc;
	rc = get_user_pages(0, 0, FOLL_WRITE, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GET_USER_PAGES_GUP_FLAGS$])
m4trace:configure.ac:24: -1- LIBCFS_RHASHTABLE_WALK_ENTER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'rhashtable_walk_enter' exists], [rhashtable_walk_enter], [
	#include <linux/rhashtable.h>
], [
	rhashtable_walk_enter(NULL, NULL);
], [
	AC_DEFINE(HAVE_RHASHTABLE_WALK_ENTER, 1,
		[rhashtable_walk_enter() is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/rhashtable.h>
], [
	rhashtable_walk_enter(NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/rhashtable.h>
]], [[
	rhashtable_walk_enter(NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RHASHTABLE_WALK_ENTER$])
m4trace:configure.ac:24: -1- LIBCFS_HOTPLUG_STATE_MACHINE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if libcfs supports CPU hotplug state machine], [cpu_hotplug_state_machine], [
	#include <linux/cpuhotplug.h>
], [
	cpuhp_remove_state(CPUHP_LUSTRE_CFS_DEAD);
], [
	AC_DEFINE(HAVE_HOTPLUG_STATE_MACHINE, 1,
		[hotplug state machine is supported])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/cpuhotplug.h>
], [
	cpuhp_remove_state(CPUHP_LUSTRE_CFS_DEAD);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/cpuhotplug.h>
]], [[
	cpuhp_remove_state(CPUHP_LUSTRE_CFS_DEAD);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_HOTPLUG_STATE_MACHINE$])
m4trace:configure.ac:24: -1- LIBCFS_RHASHTABLE_LOOKUP_GET_INSERT_FAST
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'rhashtable_lookup_get_insert_fast' exist], [rhashtable_lookup_get_insert_fast], [
	#include <linux/rhashtable.h>
], [
	const struct rhashtable_params params = { 0 };
	void *ret;

	ret = rhashtable_lookup_get_insert_fast(NULL, NULL, params);
], [
	AC_DEFINE(HAVE_RHASHTABLE_LOOKUP_GET_INSERT_FAST, 1,
		[rhashtable_lookup_get_insert_fast() is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/rhashtable.h>
], [
	const struct rhashtable_params params = { 0 };
	void *ret;

	ret = rhashtable_lookup_get_insert_fast(NULL, NULL, params);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/rhashtable.h>
]], [[
	const struct rhashtable_params params = { 0 };
	void *ret;

	ret = rhashtable_lookup_get_insert_fast(NULL, NULL, params);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RHASHTABLE_LOOKUP_GET_INSERT_FAST$])
m4trace:configure.ac:24: -1- LIBCFS_SCHED_HEADERS
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([LB_LANG_PROGRAM([@%:@include <linux/sched/signal.h>])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_header], [yes])], [AS_VAR_SET([lb_header], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SCHED_HEADERS$])
m4trace:configure.ac:24: -1- LIBCFS_RHT_BUCKET_VAR
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'rht_bucket_var' exists], [rht_bucket_var], [
	#include <linux/rhashtable.h>
], [

	rht_bucket_var(NULL, 0);
], [
	AC_DEFINE(HAVE_RHT_BUCKET_VAR, 1,
		[rht_bucket_var() is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/rhashtable.h>
], [

	rht_bucket_var(NULL, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/rhashtable.h>
]], [[

	rht_bucket_var(NULL, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RHT_BUCKET_VAR$])
m4trace:configure.ac:24: -1- LIBCFS_HAVE_PROCESSOR_HEADER
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([LB_LANG_PROGRAM([@%:@include <linux/processor.h>])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_header], [yes])], [AS_VAR_SET([lb_header], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PROCESSOR_H$])
m4trace:configure.ac:24: -1- LIBCFS_HAVE_WAIT_BIT_HEADER
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([LB_LANG_PROGRAM([@%:@include <linux/wait_bit.h>])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_header], [yes])], [AS_VAR_SET([lb_header], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_WAIT_BIT_HEADER_H$])
m4trace:configure.ac:24: -1- LIBCFS_WAIT_QUEUE_TASK_LIST_RENAME
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if linux wait_queue_head list_head is named head], [wait_queue_task_list], [
	#include <linux/wait.h>
], [
	wait_queue_head_t e;

	INIT_LIST_HEAD(&e.head);
], [
	AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY_LIST, 1,
		[linux wait_queue_head_t list_head is name head])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/wait.h>
], [
	wait_queue_head_t e;

	INIT_LIST_HEAD(&e.head);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/wait.h>
]], [[
	wait_queue_head_t e;

	INIT_LIST_HEAD(&e.head);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_WAIT_QUEUE_ENTRY_LIST$])
m4trace:configure.ac:24: -1- LIBCFS_UUID_T
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'uuid_t' exist], [uuid_t], [
	#include <linux/uuid.h>
], [
	uuid_t uuid;

	memset(uuid.b, 0, 16);
], [
	AC_DEFINE(HAVE_UUID_T, 1, ['uuid_t' exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/uuid.h>
], [
	uuid_t uuid;

	memset(uuid.b, 0, 16);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/uuid.h>
]], [[
	uuid_t uuid;

	memset(uuid.b, 0, 16);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_UUID_T$])
m4trace:configure.ac:24: -1- LIBCFS_WAIT_QUEUE_ENTRY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'wait_queue_entry_t' exists], [wait_queue_entry], [
	#include <linux/wait.h>
], [
	wait_queue_entry_t e;

	e.flags = 0;
], [
	AC_DEFINE(HAVE_WAIT_QUEUE_ENTRY, 1,
		['wait_queue_entry_t' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/wait.h>
], [
	wait_queue_entry_t e;

	e.flags = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/wait.h>
]], [[
	wait_queue_entry_t e;

	e.flags = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_WAIT_QUEUE_ENTRY$])
m4trace:configure.ac:24: -1- LIBCFS_DEFINE_TIMER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if DEFINE_TIMER takes only 2 arguments], [define_timer], [
	#include <linux/timer.h>
], [
	static DEFINE_TIMER(my_timer, NULL);
], [
	AC_DEFINE(HAVE_NEW_DEFINE_TIMER, 1,
		[DEFINE_TIMER uses only 2 arguements])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/timer.h>
], [
	static DEFINE_TIMER(my_timer, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/timer.h>
]], [[
	static DEFINE_TIMER(my_timer, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_NEW_DEFINE_TIMER$])
m4trace:configure.ac:24: -1- LIBCFS_NEW_KERNEL_WRITE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'kernel_write' matches other read/write helpers], [kernel_write_match], [
	#include <linux/fs.h>
], [
	const void *buf = NULL;
	loff_t pos = 0;
	return kernel_write(NULL, buf, 0, &pos);
], [
	AC_DEFINE(HAVE_NEW_KERNEL_WRITE, 1,
		['kernel_write' aligns with read/write helpers])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	const void *buf = NULL;
	loff_t pos = 0;
	return kernel_write(NULL, buf, 0, &pos);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	const void *buf = NULL;
	loff_t pos = 0;
	return kernel_write(NULL, buf, 0, &pos);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_NEW_KERNEL_WRITE$])
m4trace:configure.ac:24: -1- LIBCFS_NEW_KERNEL_READ
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'kernel_read()' has loff_t *pos as last parameter], [kernel_read], [
	#include <linux/fs.h>
	], [
	loff_t pos = 0;
	kernel_read(NULL, NULL, 0, &pos);
], [
	AC_DEFINE(HAVE_KERNEL_READ_LAST_POSP, 1,
		[kernel_read() signature ends with loff_t *pos])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	], [
	loff_t pos = 0;
	kernel_read(NULL, NULL, 0, &pos);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	]], [[
	loff_t pos = 0;
	kernel_read(NULL, NULL, 0, &pos);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KERNEL_READ_LAST_POSP$])
m4trace:configure.ac:24: -1- LIBCFS_EXPORT_SAVE_STACK_TRACE_TSK
m4trace:configure.ac:24: -1- LB_CHECK_EXPORT([save_stack_trace_tsk], [arch/$SUBARCH/kernel/stacktrace.c], [AC_DEFINE(HAVE_SAVE_STACK_TRACE_TSK, 1,
		[save_stack_trace_tsk is exported])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SAVE_STACK_TRACE_TSK$])
m4trace:configure.ac:24: -1- LIBCFS_TIMER_SETUP
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if setup_timer has been replaced with timer_setup], [timer_setup], [
	#include <linux/timer.h>
], [
	timer_setup(NULL, NULL, 0);
], [
	AC_DEFINE(HAVE_TIMER_SETUP, 1,
		[timer_setup has replaced setup_timer])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/timer.h>
], [
	timer_setup(NULL, NULL, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/timer.h>
]], [[
	timer_setup(NULL, NULL, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_TIMER_SETUP$])
m4trace:configure.ac:24: -1- LIBCFS_WAIT_VAR_EVENT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'wait_var_event' exist], [wait_var_event], [
	#ifdef HAVE_WAIT_BIT_HEADER_H
	#include <linux/wait_bit.h>
	#endif
	#include <linux/wait.h>
], [
	wake_up_var(NULL);
], [
	AC_DEFINE(HAVE_WAIT_VAR_EVENT, 1,
		['wait_var_event' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#ifdef HAVE_WAIT_BIT_HEADER_H
	#include <linux/wait_bit.h>
	#endif
	#include <linux/wait.h>
], [
	wake_up_var(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#ifdef HAVE_WAIT_BIT_HEADER_H
	#include <linux/wait_bit.h>
	#endif
	#include <linux/wait.h>
]], [[
	wake_up_var(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_WAIT_VAR_EVENT$])
m4trace:configure.ac:24: -1- LIBCFS_CLEAR_AND_WAKE_UP_BIT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'clear_and_wake_up_bit' exist], [clear_and_wake_up_bit], [
	#ifdef HAVE_WAIT_BIT_HEADER_H
	#include <linux/wait_bit.h>
	#endif
	#include <linux/wait.h>
], [
	clear_and_wake_up_bit(0, NULL);
], [
	AC_DEFINE(HAVE_CLEAR_AND_WAKE_UP_BIT, 1,
		['clear_and_wake_up_bit' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#ifdef HAVE_WAIT_BIT_HEADER_H
	#include <linux/wait_bit.h>
	#endif
	#include <linux/wait.h>
], [
	clear_and_wake_up_bit(0, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#ifdef HAVE_WAIT_BIT_HEADER_H
	#include <linux/wait_bit.h>
	#endif
	#include <linux/wait.h>
]], [[
	clear_and_wake_up_bit(0, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CLEAR_AND_WAKE_UP_BIT$])
m4trace:configure.ac:24: -1- LIBCFS_HAVE_IOV_ITER_TYPE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if iov_iter_type exists], [macro_iov_iter_type_exists], [
	#include <linux/uio.h>
], [
	struct iov_iter iter = { .type = ITER_KVEC };
	enum iter_type type = iov_iter_type(&iter);
	(void)type;
], [
	AC_DEFINE(HAVE_IOV_ITER_TYPE, 1,
		[if iov_iter_type exists])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/uio.h>
], [
	struct iov_iter iter = { .type = ITER_KVEC };
	enum iter_type type = iov_iter_type(&iter);
	(void)type;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/uio.h>
]], [[
	struct iov_iter iter = { .type = ITER_KVEC };
	enum iter_type type = iov_iter_type(&iter);
	(void)type;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOV_ITER_TYPE$])
m4trace:configure.ac:24: -1- LIBCFS_MM_TOTALRAM_PAGES_FUNC
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if totalram_pages is a function], [totalram_pages], [
	#include <linux/mm.h>
], [
	totalram_pages_inc();
], [
	AC_DEFINE(HAVE_TOTALRAM_PAGES_AS_FUNC, 1,
		[if totalram_pages is a function])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	totalram_pages_inc();
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	totalram_pages_inc();
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_TOTALRAM_PAGES_AS_FUNC$])
m4trace:configure.ac:24: -1- LN_PROG_LINUX
m4trace:configure.ac:24: -1- LN_CONFIG_AFFINITY
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:48: LN_CONFIG_AFFINITY is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:869: LN_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has cpu affinity support], [set_cpus_allowed_ptr], [
		#include <linux/sched.h>
	], [
		struct task_struct *t = NULL;
		cpumask_t m = { };

		set_cpus_allowed_ptr(t, &m);
	], [
		AC_DEFINE(CPU_AFFINITY, 1,
			[kernel has cpu affinity support])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#include <linux/sched.h>
	], [
		struct task_struct *t = NULL;
		cpumask_t m = { };

		set_cpus_allowed_ptr(t, &m);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#include <linux/sched.h>
	]], [[
		struct task_struct *t = NULL;
		cpumask_t m = { };

		set_cpus_allowed_ptr(t, &m);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CPU_AFFINITY$])
m4trace:configure.ac:24: -1- LN_CONFIG_BACKOFF
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:74: LN_CONFIG_BACKOFF is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:869: LN_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SOCKNAL_BACKOFF$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SOCKNAL_BACKOFF_MS$])
m4trace:configure.ac:24: -1- LN_CONFIG_O2IB
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:575: LN_CONFIG_O2IB is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:869: LN_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_COMPAT_RDMA$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([whether to enable OpenIB gen2 support], [openib_gen2_support], [
			#ifdef HAVE_COMPAT_RDMA
			#undef PACKAGE_NAME
			#undef PACKAGE_TARNAME
			#undef PACKAGE_VERSION
			#undef PACKAGE_STRING
			#undef PACKAGE_BUGREPORT
			#undef PACKAGE_URL
			#include <linux/compat-2.6.h>
			#endif
			#include <linux/version.h>
			#include <linux/pci.h>
			#include <linux/gfp.h>
			#include <rdma/rdma_cm.h>
			#include <rdma/ib_cm.h>
			#include <rdma/ib_verbs.h>
			#include <rdma/ib_fmr_pool.h>
		], [
			struct rdma_cm_id      *cm_idi __attribute__ ((unused));
			struct rdma_conn_param  conn_param __attribute__ ((unused));
			struct ib_device_attr   device_attr __attribute__ ((unused));
			struct ib_qp_attr       qp_attr __attribute__ ((unused));
			struct ib_pool_fmr      pool_fmr __attribute__ ((unused));
			enum   ib_cm_rej_reason rej_reason __attribute__ ((unused));
			rdma_destroy_id(NULL);
		], [
			O2IBLND="o2iblnd"
		], [
			case $ENABLEO2IB in
			"yes") AC_MSG_ERROR([can't compile with OpenIB gen2 headers]) ;;
			"withpath") AC_MSG_ERROR([can't compile with OpenIB gen2 headers under $O2IBPATH]) ;;
			*) AC_MSG_ERROR([internal error]) ;;
			esac
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#ifdef HAVE_COMPAT_RDMA
			#undef PACKAGE_NAME
			#undef PACKAGE_TARNAME
			#undef PACKAGE_VERSION
			#undef PACKAGE_STRING
			#undef PACKAGE_BUGREPORT
			#undef PACKAGE_URL
			#include <linux/compat-2.6.h>
			#endif
			#include <linux/version.h>
			#include <linux/pci.h>
			#include <linux/gfp.h>
			#include <rdma/rdma_cm.h>
			#include <rdma/ib_cm.h>
			#include <rdma/ib_verbs.h>
			#include <rdma/ib_fmr_pool.h>
		], [
			struct rdma_cm_id      *cm_idi __attribute__ ((unused));
			struct rdma_conn_param  conn_param __attribute__ ((unused));
			struct ib_device_attr   device_attr __attribute__ ((unused));
			struct ib_qp_attr       qp_attr __attribute__ ((unused));
			struct ib_pool_fmr      pool_fmr __attribute__ ((unused));
			enum   ib_cm_rej_reason rej_reason __attribute__ ((unused));
			rdma_destroy_id(NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#ifdef HAVE_COMPAT_RDMA
			#undef PACKAGE_NAME
			#undef PACKAGE_TARNAME
			#undef PACKAGE_VERSION
			#undef PACKAGE_STRING
			#undef PACKAGE_BUGREPORT
			#undef PACKAGE_URL
			#include <linux/compat-2.6.h>
			#endif
			#include <linux/version.h>
			#include <linux/pci.h>
			#include <linux/gfp.h>
			#include <rdma/rdma_cm.h>
			#include <rdma/ib_cm.h>
			#include <rdma/ib_verbs.h>
			#include <rdma/ib_fmr_pool.h>
		]], [[
			struct rdma_cm_id      *cm_idi __attribute__ ((unused));
			struct rdma_conn_param  conn_param __attribute__ ((unused));
			struct ib_device_attr   device_attr __attribute__ ((unused));
			struct ib_qp_attr       qp_attr __attribute__ ((unused));
			struct ib_pool_fmr      pool_fmr __attribute__ ((unused));
			enum   ib_cm_rej_reason rej_reason __attribute__ ((unused));
			rdma_destroy_id(NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_SYMBOLS$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has kthread_worker], [linux_kthread_worker], [
			#ifdef HAVE_COMPAT_RDMA
			#undef PACKAGE_NAME
			#undef PACKAGE_TARNAME
			#undef PACKAGE_VERSION
			#undef PACKAGE_STRING
			#undef PACKAGE_BUGREPORT
			#undef PACKAGE_URL
			#include <linux/compat-2.6.h>
			#endif
			#include <linux/kthread.h>
		], [
			struct kthread_work *kth_wrk = NULL;
			flush_kthread_work(kth_wrk);
		], [
			AC_DEFINE(HAVE_KTHREAD_WORK, 1, [kthread_worker found])
			if test -z "$COMPAT_AUTOCONF"; then
				EXTRA_OFED_INCLUDE="$EXTRA_OFED_INCLUDE -DCONFIG_COMPAT_IS_KTHREAD"
			fi
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#ifdef HAVE_COMPAT_RDMA
			#undef PACKAGE_NAME
			#undef PACKAGE_TARNAME
			#undef PACKAGE_VERSION
			#undef PACKAGE_STRING
			#undef PACKAGE_BUGREPORT
			#undef PACKAGE_URL
			#include <linux/compat-2.6.h>
			#endif
			#include <linux/kthread.h>
		], [
			struct kthread_work *kth_wrk = NULL;
			flush_kthread_work(kth_wrk);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#ifdef HAVE_COMPAT_RDMA
			#undef PACKAGE_NAME
			#undef PACKAGE_TARNAME
			#undef PACKAGE_VERSION
			#undef PACKAGE_STRING
			#undef PACKAGE_BUGREPORT
			#undef PACKAGE_URL
			#include <linux/compat-2.6.h>
			#endif
			#include <linux/kthread.h>
		]], [[
			struct kthread_work *kth_wrk = NULL;
			flush_kthread_work(kth_wrk);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KTHREAD_WORK$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_OFED_CONFIG$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_OFED_INCLUDE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^O2IBLND$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^O2IBPATH$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLEO2IB$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'rdma_create_id' wants four args], [rdma_create_id_4args], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/rdma_cm.h>
	], [
		rdma_create_id(NULL, NULL, 0, 0);
	], [
		AC_DEFINE(HAVE_RDMA_CREATE_ID_4ARG, 1,
			[rdma_create_id wants 4 args])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/rdma_cm.h>
	], [
		rdma_create_id(NULL, NULL, 0, 0);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/rdma_cm.h>
	]], [[
		rdma_create_id(NULL, NULL, 0, 0);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RDMA_CREATE_ID_4ARG$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'rdma_create_id' wants five args], [rdma_create_id_5args], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/rdma_cm.h>
	], [
		rdma_create_id(NULL, NULL, NULL, 0, 0);
	], [
		AC_DEFINE(HAVE_RDMA_CREATE_ID_5ARG, 1,
			[rdma_create_id wants 5 args])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/rdma_cm.h>
	], [
		rdma_create_id(NULL, NULL, NULL, 0, 0);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/rdma_cm.h>
	]], [[
		rdma_create_id(NULL, NULL, NULL, 0, 0);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RDMA_CREATE_ID_5ARG$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct ib_cq_init_attr' is used], [ib_cq_init_attr], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		struct ib_cq_init_attr cq_attr;

		ib_create_cq(NULL, NULL, NULL, NULL, &cq_attr);
	], [
		AC_DEFINE(HAVE_IB_CQ_INIT_ATTR, 1,
			[struct ib_cq_init_attr is used by ib_create_cq])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		struct ib_cq_init_attr cq_attr;

		ib_create_cq(NULL, NULL, NULL, NULL, &cq_attr);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		struct ib_cq_init_attr cq_attr;

		ib_create_cq(NULL, NULL, NULL, NULL, &cq_attr);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_CQ_INIT_ATTR$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'ib_alloc_fast_reg_mr' exists], [ib_alloc_fast_reg_mr], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_alloc_fast_reg_mr(NULL, 0);
	], [
		AC_DEFINE(HAVE_IB_ALLOC_FAST_REG_MR, 1,
			[ib_alloc_fast_reg_mr is defined])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_alloc_fast_reg_mr(NULL, 0);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		ib_alloc_fast_reg_mr(NULL, 0);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_ALLOC_FAST_REG_MR$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'ib_get_dma_mr' exists], [ib_get_dma_mr], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_get_dma_mr(NULL, 0);
	], [
		AC_DEFINE(HAVE_IB_GET_DMA_MR, 1,
			[ib_get_dma_mr is defined])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_get_dma_mr(NULL, 0);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		ib_get_dma_mr(NULL, 0);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_GET_DMA_MR$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct ib_rdma_wr' is defined], [ib_rdma_wr], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		struct ib_rdma_wr *wr __attribute__ ((unused));

		wr = rdma_wr(NULL);
	], [
		AC_DEFINE(HAVE_IB_RDMA_WR, 1,
			[struct ib_rdma_wr is defined])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		struct ib_rdma_wr *wr __attribute__ ((unused));

		wr = rdma_wr(NULL);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		struct ib_rdma_wr *wr __attribute__ ((unused));

		wr = rdma_wr(NULL);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_RDMA_WR$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 4arg 'ib_map_mr_sg' exists], [ib_map_mr_sg_4args], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_map_mr_sg(NULL, NULL, 0, 0);
	], [
		AC_DEFINE(HAVE_IB_MAP_MR_SG, 1,
			[ib_map_mr_sg exists])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_map_mr_sg(NULL, NULL, 0, 0);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		ib_map_mr_sg(NULL, NULL, 0, 0);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_MAP_MR_SG$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 5arg 'ib_map_mr_sg' exists], [ib_map_mr_sg_5args], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_map_mr_sg(NULL, NULL, 0, NULL, 0);
	], [
		AC_DEFINE(HAVE_IB_MAP_MR_SG, 1,
			[ib_map_mr_sg exists])
		AC_DEFINE(HAVE_IB_MAP_MR_SG_5ARGS, 1,
			[ib_map_mr_sg has 5 arguments])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_map_mr_sg(NULL, NULL, 0, NULL, 0);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		ib_map_mr_sg(NULL, NULL, 0, NULL, 0);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_MAP_MR_SG$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_MAP_MR_SG_5ARGS$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct ib_device' has member 'attrs'], [ib_device.attrs], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		struct ib_device dev;
		struct ib_device_attr dev_attr = {};
		dev.attrs = dev_attr;
	], [
		AC_DEFINE(HAVE_IB_DEVICE_ATTRS, 1,
			[struct ib_device.attrs is defined])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		struct ib_device dev;
		struct ib_device_attr dev_attr = {};
		dev.attrs = dev_attr;
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		struct ib_device dev;
		struct ib_device_attr dev_attr = {};
		dev.attrs = dev_attr;
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_DEVICE_ATTRS$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 2arg 'ib_alloc_pd' exists], [ib_alloc_pd], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_alloc_pd(NULL, 0);
	], [
		AC_DEFINE(HAVE_IB_ALLOC_PD_2ARGS, 1,
			[ib_alloc_pd has 2 arguments])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_alloc_pd(NULL, 0);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		ib_alloc_pd(NULL, 0);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_ALLOC_PD_2ARGS$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if function 'ib_inc_rkey' is defined], [ib_inc_rkey], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		(void)ib_inc_rkey(0);
	], [
		AC_DEFINE(HAVE_IB_INC_RKEY, 1,
			  [function ib_inc_rkey exist])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		(void)ib_inc_rkey(0);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		(void)ib_inc_rkey(0);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_INC_RKEY$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'ib_post_send() and ib_post_recv()' have const parameters], [ib_post_send_recv_const], [
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_post_send(NULL, (const struct ib_send_wr *)NULL,
			     (const struct ib_send_wr **)NULL);
	], [
		AC_DEFINE(HAVE_IB_POST_SEND_RECV_CONST, 1,
			[ib_post_send and ib_post_recv have const parameters])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	], [
		ib_post_send(NULL, (const struct ib_send_wr *)NULL,
			     (const struct ib_send_wr **)NULL);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#ifdef HAVE_COMPAT_RDMA
		#undef PACKAGE_NAME
		#undef PACKAGE_TARNAME
		#undef PACKAGE_VERSION
		#undef PACKAGE_STRING
		#undef PACKAGE_BUGREPORT
		#undef PACKAGE_URL
		#include <linux/compat-2.6.h>
		#endif
		#include <rdma/ib_verbs.h>
	]], [[
		ib_post_send(NULL, (const struct ib_send_wr *)NULL,
			     (const struct ib_send_wr **)NULL);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_POST_SEND_RECV_CONST$])
m4trace:configure.ac:24: -1- LN_IB_DEVICE_OPS_EXISTS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if struct ib_device_ops is defined], [ib_device_ops_test], [
	#include <rdma/ib_verbs.h>
], [
	int x = offsetof(struct ib_device_ops, unmap_fmr);
	x = x;
	(void)x;
], [
	AC_DEFINE(HAVE_IB_DEVICE_OPS, 1,
		[if struct ib_device_ops is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <rdma/ib_verbs.h>
], [
	int x = offsetof(struct ib_device_ops, unmap_fmr);
	x = x;
	(void)x;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <rdma/ib_verbs.h>
]], [[
	int x = offsetof(struct ib_device_ops, unmap_fmr);
	x = x;
	(void)x;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_DEVICE_OPS$])
m4trace:configure.ac:24: -1- LN_IB_SG_DMA_ADDRESS_EXISTS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ib_sg_dma_address wrapper exists], [ib_sg_dma_address_test], [
	#include <rdma/ib_verbs.h>
], [
	u64 x = ib_sg_dma_address(NULL, NULL);
	x = x;
	(void)x;
], [
	AC_DEFINE(HAVE_IB_SG_DMA_ADDRESS, 1,
		[if ib_sg_dma_address wrapper exists])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <rdma/ib_verbs.h>
], [
	u64 x = ib_sg_dma_address(NULL, NULL);
	x = x;
	(void)x;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <rdma/ib_verbs.h>
]], [[
	u64 x = ib_sg_dma_address(NULL, NULL);
	x = x;
	(void)x;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IB_SG_DMA_ADDRESS$])
m4trace:configure.ac:24: -1- LN_CONFIG_GNILND
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:635: LN_CONFIG_GNILND is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:869: LN_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if GNI kernel headers are present], [GNI_header], [
		#include <linux/types.h>
		#include <gni_pub.h>
	], [
		gni_cdm_handle_t kgni_domain;
		gni_return_t	 rc;
		int		 rrc;
		rc = gni_cdm_create(0, 1, 1, 0, &kgni_domain);
		rrc = (rc == GNI_RC_SUCCESS) ? 0 : 1;
		return rrc;
	], [
		GNILND="gnilnd"
	], [
		AC_MSG_ERROR([can't compile gnilnd with given GNICPPFLAGS: $GNICPPFLAGS])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#include <linux/types.h>
		#include <gni_pub.h>
	], [
		gni_cdm_handle_t kgni_domain;
		gni_return_t	 rc;
		int		 rrc;
		rc = gni_cdm_create(0, 1, 1, 0, &kgni_domain);
		rrc = (rc == GNI_RC_SUCCESS) ? 0 : 1;
		return rrc;
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#include <linux/types.h>
		#include <gni_pub.h>
	]], [[
		gni_cdm_handle_t kgni_domain;
		gni_return_t	 rc;
		int		 rrc;
		rc = gni_cdm_create(0, 1, 1, 0, &kgni_domain);
		rrc = (rc == GNI_RC_SUCCESS) ? 0 : 1;
		return rrc;
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([to use RCA in gnilnd], [RCA_gnilnd], [
		#include <linux/types.h>
		#include <gni_pub.h>
		#include <krca_lib.h>
	], [
		gni_cdm_handle_t kgni_domain;
		gni_return_t	 rc;
		krca_ticket_t	 ticket = KRCA_NULL_TICKET;
		int		 rrc;
		__u32		 nid = 0, nic_addr;
		rc = gni_cdm_create(0, 1, 1, 0, &kgni_domain);
		rrc = (rc == GNI_RC_SUCCESS) ? 0 : 1;
		rrc += krca_nid_to_nicaddrs(nid, 1, &nic_addr);
		rrc += krca_register(&ticket, RCA_MAKE_SERVICE_INDEX(RCA_IO_CLASS, 9), 99, 0);
		return rrc;
	], [
		GNICPPFLAGS="$GNICPPFLAGS -DGNILND_USE_RCA=1"
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#include <linux/types.h>
		#include <gni_pub.h>
		#include <krca_lib.h>
	], [
		gni_cdm_handle_t kgni_domain;
		gni_return_t	 rc;
		krca_ticket_t	 ticket = KRCA_NULL_TICKET;
		int		 rrc;
		__u32		 nid = 0, nic_addr;
		rc = gni_cdm_create(0, 1, 1, 0, &kgni_domain);
		rrc = (rc == GNI_RC_SUCCESS) ? 0 : 1;
		rrc += krca_nid_to_nicaddrs(nid, 1, &nic_addr);
		rrc += krca_register(&ticket, RCA_MAKE_SERVICE_INDEX(RCA_IO_CLASS, 9), 99, 0);
		return rrc;
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#include <linux/types.h>
		#include <gni_pub.h>
		#include <krca_lib.h>
	]], [[
		gni_cdm_handle_t kgni_domain;
		gni_return_t	 rc;
		krca_ticket_t	 ticket = KRCA_NULL_TICKET;
		int		 rrc;
		__u32		 nid = 0, nic_addr;
		rc = gni_cdm_create(0, 1, 1, 0, &kgni_domain);
		rrc = (rc == GNI_RC_SUCCESS) ? 0 : 1;
		rrc += krca_nid_to_nicaddrs(nid, 1, &nic_addr);
		rrc += krca_register(&ticket, RCA_MAKE_SERVICE_INDEX(RCA_IO_CLASS, 9), 99, 0);
		return rrc;
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GNICPPFLAGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GNILND$])
m4trace:configure.ac:24: -1- LN_CONFIG_SK_SLEEP
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has 'sk_sleep'], [sk_sleep], [
	#include <net/sock.h>
], [
	sk_sleep(NULL);
], [
	AC_DEFINE(HAVE_SK_SLEEP, 1,
		  [kernel has sk_sleep])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <net/sock.h>
], [
	sk_sleep(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <net/sock.h>
]], [[
	sk_sleep(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SK_SLEEP$])
m4trace:configure.ac:24: -1- LN_CONFIG_TCP_SENDPAGE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'tcp_sendpage' first parameter is socket], [tcp_sendpage_socket], [
	#include <linux/net.h>
	#include <net/tcp.h>
], [
	tcp_sendpage((struct socket*)0, NULL, 0, 0, 0);
], [
	AC_DEFINE(HAVE_TCP_SENDPAGE_USE_SOCKET, 1,
		[tcp_sendpage use socket as first parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/net.h>
	#include <net/tcp.h>
], [
	tcp_sendpage((struct socket*)0, NULL, 0, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/net.h>
	#include <net/tcp.h>
]], [[
	tcp_sendpage((struct socket*)0, NULL, 0, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_TCP_SENDPAGE_USE_SOCKET$])
m4trace:configure.ac:24: -1- LN_EXPORT_KMAP_TO_PAGE
m4trace:configure.ac:24: -1- LB_CHECK_EXPORT([kmap_to_page], [mm/highmem.c], [AC_DEFINE(HAVE_KMAP_TO_PAGE, 1,
		[kmap_to_page is exported by the kernel])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KMAP_TO_PAGE$])
m4trace:configure.ac:24: -1- LN_CONFIG_SK_DATA_READY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'sk_data_ready' takes only one argument], [sk_data_ready], [
	#include <linux/net.h>
	#include <net/sock.h>
], [
	((struct sock *)0)->sk_data_ready(NULL);
], [
	AC_DEFINE(HAVE_SK_DATA_READY_ONE_ARG, 1,
		[sk_data_ready uses only one argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/net.h>
	#include <net/sock.h>
], [
	((struct sock *)0)->sk_data_ready(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/net.h>
	#include <net/sock.h>
]], [[
	((struct sock *)0)->sk_data_ready(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SK_DATA_READY_ONE_ARG$])
m4trace:configure.ac:24: -1- LN_CONFIG_SOCK_CREATE_KERN
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'sock_create_kern' first parameter is net], [sock_create_kern_net], [
	#include <linux/net.h>
	#include <net/net_namespace.h>
], [
	sock_create_kern((struct net*)0, 0, 0, 0, NULL);
], [
	AC_DEFINE(HAVE_SOCK_CREATE_KERN_USE_NET, 1,
		[sock_create_kern use net as first parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/net.h>
	#include <net/net_namespace.h>
], [
	sock_create_kern((struct net*)0, 0, 0, 0, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/net.h>
	#include <net/net_namespace.h>
]], [[
	sock_create_kern((struct net*)0, 0, 0, 0, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SOCK_CREATE_KERN_USE_NET$])
m4trace:configure.ac:24: -1- LN_CONFIG_SOCK_ACCEPT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct sock' accept function requires a bool argument], [kern_sock_flag], [
	#include <linux/net.h>
], [
	((struct socket *)0)->ops->accept(NULL, NULL, O_NONBLOCK, false);
], [
	AC_DEFINE(HAVE_KERN_SOCK_ACCEPT_FLAG_ARG, 1,
		['struct sock' accept function requires bool argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/net.h>
], [
	((struct socket *)0)->ops->accept(NULL, NULL, O_NONBLOCK, false);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/net.h>
]], [[
	((struct socket *)0)->ops->accept(NULL, NULL, O_NONBLOCK, false);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KERN_SOCK_ACCEPT_FLAG_ARG$])
m4trace:configure.ac:24: -1- LN_HAVE_ORACLE_OFED_EXTENSIONS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Oracle OFED Extensions are enabled], [oracle_ofed_ext], [
	#include <rdma/ib_fmr_pool.h>
], [
	struct ib_fmr_pool_param param = {
		.relaxed           = 0
	};
	(void)param;
], [
	AC_DEFINE(HAVE_ORACLE_OFED_EXTENSIONS, 1,
		[if Oracle OFED Extensions are enabled])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <rdma/ib_fmr_pool.h>
], [
	struct ib_fmr_pool_param param = {
		.relaxed           = 0
	};
	(void)param;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <rdma/ib_fmr_pool.h>
]], [[
	struct ib_fmr_pool_param param = {
		.relaxed           = 0
	};
	(void)param;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ORACLE_OFED_EXTENSIONS$])
m4trace:configure.ac:24: -1- LN_CONFIG_SOCK_GETNAME
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'getname' has two args], [kern_sock_getname_2args], [
	#include <linux/net.h>
], [
	kernel_getsockname(NULL, NULL);
], [
	AC_DEFINE(HAVE_KERN_SOCK_GETNAME_2ARGS, 1,
		['getname' has two args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/net.h>
], [
	kernel_getsockname(NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/net.h>
]], [[
	kernel_getsockname(NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KERN_SOCK_GETNAME_2ARGS$])
m4trace:configure.ac:24: -1- LB_EXT4_SRC_DIR
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXT4_SRC_DIR$])
m4trace:configure.ac:24: -1- LB_VALIDATE_EXT4_SRC_DIR
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$EXT4_SRC_DIR/dir.c], [], [
		enable_ldiskfs_build="no"
		AC_MSG_WARN([ext4 must exist for ldiskfs build])
	])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$EXT4_SRC_DIR/file.c], [], [
		enable_ldiskfs_build="no"
		AC_MSG_WARN([ext4 must exist for ldiskfs build])
	])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$EXT4_SRC_DIR/inode.c], [], [
		enable_ldiskfs_build="no"
		AC_MSG_WARN([ext4 must exist for ldiskfs build])
	])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$EXT4_SRC_DIR/super.c], [], [
		enable_ldiskfs_build="no"
		AC_MSG_WARN([ext4 must exist for ldiskfs build])
	])
m4trace:configure.ac:24: -1- LC_PROG_LINUX
m4trace:configure.ac:24: -1- LC_CONFIG_PINGER
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:107: LC_CONFIG_PINGER is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: LC_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_PINGER$])
m4trace:configure.ac:24: -1- LC_CONFIG_CHECKSUM
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:123: LC_CONFIG_CHECKSUM is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: LC_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_CHECKSUM$])
m4trace:configure.ac:24: -1- LC_CONFIG_FLOCK
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:139: LC_CONFIG_FLOCK is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: LC_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_FLOCK$])
m4trace:configure.ac:24: -1- LC_CONFIG_HEALTH_CHECK_WRITE
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:155: LC_CONFIG_HEALTH_CHECK_WRITE is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: LC_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^USE_HEALTH_CHECK_WRITE$])
m4trace:configure.ac:24: -1- LC_CONFIG_LRU_RESIZE
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:169: LC_CONFIG_LRU_RESIZE is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: LC_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LRU_RESIZE_SUPPORT$])
m4trace:configure.ac:24: -1- LC_GLIBC_SUPPORT_FHANDLES
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_NAME_TO_HANDLE_AT$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FHANDLE_GLIBC_SUPPORT$])
m4trace:configure.ac:24: -1- LC_CONFIG_GSS
m4trace:configure.ac:24: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1472: AC_ARG_ENABLE is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:333: LC_CONFIG_GSS is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: LC_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LC_CONFIG_GSS_KEYRING
m4trace:configure.ac:24: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1472: AC_ARG_ENABLE is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:232: LC_CONFIG_GSS_KEYRING is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:333: LC_CONFIG_GSS is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: LC_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([KEYS], [], [
		gss_keyring_conf_test="fail"
		AC_MSG_WARN([GSS keyring backend requires that CONFIG_KEYS be enabled in your kernel.])])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_KEYS in or as module], [config_im_KEYS], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_KEYS) || defined(CONFIG_KEYS_MODULE))
	#error CONFIG_KEYS and CONFIG_KEYS_MODULE not #defined
	#endif
], [], [
		gss_keyring_conf_test="fail"
		AC_MSG_WARN([GSS keyring backend requires that CONFIG_KEYS be enabled in your kernel.])])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_KEYS) || defined(CONFIG_KEYS_MODULE))
	#error CONFIG_KEYS and CONFIG_KEYS_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_KEYS) || defined(CONFIG_KEYS_MODULE))
	#error CONFIG_KEYS and CONFIG_KEYS_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LIBKEYUTILS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GSS_KEYRING$])
m4trace:configure.ac:24: -1- LC_HAVE_CRED_TGCRED
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct cred' has member 'tgcred'], [cred_tgcred], [
	#include <linux/cred.h>
], [
	((struct cred *)0)->tgcred = NULL;
], [
	AC_DEFINE(HAVE_CRED_TGCRED, 1,
		[struct cred has member tgcred])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/cred.h>
], [
	((struct cred *)0)->tgcred = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/cred.h>
]], [[
	((struct cred *)0)->tgcred = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CRED_TGCRED$])
m4trace:configure.ac:24: -1- LC_KEY_TYPE_INSTANTIATE_2ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'key_type->instantiate' has two args], [key_type_instantiate_2args], [
	#include <linux/key-type.h>
], [
	((struct key_type *)0)->instantiate(0, NULL);
], [
	AC_DEFINE(HAVE_KEY_TYPE_INSTANTIATE_2ARGS, 1,
		[key_type->instantiate has two args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/key-type.h>
], [
	((struct key_type *)0)->instantiate(0, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/key-type.h>
]], [[
	((struct key_type *)0)->instantiate(0, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KEY_TYPE_INSTANTIATE_2ARGS$])
m4trace:configure.ac:24: -1- LC_CONFIG_SUNRPC
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([SUNRPC], [], [
	AS_IF([test "x$sunrpc_required" = xyes], [
		AC_MSG_ERROR([

kernel SUNRPC support is required by using GSS.
])
	])])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_SUNRPC in or as module], [config_im_SUNRPC], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_SUNRPC) || defined(CONFIG_SUNRPC_MODULE))
	#error CONFIG_SUNRPC and CONFIG_SUNRPC_MODULE not #defined
	#endif
], [], [
	AS_IF([test "x$sunrpc_required" = xyes], [
		AC_MSG_ERROR([

kernel SUNRPC support is required by using GSS.
])
	])])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_SUNRPC) || defined(CONFIG_SUNRPC_MODULE))
	#error CONFIG_SUNRPC and CONFIG_SUNRPC_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_SUNRPC) || defined(CONFIG_SUNRPC_MODULE))
	#error CONFIG_SUNRPC and CONFIG_SUNRPC_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([CRYPTO_MD5], [], [AC_MSG_WARN([kernel MD5 support is recommended by using GSS.])])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_CRYPTO_MD5 in or as module], [config_im_CRYPTO_MD5], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_MD5) || defined(CONFIG_CRYPTO_MD5_MODULE))
	#error CONFIG_CRYPTO_MD5 and CONFIG_CRYPTO_MD5_MODULE not #defined
	#endif
], [], [AC_MSG_WARN([kernel MD5 support is recommended by using GSS.])])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_MD5) || defined(CONFIG_CRYPTO_MD5_MODULE))
	#error CONFIG_CRYPTO_MD5 and CONFIG_CRYPTO_MD5_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_CRYPTO_MD5) || defined(CONFIG_CRYPTO_MD5_MODULE))
	#error CONFIG_CRYPTO_MD5 and CONFIG_CRYPTO_MD5_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([CRYPTO_SHA1], [], [AC_MSG_WARN([kernel SHA1 support is recommended by using GSS.])])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_CRYPTO_SHA1 in or as module], [config_im_CRYPTO_SHA1], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_SHA1) || defined(CONFIG_CRYPTO_SHA1_MODULE))
	#error CONFIG_CRYPTO_SHA1 and CONFIG_CRYPTO_SHA1_MODULE not #defined
	#endif
], [], [AC_MSG_WARN([kernel SHA1 support is recommended by using GSS.])])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_SHA1) || defined(CONFIG_CRYPTO_SHA1_MODULE))
	#error CONFIG_CRYPTO_SHA1 and CONFIG_CRYPTO_SHA1_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_CRYPTO_SHA1) || defined(CONFIG_CRYPTO_SHA1_MODULE))
	#error CONFIG_CRYPTO_SHA1 and CONFIG_CRYPTO_SHA1_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([CRYPTO_SHA256], [], [AC_MSG_WARN([kernel SHA256 support is recommended by using GSS.])])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_CRYPTO_SHA256 in or as module], [config_im_CRYPTO_SHA256], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_SHA256) || defined(CONFIG_CRYPTO_SHA256_MODULE))
	#error CONFIG_CRYPTO_SHA256 and CONFIG_CRYPTO_SHA256_MODULE not #defined
	#endif
], [], [AC_MSG_WARN([kernel SHA256 support is recommended by using GSS.])])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_SHA256) || defined(CONFIG_CRYPTO_SHA256_MODULE))
	#error CONFIG_CRYPTO_SHA256 and CONFIG_CRYPTO_SHA256_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_CRYPTO_SHA256) || defined(CONFIG_CRYPTO_SHA256_MODULE))
	#error CONFIG_CRYPTO_SHA256 and CONFIG_CRYPTO_SHA256_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([CRYPTO_SHA512], [], [AC_MSG_WARN([kernel SHA512 support is recommended by using GSS.])])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_CRYPTO_SHA512 in or as module], [config_im_CRYPTO_SHA512], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_SHA512) || defined(CONFIG_CRYPTO_SHA512_MODULE))
	#error CONFIG_CRYPTO_SHA512 and CONFIG_CRYPTO_SHA512_MODULE not #defined
	#endif
], [], [AC_MSG_WARN([kernel SHA512 support is recommended by using GSS.])])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_CRYPTO_SHA512) || defined(CONFIG_CRYPTO_SHA512_MODULE))
	#error CONFIG_CRYPTO_SHA512 and CONFIG_CRYPTO_SHA512_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_CRYPTO_SHA512) || defined(CONFIG_CRYPTO_SHA512_MODULE))
	#error CONFIG_CRYPTO_SHA512 and CONFIG_CRYPTO_SHA512_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- AC_KERBEROS_V5
m4trace:configure.ac:24: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1490: AC_ARG_WITH is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/kerberos5.m4:155: AC_KERBEROS_V5 is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:333: LC_CONFIG_GSS is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3171: LC_PROG_LINUX is expanded from...
../../lib/m4sugar/m4sh.m4:553: AS_CASE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:183: LB_CONFIG_MODULES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^KRB5_VERSION$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^USE_GSS_KRB5_CCACHE_NAME$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_HEIMDAL$])
m4trace:configure.ac:24: -2- m4_pattern_allow([^HAVE_LUCID_CONTEXT_SUPPORT$])
m4trace:configure.ac:24: -2- m4_pattern_allow([^HAVE_SET_ALLOWABLE_ENCTYPES$])
m4trace:configure.ac:24: -2- m4_pattern_allow([^HAVE_GSS_KRB5_CCACHE_NAME$])
m4trace:configure.ac:24: -2- m4_pattern_allow([^HAVE_KRB5_GET_ERROR_MESSAGE$])
m4trace:configure.ac:24: -2- m4_pattern_allow([^HAVE_KRB5_GET_INIT_CREDS_OPT_SET_ADDRESSLESS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KRB5INT_DERIVE_KEY$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_AES_SHA2_SUPPORT$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KRB5_DERIVE_KEY$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KRB5$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^KRBDIR$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^KRBLIBS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^KRBCFLAGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^KRBLDFLAGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^K5VERS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GSS$])
m4trace:configure.ac:24: -1- LC_OPENSSL_SSK
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_OPENSSL_SSK$])
m4trace:configure.ac:24: -1- LC_OPENSSL_GETSEPOL
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_OPENSSL_GETSEPOL$])
m4trace:configure.ac:24: -1- LC_HAVE_FHANDLE_SYSCALLS
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([FHANDLE], [
	AC_DEFINE(HAVE_FHANDLE_SYSCALLS, 1,
		[kernel supports fhandles and related syscalls])
	])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_FHANDLE in or as module], [config_im_FHANDLE], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_FHANDLE) || defined(CONFIG_FHANDLE_MODULE))
	#error CONFIG_FHANDLE and CONFIG_FHANDLE_MODULE not #defined
	#endif
], [
	AC_DEFINE(HAVE_FHANDLE_SYSCALLS, 1,
		[kernel supports fhandles and related syscalls])
	], [])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_FHANDLE) || defined(CONFIG_FHANDLE_MODULE))
	#error CONFIG_FHANDLE and CONFIG_FHANDLE_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_FHANDLE) || defined(CONFIG_FHANDLE_MODULE))
	#error CONFIG_FHANDLE and CONFIG_FHANDLE_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FHANDLE_SYSCALLS$])
m4trace:configure.ac:24: -1- LC_HAVE_FSTYPE_MOUNT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'file_system_type' has 'mount' field], [file_system_type_mount], [
	#include <linux/fs.h>
], [
	struct file_system_type fst = { };
	void *mount;

	mount = (void *)fst.mount;
], [
	AC_DEFINE(HAVE_FSTYPE_MOUNT, 1,
		[struct file_system_type has mount field])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct file_system_type fst = { };
	void *mount;

	mount = (void *)fst.mount;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct file_system_type fst = { };
	void *mount;

	mount = (void *)fst.mount;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FSTYPE_MOUNT$])
m4trace:configure.ac:24: -1- LC_HAVE_INODE_OWNER_OR_CAPABLE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_owner_or_capable' exist], [inode_owner_or_capable], [
	#include <linux/fs.h>
], [
	inode_owner_or_capable(NULL);
], [
	AC_DEFINE(HAVE_INODE_OWNER_OR_CAPABLE, 1,
		[inode_owner_or_capable exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	inode_owner_or_capable(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	inode_owner_or_capable(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INODE_OWNER_OR_CAPABLE$])
m4trace:configure.ac:24: -1- LC_HAVE_SECURITY_IINITSEC
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if security_inode_init_security takes a callback], [security_inode_init_security_callback], [
	#include <linux/security.h>
], [
	security_inode_init_security(NULL, NULL, NULL, (const initxattrs)NULL, NULL);
], [
	AC_DEFINE(HAVE_SECURITY_IINITSEC_CALLBACK, 1,
		  [security_inode_init_security takes a callback to set xattrs])
], [
	LB_CHECK_COMPILE([if security_inode_init_security takes a 'struct qstr' parameter],
	security_inode_init_security_qstr, [
		#include <linux/security.h>
	],[
		security_inode_init_security(NULL, NULL, (struct qstr *)NULL, NULL, NULL, NULL);
	],[
		AC_DEFINE(HAVE_SECURITY_IINITSEC_QSTR, 1,
			  [security_inode_init_security takes a 'struct qstr' parameter])
	])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/security.h>
], [
	security_inode_init_security(NULL, NULL, NULL, (const initxattrs)NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/security.h>
]], [[
	security_inode_init_security(NULL, NULL, NULL, (const initxattrs)NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SECURITY_IINITSEC_CALLBACK$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if security_inode_init_security takes a 'struct qstr' parameter], [security_inode_init_security_qstr], [
		#include <linux/security.h>
	], [
		security_inode_init_security(NULL, NULL, (struct qstr *)NULL, NULL, NULL, NULL);
	], [
		AC_DEFINE(HAVE_SECURITY_IINITSEC_QSTR, 1,
			  [security_inode_init_security takes a 'struct qstr' parameter])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#include <linux/security.h>
	], [
		security_inode_init_security(NULL, NULL, (struct qstr *)NULL, NULL, NULL, NULL);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#include <linux/security.h>
	]], [[
		security_inode_init_security(NULL, NULL, (struct qstr *)NULL, NULL, NULL, NULL);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SECURITY_IINITSEC_QSTR$])
m4trace:configure.ac:24: -1- LC_VFS_CREATE_USE_NAMEIDATA
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if vfs_create takes a struct nameidata parameter], [vfs_create], [
	#include <linux/namei.h>
	#include <linux/fs.h>
], [
	struct nameidata *nd;
	vfs_create(NULL, NULL, 0, nd);
], [
	AC_DEFINE(HAVE_VFS_CREATE_USE_NAMEIDATA, 1,
		[vfs_create use nameidata as parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/namei.h>
	#include <linux/fs.h>
], [
	struct nameidata *nd;
	vfs_create(NULL, NULL, 0, nd);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/namei.h>
	#include <linux/fs.h>
]], [[
	struct nameidata *nd;
	vfs_create(NULL, NULL, 0, nd);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VFS_CREATE_USE_NAMEIDATA$])
m4trace:configure.ac:24: -1- LC_DIRTY_INODE_WITH_FLAG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'dirty_inode' super_operation takes flag], [dirty_inode_super_operation_flag], [
	#include <linux/fs.h>
], [
	struct inode *inode = NULL;
	inode->i_sb->s_op->dirty_inode(NULL, 0);
], [
	AC_DEFINE(HAVE_DIRTY_INODE_HAS_FLAG, 1,
		[dirty_inode super_operation takes flag])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode *inode = NULL;
	inode->i_sb->s_op->dirty_inode(NULL, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode *inode = NULL;
	inode->i_sb->s_op->dirty_inode(NULL, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DIRTY_INODE_HAS_FLAG$])
m4trace:configure.ac:24: -1- LC_SETNS
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SCHED_H$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SETNS$])
m4trace:configure.ac:24: -1- LC_LM_XXX_LOCK_MANAGER_OPS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'lock-manager' ops renamed to 'lm_xxx'], [lock_manager_ops_lm_xxx], [
	#include <linux/fs.h>
], [
	struct lock_manager_operations lm_ops;
	lm_ops.lm_notify = NULL;
], [
	AC_DEFINE(HAVE_LM_XXX_LOCK_MANAGER_OPS, 1,
		[lock-manager ops renamed to lm_xxx])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct lock_manager_operations lm_ops;
	lm_ops.lm_notify = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct lock_manager_operations lm_ops;
	lm_ops.lm_notify = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LM_XXX_LOCK_MANAGER_OPS$])
m4trace:configure.ac:24: -1- LC_INODE_DIO_WAIT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode->i_alloc_sem' is killed and use inode_dio_wait], [inode_dio_wait], [
	#include <linux/fs.h>
], [
	inode_dio_wait((struct inode *)0);
], [
	AC_DEFINE(HAVE_INODE_DIO_WAIT, 1,
		[inode->i_alloc_sem is killed and use inode_dio_wait])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	inode_dio_wait((struct inode *)0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	inode_dio_wait((struct inode *)0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INODE_DIO_WAIT$])
m4trace:configure.ac:24: -1- LC_IOP_GET_ACL
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_operations' has '.get_acl' member function], [inode_ops_get_acl], [
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.get_acl = NULL;
], [
	AC_DEFINE(HAVE_IOP_GET_ACL, 1,
		[inode_operations has .get_acl member function])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.get_acl = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode_operations iop;
	iop.get_acl = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOP_GET_ACL$])
m4trace:configure.ac:24: -1- LC_FILE_LLSEEK_SIZE
m4trace:configure.ac:24: -1- LB_CHECK_EXPORT([generic_file_llseek_size], [fs/read_write.c], [AC_DEFINE(HAVE_FILE_LLSEEK_SIZE, 1,
		[generic_file_llseek_size is exported by the kernel])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FILE_LLSEEK_SIZE$])
m4trace:configure.ac:24: -1- LC_INODE_PERMISION_2ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_operations->permission' has two args], [inode_ops_permission_2args], [
	#include <linux/fs.h>
], [
	struct inode *inode __attribute__ ((unused));

	inode = NULL;
	inode->i_op->permission(NULL, 0);
], [
	AC_DEFINE(HAVE_INODE_PERMISION_2ARGS, 1,
		[inode_operations->permission has two args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode *inode __attribute__ ((unused));

	inode = NULL;
	inode->i_op->permission(NULL, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode *inode __attribute__ ((unused));

	inode = NULL;
	inode->i_op->permission(NULL, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INODE_PERMISION_2ARGS$])
m4trace:configure.ac:24: -1- LC_RADIX_EXCEPTION_ENTRY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([radix_tree_exceptional_entry exist], [radix_tree_exceptional_entry], [
	#include <linux/radix-tree.h>
], [
	radix_tree_exceptional_entry(NULL);
], [
	AC_DEFINE(HAVE_RADIX_EXCEPTION_ENTRY, 1,
		[radix_tree_exceptional_entry exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/radix-tree.h>
], [
	radix_tree_exceptional_entry(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/radix-tree.h>
]], [[
	radix_tree_exceptional_entry(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_RADIX_EXCEPTION_ENTRY$])
m4trace:configure.ac:24: -1- LC_HAVE_LOOP_CTL_GET_FREE
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX/include/linux/loop.h], [
	LB_CHECK_COMPILE([if have 'HAVE_LOOP_CTL_GET_FREE'],
	LOOP_CTL_GET_FREE, [
		#include <linux/loop.h>
	],[
		int i;

		i = LOOP_CTL_GET_FREE;
	],[
		AC_DEFINE(HAVE_LOOP_CTL_GET_FREE, 1,
			[LOOP_CTL_GET_FREE exist])
	])
], [
	AC_DEFINE(HAVE_LOOP_CTL_GET_FREE, 1,
		[kernel has LOOP_CTL_GET_FREE])
])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if have 'HAVE_LOOP_CTL_GET_FREE'], [LOOP_CTL_GET_FREE], [
		#include <linux/loop.h>
	], [
		int i;

		i = LOOP_CTL_GET_FREE;
	], [
		AC_DEFINE(HAVE_LOOP_CTL_GET_FREE, 1,
			[LOOP_CTL_GET_FREE exist])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#include <linux/loop.h>
	], [
		int i;

		i = LOOP_CTL_GET_FREE;
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#include <linux/loop.h>
	]], [[
		int i;

		i = LOOP_CTL_GET_FREE;
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LOOP_CTL_GET_FREE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LOOP_CTL_GET_FREE$])
m4trace:configure.ac:24: -1- LC_HAVE_PROTECT_I_NLINK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode->i_nlink' is protected from direct modification], [inode_i_nlink_protected], [
	#include <linux/fs.h>
], [
	struct inode i;
	set_nlink(&i, 1);
], [
	AC_DEFINE(HAVE_PROTECT_I_NLINK, 1,
		[inode->i_nlink is protected from direct modification])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode i;
	set_nlink(&i, 1);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode i;
	set_nlink(&i, 1);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PROTECT_I_NLINK$])
m4trace:configure.ac:24: -1- LC_HAVE_MIGRATE_HEADER
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX/include/linux/migrate.h], [
	AC_DEFINE(HAVE_MIGRATE_H, 1,
		[kernel has include/linux/migrate.h])
], [
	LB_CHECK_FILE([$LINUX/include/linux/migrate_mode.h], [
		AC_DEFINE(HAVE_MIGRATE_MODE_H, 1,
			[kernel has include/linux/migrate_mode.h])
	])
])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_MIGRATE_H$])
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$LINUX/include/linux/migrate_mode.h], [
		AC_DEFINE(HAVE_MIGRATE_MODE_H, 1,
			[kernel has include/linux/migrate_mode.h])
	])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_MIGRATE_MODE_H$])
m4trace:configure.ac:24: -1- LC_MIGRATEPAGE_4ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'address_space_operations.migratepage' has 4 args], [address_space_ops_migratepage_4args], [
	#include <linux/fs.h>
#ifdef HAVE_MIGRATE_H
	#include <linux/migrate.h>
#elif defined(HAVE_MIGRATE_MODE_H)
	#include <linux/migrate_mode.h>
#endif
], [
	struct address_space_operations aops = { };
	aops.migratepage(NULL, NULL, NULL, MIGRATE_ASYNC);
], [
	AC_DEFINE(HAVE_MIGRATEPAGE_4ARGS, 1,
		[address_space_operations.migratepage has 4 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
#ifdef HAVE_MIGRATE_H
	#include <linux/migrate.h>
#elif defined(HAVE_MIGRATE_MODE_H)
	#include <linux/migrate_mode.h>
#endif
], [
	struct address_space_operations aops = { };
	aops.migratepage(NULL, NULL, NULL, MIGRATE_ASYNC);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
#ifdef HAVE_MIGRATE_H
	#include <linux/migrate.h>
#elif defined(HAVE_MIGRATE_MODE_H)
	#include <linux/migrate_mode.h>
#endif
]], [[
	struct address_space_operations aops = { };
	aops.migratepage(NULL, NULL, NULL, MIGRATE_ASYNC);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_MIGRATEPAGE_4ARGS$])
m4trace:configure.ac:24: -1- LC_SUPEROPS_USE_DENTRY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'super_operations' use 'dentry' as parameter], [super_ops_dentry], [
	#include <linux/fs.h>
	int show_options(struct seq_file *seq, struct dentry *root) {
		return 0;
	}
], [
	struct super_operations ops;
	ops.show_options = show_options;
], [
	AC_DEFINE(HAVE_SUPEROPS_USE_DENTRY, 1,
		[super_operations use dentry as parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	int show_options(struct seq_file *seq, struct dentry *root) {
		return 0;
	}
], [
	struct super_operations ops;
	ops.show_options = show_options;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	int show_options(struct seq_file *seq, struct dentry *root) {
		return 0;
	}
]], [[
	struct super_operations ops;
	ops.show_options = show_options;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SUPEROPS_USE_DENTRY$])
m4trace:configure.ac:24: -1- LC_INODEOPS_USE_UMODE_T
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_operations' use 'umode_t' as parameter], [inode_ops_umode_t], [
	#include <linux/fs.h>
	#include <linux/types.h>
	int my_mknod(struct inode *dir, struct dentry *dchild,
		     umode_t mode, dev_t dev)
	{
		return 0;
	}
], [
	struct inode_operations ops;
	ops.mknod = my_mknod;
], [
	AC_DEFINE(HAVE_INODEOPS_USE_UMODE_T, 1,
		[inode_operations use umode_t as parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/types.h>
	int my_mknod(struct inode *dir, struct dentry *dchild,
		     umode_t mode, dev_t dev)
	{
		return 0;
	}
], [
	struct inode_operations ops;
	ops.mknod = my_mknod;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/types.h>
	int my_mknod(struct inode *dir, struct dentry *dchild,
		     umode_t mode, dev_t dev)
	{
		return 0;
	}
]], [[
	struct inode_operations ops;
	ops.mknod = my_mknod;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INODEOPS_USE_UMODE_T$])
m4trace:configure.ac:24: -1- LC_HAVE_CACHE_REGISTER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if have 'cache_register'], [cache_register], [
	#include <linux/sunrpc/cache.h>
], [
	cache_register(NULL);
], [
	AC_DEFINE(HAVE_CACHE_REGISTER, 1,
		[have cache_register])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/sunrpc/cache.h>
], [
	cache_register(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/sunrpc/cache.h>
]], [[
	cache_register(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CACHE_REGISTER$])
m4trace:configure.ac:24: -1- LC_HAVE_D_MAKE_ROOT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if have 'd_make_root'], [d_make_root], [
	#include <linux/fs.h>
], [
	d_make_root((struct inode *)NULL);
], [
	AC_DEFINE(HAVE_D_MAKE_ROOT, 1,
		[have d_make_root])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	d_make_root((struct inode *)NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	d_make_root((struct inode *)NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_D_MAKE_ROOT$])
m4trace:configure.ac:24: -1- LC_KMAP_ATOMIC_HAS_1ARG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'kmap_atomic' has only 1 argument], [kmap_atomic_1arg], [
	#include <linux/highmem.h>
], [
	kmap_atomic(NULL);
], [
	AC_DEFINE(HAVE_KMAP_ATOMIC_HAS_1ARG, 1,
		[have kmap_atomic has only 1 argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/highmem.h>
], [
	kmap_atomic(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/highmem.h>
]], [[
	kmap_atomic(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KMAP_ATOMIC_HAS_1ARG$])
m4trace:configure.ac:24: -1- LC_HAVE_CLEAR_INODE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if have 'clear_inode'], [clear_inode], [
	#include <linux/fs.h>
], [
	clear_inode((struct inode *)NULL);
], [
	AC_DEFINE(HAVE_CLEAR_INODE, 1,
		[have clear_inode])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	clear_inode((struct inode *)NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	clear_inode((struct inode *)NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CLEAR_INODE$])
m4trace:configure.ac:24: -1- LC_HAVE_ENCODE_FH_PARENT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'encode_fh' have parent inode as parameter], [encode_fh_parent_inode], [
	#include <linux/exportfs.h>
	#include <linux/fs.h>
	#include <linux/types.h>
	int ll_encode_fh(struct inode *i, __u32 *a, int *b, struct inode *p)
	{
		return 0;
	}
], [
	struct export_operations exp_op;
	exp_op.encode_fh = ll_encode_fh;
], [
	AC_DEFINE(HAVE_ENCODE_FH_PARENT, 1,
		[have parent inode as parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/exportfs.h>
	#include <linux/fs.h>
	#include <linux/types.h>
	int ll_encode_fh(struct inode *i, __u32 *a, int *b, struct inode *p)
	{
		return 0;
	}
], [
	struct export_operations exp_op;
	exp_op.encode_fh = ll_encode_fh;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/exportfs.h>
	#include <linux/fs.h>
	#include <linux/types.h>
	int ll_encode_fh(struct inode *i, __u32 *a, int *b, struct inode *p)
	{
		return 0;
	}
]], [[
	struct export_operations exp_op;
	exp_op.encode_fh = ll_encode_fh;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ENCODE_FH_PARENT$])
m4trace:configure.ac:24: -1- LC_FILE_LLSEEK_SIZE_5ARG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has 'generic_file_llseek_size' with 5 args], [generic_file_llseek_size_5args], [
	#include <linux/fs.h>
], [
	generic_file_llseek_size(NULL, 0, 0, 0, 0);
], [
	AC_DEFINE(HAVE_FILE_LLSEEK_SIZE_5ARGS, 1,
		[kernel has generic_file_llseek_size with 5 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	generic_file_llseek_size(NULL, 0, 0, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	generic_file_llseek_size(NULL, 0, 0, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FILE_LLSEEK_SIZE_5ARGS$])
m4trace:configure.ac:24: -1- LC_DATA_FOR_LLITE_IS_LIST
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'i_dentry/d_alias' uses 'list'], [i_dentry_d_alias_list], [
	#include <linux/fs.h>
], [
	struct inode inode;
	INIT_LIST_HEAD(&inode.i_dentry);
], [
	AC_DEFINE(DATA_FOR_LLITE_IS_LIST, 1,
		[both i_dentry/d_alias uses list])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode inode;
	INIT_LIST_HEAD(&inode.i_dentry);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode inode;
	INIT_LIST_HEAD(&inode.i_dentry);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^DATA_FOR_LLITE_IS_LIST$])
m4trace:configure.ac:24: -1- LC_DENTRY_OPEN_USE_PATH
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'dentry_open' uses 'struct path' as first argument], [dentry_open_path], [
	#include <linux/fs.h>
	#include <linux/path.h>
], [
	struct path path;
	dentry_open(&path, 0, NULL);
], [
	AC_DEFINE(HAVE_DENTRY_OPEN_USE_PATH, 1,
		[dentry_open uses struct path as first argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/path.h>
], [
	struct path path;
	dentry_open(&path, 0, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/path.h>
]], [[
	struct path path;
	dentry_open(&path, 0, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DENTRY_OPEN_USE_PATH$])
m4trace:configure.ac:24: -1- LC_HAVE_IOP_ATOMIC_OPEN
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'iop' has 'atomic_open'], [inode_ops_atomic_open], [
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.atomic_open = NULL;
], [
	AC_DEFINE(HAVE_IOP_ATOMIC_OPEN, 1,
		[have iop atomic_open])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.atomic_open = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode_operations iop;
	iop.atomic_open = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOP_ATOMIC_OPEN$])
m4trace:configure.ac:24: -1- LC_HAVE_SB_START_WRITE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if kernel supports wrapped FS freeze functions], [sb_start_write], [
	#include <linux/fs.h>
], [
	sb_start_write(NULL);
], [
	AC_DEFINE(HAVE_SB_START_WRITE, 1,
		[kernel supports wrapped FS freeze functions])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	sb_start_write(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	sb_start_write(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SB_START_WRITE$])
m4trace:configure.ac:24: -1- LC_HAVE_POSIXACL_USER_NS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'posix_acl_to_xattr' takes 'struct user_namespace'], [posix_acl_to_xattr_user_namespace], [
	#include <linux/fs.h>
	#include <linux/posix_acl_xattr.h>
], [
	posix_acl_to_xattr((struct user_namespace *)NULL, NULL, NULL, 0);
], [
	AC_DEFINE(HAVE_POSIXACL_USER_NS, 1,
		[posix_acl_to_xattr takes struct user_namespace])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/posix_acl_xattr.h>
], [
	posix_acl_to_xattr((struct user_namespace *)NULL, NULL, NULL, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/posix_acl_xattr.h>
]], [[
	posix_acl_to_xattr((struct user_namespace *)NULL, NULL, NULL, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_POSIXACL_USER_NS$])
m4trace:configure.ac:24: -1- LC_HAVE_FILE_F_INODE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct file' has member 'f_inode'], [file_f_inode], [
	#include <linux/fs.h>
], [
	((struct file *)0)->f_inode = NULL;
], [
	AC_DEFINE(HAVE_FILE_F_INODE, 1,
		[struct file has member f_inode])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	((struct file *)0)->f_inode = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	((struct file *)0)->f_inode = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FILE_F_INODE$])
m4trace:configure.ac:24: -1- LC_HAVE_FILE_INODE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if file_inode() exists], [file_inode], [
	#include <linux/fs.h>
], [
	file_inode(NULL);
], [
	AC_DEFINE(HAVE_FILE_INODE, 1,
		[file_inode() has been defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	file_inode(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	file_inode(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FILE_INODE$])
m4trace:configure.ac:24: -1- LC_HAVE_SUNRPC_UPCALL_HAS_3ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'sunrpc_cache_pipe_upcall' takes 3 args], [sunrpc_cache_pipe_upcall_3args], [
	#include <linux/sunrpc/cache.h>
], [
	sunrpc_cache_pipe_upcall(NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_SUNRPC_UPCALL_HAS_3ARGS, 1,
		[sunrpc_cache_pipe_upcall takes 3 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/sunrpc/cache.h>
], [
	sunrpc_cache_pipe_upcall(NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/sunrpc/cache.h>
]], [[
	sunrpc_cache_pipe_upcall(NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SUNRPC_UPCALL_HAS_3ARGS$])
m4trace:configure.ac:24: -1- LC_HAVE_HLIST_FOR_EACH_3ARG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'hlist_for_each_entry' has 3 args], [hlist_for_each_entry_3args], [
	#include <linux/list.h>
	#include <linux/fs.h>
], [
	struct hlist_head *head = NULL;
	struct inode *inode;

	hlist_for_each_entry(inode, head, i_hash) {
		continue;
	}
], [
	AC_DEFINE(HAVE_HLIST_FOR_EACH_3ARG, 1,
		[hlist_for_each_entry has 3 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/list.h>
	#include <linux/fs.h>
], [
	struct hlist_head *head = NULL;
	struct inode *inode;

	hlist_for_each_entry(inode, head, i_hash) {
		continue;
	}
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/list.h>
	#include <linux/fs.h>
]], [[
	struct hlist_head *head = NULL;
	struct inode *inode;

	hlist_for_each_entry(inode, head, i_hash) {
		continue;
	}
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_HLIST_FOR_EACH_3ARG$])
m4trace:configure.ac:24: -1- LC_HAVE_BIO_END_SECTOR
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'bio_end_sector' is defined], [bio_end_sector], [
	#include <linux/bio.h>
], [
	struct bio bio = { };
	unsigned long long end;

	end = bio_end_sector(&bio);
], [
	AC_DEFINE(HAVE_BIO_END_SECTOR, 1,
		  [bio_end_sector is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	struct bio bio = { };
	unsigned long long end;

	end = bio_end_sector(&bio);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	struct bio bio = { };
	unsigned long long end;

	end = bio_end_sector(&bio);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BIO_END_SECTOR$])
m4trace:configure.ac:24: -1- LC_HAVE_IS_SXID
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'is_sxid' is defined], [is_sxid], [
	#include <linux/fs.h>
], [
	struct inode inode = { };

	is_sxid(inode.i_mode);
], [
	AC_DEFINE(HAVE_IS_SXID, 1, [is_sxid is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode inode = { };

	is_sxid(inode.i_mode);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode inode = { };

	is_sxid(inode.i_mode);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IS_SXID$])
m4trace:configure.ac:24: -1- LC_HAVE_VFS_GETATTR_2ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if vfs_getattr takes 2 args], [vfs_getattr], [
	#include <linux/fs.h>
], [
	struct path path;

	vfs_getattr(&path, NULL);
], [
	AC_DEFINE(HAVE_VFS_GETATTR_2ARGS, 1,
		[vfs_getattr takes 2 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct path path;

	vfs_getattr(&path, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct path path;

	vfs_getattr(&path, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VFS_GETATTR_2ARGS$])
m4trace:configure.ac:24: -1- LC_HAVE_REMOVE_PROC_SUBTREE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'remove_proc_subtree' is defined], [remove_proc_subtree], [
	#include <linux/proc_fs.h>
], [
	remove_proc_subtree(NULL, NULL);
], [
	AC_DEFINE(HAVE_REMOVE_PROC_SUBTREE, 1,
		  [remove_proc_subtree is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/proc_fs.h>
], [
	remove_proc_subtree(NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/proc_fs.h>
]], [[
	remove_proc_subtree(NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_REMOVE_PROC_SUBTREE$])
m4trace:configure.ac:24: -1- LC_HAVE_PROC_REMOVE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'proc_remove' is defined], [proc_remove], [
	#include <linux/proc_fs.h>
], [
	proc_remove(NULL);
], [
	AC_DEFINE(HAVE_PROC_REMOVE, 1,
		  [proc_remove is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/proc_fs.h>
], [
	proc_remove(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/proc_fs.h>
]], [[
	proc_remove(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PROC_REMOVE$])
m4trace:configure.ac:24: -1- LC_HAVE_PROJECT_QUOTA
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if get_projid exists], [get_projid], [
	struct inode;
	#include <linux/quota.h>
], [
	struct dquot_operations ops = { };

	ops.get_projid(NULL, NULL);
], [
	AC_DEFINE(HAVE_PROJECT_QUOTA, 1,
		[get_projid function exists])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	struct inode;
	#include <linux/quota.h>
], [
	struct dquot_operations ops = { };

	ops.get_projid(NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	struct inode;
	#include <linux/quota.h>
]], [[
	struct dquot_operations ops = { };

	ops.get_projid(NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PROJECT_QUOTA$])
m4trace:configure.ac:24: -1- LC_HAVE_SECURITY_DENTRY_INIT_SECURITY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'security_dentry_init_security' is defined], [security_dentry_init_security], [
	#include <linux/security.h>
], [
	security_dentry_init_security(NULL, 0, NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_SECURITY_DENTRY_INIT_SECURITY, 1,
		[security_dentry_init_security' is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/security.h>
], [
	security_dentry_init_security(NULL, 0, NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/security.h>
]], [[
	security_dentry_init_security(NULL, 0, NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SECURITY_DENTRY_INIT_SECURITY$])
m4trace:configure.ac:24: -1- LC_HAVE_SECURITY_INODE_LISTSECURITY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if security_inode_listsecurity() is available/exported], [security_inode_listsecurity], [
	#include <linux/security.h>
], [
	security_inode_listsecurity(NULL, NULL, 0);
], [
	AC_DEFINE(HAVE_SECURITY_INODE_LISTSECURITY, 1,
		  [security_inode_listsecurity() is available/exported])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/security.h>
], [
	security_inode_listsecurity(NULL, NULL, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/security.h>
]], [[
	security_inode_listsecurity(NULL, NULL, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SECURITY_INODE_LISTSECURITY$])
m4trace:configure.ac:24: -1- LC_INVALIDATE_RANGE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'address_space_operations.invalidatepage' requires 3 arguments], [address_space_ops_invalidatepage_3args], [
	#include <linux/fs.h>
], [
	struct address_space_operations a_ops;
	a_ops.invalidatepage(NULL, 0, 0);
], [
	AC_DEFINE(HAVE_INVALIDATE_RANGE, 1,
		[address_space_operations.invalidatepage needs 3 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct address_space_operations a_ops;
	a_ops.invalidatepage(NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct address_space_operations a_ops;
	a_ops.invalidatepage(NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INVALIDATE_RANGE$])
m4trace:configure.ac:24: -1- LC_HAVE_DIR_CONTEXT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'dir_context' exist], [dir_context], [
	#include <linux/fs.h>
], [
#ifdef FMODE_KABI_ITERATE
#error "back to use readdir in kabi_extand mode"
#else
	struct dir_context ctx;

	ctx.pos = 0;
#endif
], [
	AC_DEFINE(HAVE_DIR_CONTEXT, 1,
		[dir_context exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
#ifdef FMODE_KABI_ITERATE
#error "back to use readdir in kabi_extand mode"
#else
	struct dir_context ctx;

	ctx.pos = 0;
#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
#ifdef FMODE_KABI_ITERATE
#error "back to use readdir in kabi_extand mode"
#else
	struct dir_context ctx;

	ctx.pos = 0;
#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DIR_CONTEXT$])
m4trace:configure.ac:24: -1- LC_D_COMPARE_5ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'd_compare' taken 5 arguments], [d_compare_5args], [
	#include <linux/dcache.h>
], [
	((struct dentry_operations*)0)->d_compare(NULL,NULL,0,NULL,NULL);
], [
	AC_DEFINE(HAVE_D_COMPARE_5ARGS, 1,
		[d_compare need 5 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/dcache.h>
], [
	((struct dentry_operations*)0)->d_compare(NULL,NULL,0,NULL,NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/dcache.h>
]], [[
	((struct dentry_operations*)0)->d_compare(NULL,NULL,0,NULL,NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_D_COMPARE_5ARGS$])
m4trace:configure.ac:24: -1- LC_HAVE_DCOUNT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'd_count' exists], [d_count], [
	#include <linux/dcache.h>
], [
	struct dentry de = { };
	int count;

	count = d_count(&de);
], [
	AC_DEFINE(HAVE_D_COUNT, 1,
		[d_count exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/dcache.h>
], [
	struct dentry de = { };
	int count;

	count = d_count(&de);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/dcache.h>
]], [[
	struct dentry de = { };
	int count;

	count = d_count(&de);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_D_COUNT$])
m4trace:configure.ac:24: -1- LC_HAVE_DENTRY_D_U_D_ALIAS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if list 'dentry.d_u.d_alias' exist], [d_alias], [
		#include <linux/list.h>
		#include <linux/dcache.h>
	], [
		struct dentry de;
		INIT_LIST_HEAD(&de.d_u.d_alias);
	], [
		AC_DEFINE(HAVE_DENTRY_D_U_D_ALIAS, 1,
			[list dentry.d_u.d_alias exist])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#include <linux/list.h>
		#include <linux/dcache.h>
	], [
		struct dentry de;
		INIT_LIST_HEAD(&de.d_u.d_alias);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#include <linux/list.h>
		#include <linux/dcache.h>
	]], [[
		struct dentry de;
		INIT_LIST_HEAD(&de.d_u.d_alias);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DENTRY_D_U_D_ALIAS$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if hlist 'dentry.d_u.d_alias' exist], [d_alias], [
		#include <linux/list.h>
		#include <linux/dcache.h>
	], [
		struct dentry de;
		INIT_HLIST_NODE(&de.d_u.d_alias);
	], [
		AC_DEFINE(HAVE_DENTRY_D_U_D_ALIAS, 1,
			[hlist dentry.d_u.d_alias exist])
	])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
		#include <linux/list.h>
		#include <linux/dcache.h>
	], [
		struct dentry de;
		INIT_HLIST_NODE(&de.d_u.d_alias);
	], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
		#include <linux/list.h>
		#include <linux/dcache.h>
	]], [[
		struct dentry de;
		INIT_HLIST_NODE(&de.d_u.d_alias);
	]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DENTRY_D_U_D_ALIAS$])
m4trace:configure.ac:24: -1- LC_HAVE_DENTRY_D_CHILD
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'dentry.d_child' exist], [d_child], [
	#include <linux/list.h>
	#include <linux/dcache.h>
], [
	struct dentry de;
	INIT_LIST_HEAD(&de.d_child);
], [
	AC_DEFINE(HAVE_DENTRY_D_CHILD, 1,
		[dentry.d_child exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/list.h>
	#include <linux/dcache.h>
], [
	struct dentry de;
	INIT_LIST_HEAD(&de.d_child);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/list.h>
	#include <linux/dcache.h>
]], [[
	struct dentry de;
	INIT_LIST_HEAD(&de.d_child);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DENTRY_D_CHILD$])
m4trace:configure.ac:24: -1- LC_PID_NS_FOR_CHILDREN
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct nsproxy' has 'pid_ns_for_children'], [pid_ns_for_children], [
	#include <linux/nsproxy.h>
], [
	struct nsproxy ns;
	ns.pid_ns_for_children = NULL;
], [
	AC_DEFINE(HAVE_PID_NS_FOR_CHILDREN, 1,
		  ['struct nsproxy' has 'pid_ns_for_children'])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/nsproxy.h>
], [
	struct nsproxy ns;
	ns.pid_ns_for_children = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/nsproxy.h>
]], [[
	struct nsproxy ns;
	ns.pid_ns_for_children = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PID_NS_FOR_CHILDREN$])
m4trace:configure.ac:24: -1- LC_OLDSIZE_TRUNCATE_PAGECACHE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'truncate_pagecache' with 'old_size' parameter], [truncate_pagecache_old_size], [
	#include <linux/mm.h>
], [
	truncate_pagecache(NULL, 0, 0);
], [
	AC_DEFINE(HAVE_OLDSIZE_TRUNCATE_PAGECACHE, 1,
		[with oldsize])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	truncate_pagecache(NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	truncate_pagecache(NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_OLDSIZE_TRUNCATE_PAGECACHE$])
m4trace:configure.ac:24: -1- LC_PTR_ERR_OR_ZERO_MISSING
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'PTR_ERR_OR_ZERO' is missing], [is_err_or_null], [
	#include <linux/err.h>
], [
	if (PTR_ERR_OR_ZERO(NULL)) return 0;
], [
	AC_DEFINE(HAVE_PTR_ERR_OR_ZERO, 1,
		['PTR_ERR_OR_ZERO' exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/err.h>
], [
	if (PTR_ERR_OR_ZERO(NULL)) return 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/err.h>
]], [[
	if (PTR_ERR_OR_ZERO(NULL)) return 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PTR_ERR_OR_ZERO$])
m4trace:configure.ac:24: -1- LC_KIOCB_KI_LEFT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct kiocb' with 'ki_left' member], [kiocb_ki_left], [
	#include <linux/aio.h>
], [
	((struct kiocb*)0)->ki_left = 0;
], [
	AC_DEFINE(HAVE_KIOCB_KI_LEFT, 1,
		[ki_left exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/aio.h>
], [
	((struct kiocb*)0)->ki_left = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/aio.h>
]], [[
	((struct kiocb*)0)->ki_left = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KIOCB_KI_LEFT$])
m4trace:configure.ac:24: -1- LC_INIT_LIST_HEAD_RCU
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'INIT_LIST_HEAD_RCU' exists], [init_list_head_rcu], [
	#include <linux/list.h>
	#include <linux/rculist.h>
], [
	struct list_head list;
	INIT_LIST_HEAD_RCU(&list);
], [
	AC_DEFINE(HAVE_INIT_LIST_HEAD_RCU, 1,
		  [INIT_LIST_HEAD_RCU exists])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/list.h>
	#include <linux/rculist.h>
], [
	struct list_head list;
	INIT_LIST_HEAD_RCU(&list);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/list.h>
	#include <linux/rculist.h>
]], [[
	struct list_head list;
	INIT_LIST_HEAD_RCU(&list);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INIT_LIST_HEAD_RCU$])
m4trace:configure.ac:24: -1- LC_VFS_RENAME_5ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has 'vfs_rename' with 5 args], [vfs_rename_5args], [
	#include <linux/fs.h>
], [
	vfs_rename(NULL, NULL, NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_VFS_RENAME_5ARGS, 1,
		[kernel has vfs_rename with 5 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	vfs_rename(NULL, NULL, NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	vfs_rename(NULL, NULL, NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VFS_RENAME_5ARGS$])
m4trace:configure.ac:24: -1- LC_VFS_UNLINK_3ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has 'vfs_unlink' with 3 args], [vfs_unlink_3args], [
	#include <linux/fs.h>
], [
	vfs_unlink(NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_VFS_UNLINK_3ARGS, 1,
		[kernel has vfs_unlink with 3 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	vfs_unlink(NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	vfs_unlink(NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VFS_UNLINK_3ARGS$])
m4trace:configure.ac:24: -1- LC_HAVE_D_IS_POSITIVE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'd_is_positive' exist], [d_is_positive], [
	#include <linux/dcache.h>
], [
	d_is_positive(NULL);
], [
	AC_DEFINE(HAVE_D_IS_POSITIVE, 1,
		['d_is_positive' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/dcache.h>
], [
	d_is_positive(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/dcache.h>
]], [[
	d_is_positive(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_D_IS_POSITIVE$])
m4trace:configure.ac:24: -1- LC_HAVE_BVEC_ITER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has struct bvec_iter], [have_bvec_iter], [
	#include <linux/bio.h>
], [
	struct bvec_iter iter;

	iter.bi_bvec_done = 0;
], [
	AC_DEFINE(HAVE_BVEC_ITER, 1,
		[kernel has struct bvec_iter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	struct bvec_iter iter;

	iter.bi_bvec_done = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	struct bvec_iter iter;

	iter.bi_bvec_done = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BVEC_ITER$])
m4trace:configure.ac:24: -1- LC_HAVE_TRUNCATE_IPAGES_FINAL
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has truncate_inode_pages_final], [truncate_ipages_final], [
	#include <linux/mm.h>
], [
	truncate_inode_pages_final(NULL);
], [
	AC_DEFINE(HAVE_TRUNCATE_INODE_PAGES_FINAL, 1,
		[kernel has truncate_inode_pages_final])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	truncate_inode_pages_final(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	truncate_inode_pages_final(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_TRUNCATE_INODE_PAGES_FINAL$])
m4trace:configure.ac:24: -1- LC_IOPS_RENAME_WITH_FLAGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_operations->rename' taken flags as argument], [iops_rename_with_flags], [
	#include <linux/fs.h>
], [
	struct inode *i1 = NULL, *i2 = NULL;
	struct dentry *d1 = NULL, *d2 = NULL;
	int rc;
	rc = ((struct inode_operations *)0)->rename(i1, d1, i2, d2, 0);
], [
	AC_DEFINE(HAVE_IOPS_RENAME_WITH_FLAGS, 1,
		[inode_operations->rename need flags as argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode *i1 = NULL, *i2 = NULL;
	struct dentry *d1 = NULL, *d2 = NULL;
	int rc;
	rc = ((struct inode_operations *)0)->rename(i1, d1, i2, d2, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode *i1 = NULL, *i2 = NULL;
	struct dentry *d1 = NULL, *d2 = NULL;
	int rc;
	rc = ((struct inode_operations *)0)->rename(i1, d1, i2, d2, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOPS_RENAME_WITH_FLAGS$])
m4trace:configure.ac:24: -1- LC_IOP_SET_ACL
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_operations' has '.set_acl' member function], [inode_ops_set_acl], [
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.set_acl = NULL;
], [
	AC_DEFINE(HAVE_IOP_SET_ACL, 1,
		[inode_operations has .set_acl member function])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.set_acl = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode_operations iop;
	iop.set_acl = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOP_SET_ACL$])
m4trace:configure.ac:24: -1- LC_VFS_RENAME_6ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has 'vfs_rename' with 6 args], [vfs_rename_6args], [
	#include <linux/fs.h>
], [
	vfs_rename(NULL, NULL, NULL, NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_VFS_RENAME_6ARGS, 1,
		[kernel has vfs_rename with 6 args])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	vfs_rename(NULL, NULL, NULL, NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	vfs_rename(NULL, NULL, NULL, NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VFS_RENAME_6ARGS$])
m4trace:configure.ac:24: -1- LC_DIRECTIO_USE_ITER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if direct IO uses iov_iter], [direct_io_iter], [
	#include <linux/fs.h>
], [
	struct address_space_operations ops = { };
	struct iov_iter *iter = NULL;
	loff_t offset = 0;

	ops.direct_IO(0, NULL, iter, offset);
], [
	AC_DEFINE(HAVE_DIRECTIO_ITER, 1,
		[direct IO uses iov_iter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct address_space_operations ops = { };
	struct iov_iter *iter = NULL;
	loff_t offset = 0;

	ops.direct_IO(0, NULL, iter, offset);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct address_space_operations ops = { };
	struct iov_iter *iter = NULL;
	loff_t offset = 0;

	ops.direct_IO(0, NULL, iter, offset);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DIRECTIO_ITER$])
m4trace:configure.ac:24: -1- LC_HAVE_IOV_ITER_INIT_DIRECTION
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'iov_iter_init' takes a tag], [iter_init], [
	#include <linux/uio.h>
	#include <linux/fs.h>
], [
	const struct iovec *iov = NULL;

	iov_iter_init(NULL, READ, iov, 1, 0);
], [
	AC_DEFINE(HAVE_IOV_ITER_INIT_DIRECTION, 1,
		[iov_iter_init handles directional tag])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/uio.h>
	#include <linux/fs.h>
], [
	const struct iovec *iov = NULL;

	iov_iter_init(NULL, READ, iov, 1, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/uio.h>
	#include <linux/fs.h>
]], [[
	const struct iovec *iov = NULL;

	iov_iter_init(NULL, READ, iov, 1, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOV_ITER_INIT_DIRECTION$])
m4trace:configure.ac:24: -1- LC_HAVE_IOV_ITER_TRUNCATE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'iov_iter_truncate' exists ], [iter_truncate], [
	#include <linux/uio.h>
	#include <linux/fs.h>
], [
	struct iov_iter *i = NULL;

	iov_iter_truncate(i, 0);
], [
	AC_DEFINE(HAVE_IOV_ITER_TRUNCATE, 1, [iov_iter_truncate exists])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/uio.h>
	#include <linux/fs.h>
], [
	struct iov_iter *i = NULL;

	iov_iter_truncate(i, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/uio.h>
	#include <linux/fs.h>
]], [[
	struct iov_iter *i = NULL;

	iov_iter_truncate(i, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOV_ITER_TRUNCATE$])
m4trace:configure.ac:24: -1- LC_HAVE_FILE_OPERATIONS_READ_WRITE_ITER
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'file_operations.[read|write]_iter' exist], [file_function_iter], [
	#include <linux/fs.h>
], [
	((struct file_operations *)NULL)->read_iter(NULL, NULL);
	((struct file_operations *)NULL)->write_iter(NULL, NULL);
], [
	AC_DEFINE(HAVE_FILE_OPERATIONS_READ_WRITE_ITER, 1,
		[file_operations.[read|write]_iter functions exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	((struct file_operations *)NULL)->read_iter(NULL, NULL);
	((struct file_operations *)NULL)->write_iter(NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	((struct file_operations *)NULL)->read_iter(NULL, NULL);
	((struct file_operations *)NULL)->write_iter(NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FILE_OPERATIONS_READ_WRITE_ITER$])
m4trace:configure.ac:24: -1- LC_HAVE_INTERVAL_BLK_INTEGRITY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'blk_integrity.interval' exist], [interval_blk_integrity], [
	#include <linux/blkdev.h>
], [
	((struct blk_integrity *)0)->interval = 0;
], [
	AC_DEFINE(HAVE_INTERVAL_BLK_INTEGRITY, 1,
		[blk_integrity.interval exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/blkdev.h>
], [
	((struct blk_integrity *)0)->interval = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/blkdev.h>
]], [[
	((struct blk_integrity *)0)->interval = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INTERVAL_BLK_INTEGRITY$])
m4trace:configure.ac:24: -1- LC_KEY_MATCH_DATA
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if struct key_match field exist], [key_match], [
	#include <linux/key-type.h>
], [
	struct key_match_data data;

	data.raw_data = NULL;
], [
	AC_DEFINE(HAVE_KEY_MATCH_DATA, 1,
		[struct key_match_data exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/key-type.h>
], [
	struct key_match_data data;

	data.raw_data = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/key-type.h>
]], [[
	struct key_match_data data;

	data.raw_data = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KEY_MATCH_DATA$])
m4trace:configure.ac:24: -1- LC_PERCPU_COUNTER_INIT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if percpu_counter_init uses GFP_* flag as argument], [percpu_counter_init], [
	#include <linux/percpu_counter.h>
], [
	percpu_counter_init(NULL, 0, GFP_KERNEL);
], [
	AC_DEFINE(HAVE_PERCPU_COUNTER_INIT_GFP_FLAG, 1,
		[percpu_counter_init uses GFP_* flag])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/percpu_counter.h>
], [
	percpu_counter_init(NULL, 0, GFP_KERNEL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/percpu_counter.h>
]], [[
	percpu_counter_init(NULL, 0, GFP_KERNEL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PERCPU_COUNTER_INIT_GFP_FLAG$])
m4trace:configure.ac:24: -1- LC_NFS_FILLDIR_USE_CTX
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if filldir_t uses struct dir_context], [filldir_ctx], [
	#include <linux/fs.h>
], [
	int filldir(struct dir_context *ctx, const char* name,
		    int i, loff_t off, u64 tmp, unsigned temp)
	{
		return 0;
	}

	struct dir_context ctx = {
		.actor = filldir,
	};

	ctx.actor(NULL, "test", 0, (loff_t) 0, 0, 0);
], [
	AC_DEFINE(HAVE_FILLDIR_USE_CTX, 1,
		[filldir_t needs struct dir_context as argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	int filldir(struct dir_context *ctx, const char* name,
		    int i, loff_t off, u64 tmp, unsigned temp)
	{
		return 0;
	}

	struct dir_context ctx = {
		.actor = filldir,
	};

	ctx.actor(NULL, "test", 0, (loff_t) 0, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	int filldir(struct dir_context *ctx, const char* name,
		    int i, loff_t off, u64 tmp, unsigned temp)
	{
		return 0;
	}

	struct dir_context ctx = {
		.actor = filldir,
	};

	ctx.actor(NULL, "test", 0, (loff_t) 0, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FILLDIR_USE_CTX$])
m4trace:configure.ac:24: -1- LC_KIOCB_HAS_NBYTES
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if struct kiocb has ki_nbytes field], [ki_nbytes], [
	#include <linux/fs.h>
], [
	struct kiocb iocb = { };

	iocb.ki_nbytes = 0;
], [
	AC_DEFINE(HAVE_KI_NBYTES, 1, [ki_nbytes field exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct kiocb iocb = { };

	iocb.ki_nbytes = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct kiocb iocb = { };

	iocb.ki_nbytes = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KI_NBYTES$])
m4trace:configure.ac:24: -1- LC_HAVE_DQUOT_QC_DQBLK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'quotactl_ops.set_dqblk' takes struct qc_dqblk], [qc_dqblk], [
	#include <linux/fs.h>
	#include <linux/quota.h>
], [
	((struct quotactl_ops *)0)->set_dqblk(NULL, *((struct kqid*)0), (struct qc_dqblk*)0);
], [
	AC_DEFINE(HAVE_DQUOT_QC_DQBLK, 1,
		[quotactl_ops.set_dqblk takes struct qc_dqblk])
	AC_DEFINE(HAVE_DQUOT_KQID, 1,
		[quotactl_ops.set_dqblk takes struct kqid])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/quota.h>
], [
	((struct quotactl_ops *)0)->set_dqblk(NULL, *((struct kqid*)0), (struct qc_dqblk*)0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/quota.h>
]], [[
	((struct quotactl_ops *)0)->set_dqblk(NULL, *((struct kqid*)0), (struct qc_dqblk*)0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DQUOT_QC_DQBLK$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DQUOT_KQID$])
m4trace:configure.ac:24: -1- LC_BACKING_DEV_INFO_REMOVAL
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if struct address_space has backing_dev_info], [backing_dev_info], [
	#include <linux/fs.h>
], [
	struct address_space mapping;

	mapping.backing_dev_info = NULL;
], [
	AC_DEFINE(HAVE_BACKING_DEV_INFO, 1, [backing_dev_info exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct address_space mapping;

	mapping.backing_dev_info = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct address_space mapping;

	mapping.backing_dev_info = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BACKING_DEV_INFO$])
m4trace:configure.ac:24: -1- LC_HAVE_BDI_CAP_MAP_COPY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if have 'BDI_CAP_MAP_COPY'], [bdi_cap_map_copy], [
	#include <linux/backing-dev.h>
], [
	struct backing_dev_info info;

	info.capabilities = BDI_CAP_MAP_COPY;
], [
	AC_DEFINE(HAVE_BDI_CAP_MAP_COPY, 1,
		[BDI_CAP_MAP_COPY exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/backing-dev.h>
], [
	struct backing_dev_info info;

	info.capabilities = BDI_CAP_MAP_COPY;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/backing-dev.h>
]], [[
	struct backing_dev_info info;

	info.capabilities = BDI_CAP_MAP_COPY;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BDI_CAP_MAP_COPY$])
m4trace:configure.ac:24: -1- LC_IOV_ITER_RW
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if iov_iter_rw exist], [iov_iter_rw], [
	#include <linux/fs.h>
	#include <linux/uio.h>
], [
	struct iov_iter *iter = NULL;

	iov_iter_rw(iter);
], [
	AC_DEFINE(HAVE_IOV_ITER_RW, 1,
		[iov_iter_rw exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/uio.h>
], [
	struct iov_iter *iter = NULL;

	iov_iter_rw(iter);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/uio.h>
]], [[
	struct iov_iter *iter = NULL;

	iov_iter_rw(iter);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOV_ITER_RW$])
m4trace:configure.ac:24: -1- LC_HAVE_SYNC_READ_WRITE
m4trace:configure.ac:24: -1- LB_CHECK_EXPORT([new_sync_read], [fs/read_write.c], [AC_DEFINE(HAVE_SYNC_READ_WRITE, 1,
			[new_sync_[read|write] is exported by the kernel])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SYNC_READ_WRITE$])
m4trace:configure.ac:24: -1- LC_HAVE___BI_CNT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has __bi_cnt in struct bio], [have___bi_cnt], [
	#include <asm/atomic.h>
	#include <linux/bio.h>
	#include <linux/blk_types.h>
], [
	struct bio bio = { };
	int cnt;
	cnt = atomic_read(&bio.__bi_cnt);
], [
	AC_DEFINE(HAVE___BI_CNT, 1,
		[struct bio has __bi_cnt])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <asm/atomic.h>
	#include <linux/bio.h>
	#include <linux/blk_types.h>
], [
	struct bio bio = { };
	int cnt;
	cnt = atomic_read(&bio.__bi_cnt);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <asm/atomic.h>
	#include <linux/bio.h>
	#include <linux/blk_types.h>
]], [[
	struct bio bio = { };
	int cnt;
	cnt = atomic_read(&bio.__bi_cnt);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE___BI_CNT$])
m4trace:configure.ac:24: -1- LC_BIO_ENDIO_USES_ONE_ARG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'bio_endio' with one argument exist], [bio_endio], [
	#include <linux/bio.h>
], [
	bio_endio(NULL);
], [
	AC_DEFINE(HAVE_BIO_ENDIO_USES_ONE_ARG, 1,
		[bio_endio takes only one argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	bio_endio(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	bio_endio(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BIO_ENDIO_USES_ONE_ARG$])
m4trace:configure.ac:24: -1- LC_SYMLINK_OPS_USE_NAMEIDATA
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if symlink inode operations have struct nameidata argument], [symlink_use_nameidata], [
	#include <linux/namei.h>
	#include <linux/fs.h>
], [
	struct nameidata *nd = NULL;

	((struct inode_operations *)0)->follow_link(NULL, nd);
	((struct inode_operations *)0)->put_link(NULL, nd, NULL);
], [
	AC_DEFINE(HAVE_SYMLINK_OPS_USE_NAMEIDATA, 1,
		[symlink inode operations need struct nameidata argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/namei.h>
	#include <linux/fs.h>
], [
	struct nameidata *nd = NULL;

	((struct inode_operations *)0)->follow_link(NULL, nd);
	((struct inode_operations *)0)->put_link(NULL, nd, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/namei.h>
	#include <linux/fs.h>
]], [[
	struct nameidata *nd = NULL;

	((struct inode_operations *)0)->follow_link(NULL, nd);
	((struct inode_operations *)0)->put_link(NULL, nd, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SYMLINK_OPS_USE_NAMEIDATA$])
m4trace:configure.ac:24: -1- LC_ACCOUNT_PAGE_DIRTIED_3ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'account_page_dirtied' with 3 args exists], [account_page_dirtied], [
	#include <linux/mm.h>
], [
	account_page_dirtied(NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_ACCOUNT_PAGE_DIRTIED_3ARGS, 1,
		[account_page_dirtied takes three arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	account_page_dirtied(NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	account_page_dirtied(NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ACCOUNT_PAGE_DIRTIED_3ARGS$])
m4trace:configure.ac:24: -1- LC_HAVE_INTERVAL_EXP_BLK_INTEGRITY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'blk_integrity.interval_exp' exist], [blk_integrity_interval_exp], [
	#include <linux/blkdev.h>
], [
	((struct blk_integrity *)0)->interval_exp = 0;
], [
	AC_DEFINE(HAVE_INTERVAL_EXP_BLK_INTEGRITY, 1,
		[blk_integrity.interval_exp exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/blkdev.h>
], [
	((struct blk_integrity *)0)->interval_exp = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/blkdev.h>
]], [[
	((struct blk_integrity *)0)->interval_exp = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INTERVAL_EXP_BLK_INTEGRITY$])
m4trace:configure.ac:24: -1- LC_HAVE_BIP_ITER_BIO_INTEGRITY_PAYLOAD
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'bio_integrity_payload.bip_iter' exist], [bio_integrity_payload_bip_iter], [
	#include <linux/bio.h>
], [
	((struct bio_integrity_payload *)0)->bip_iter.bi_size = 0;
], [
	AC_DEFINE(HAVE_BIP_ITER_BIO_INTEGRITY_PAYLOAD, 1,
		[bio_integrity_payload.bip_iter exist])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	((struct bio_integrity_payload *)0)->bip_iter.bi_size = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	((struct bio_integrity_payload *)0)->bip_iter.bi_size = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BIP_ITER_BIO_INTEGRITY_PAYLOAD$])
m4trace:configure.ac:24: -1- LC_HAVE_CACHE_HEAD_HLIST
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct cache_head' has 'cache_list' field], [cache_head_has_hlist], [
	#include <linux/sunrpc/cache.h>
], [
	do {} while(sizeof(((struct cache_head *)0)->cache_list));
], [
	AC_DEFINE(HAVE_CACHE_HEAD_HLIST, 1,
		[cache_head has hlist cache_list])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/sunrpc/cache.h>
], [
	do {} while(sizeof(((struct cache_head *)0)->cache_list));
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/sunrpc/cache.h>
]], [[
	do {} while(sizeof(((struct cache_head *)0)->cache_list));
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CACHE_HEAD_HLIST$])
m4trace:configure.ac:24: -1- LC_HAVE_XATTR_HANDLER_SIMPLIFIED
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct xattr_handler' functions pass in handler pointer], [xattr_handler_simplified], [
	#include <linux/xattr.h>
], [
	struct xattr_handler handler;

	((struct xattr_handler *)0)->get(&handler, NULL, NULL, NULL, 0);
	((struct xattr_handler *)0)->set(&handler, NULL, NULL, NULL, 0, 0);
], [
	AC_DEFINE(HAVE_XATTR_HANDLER_SIMPLIFIED, 1, [handler pointer is parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/xattr.h>
], [
	struct xattr_handler handler;

	((struct xattr_handler *)0)->get(&handler, NULL, NULL, NULL, 0);
	((struct xattr_handler *)0)->set(&handler, NULL, NULL, NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/xattr.h>
]], [[
	struct xattr_handler handler;

	((struct xattr_handler *)0)->get(&handler, NULL, NULL, NULL, 0);
	((struct xattr_handler *)0)->set(&handler, NULL, NULL, NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_XATTR_HANDLER_SIMPLIFIED$])
m4trace:configure.ac:24: -1- LC_HAVE_LOCKS_LOCK_FILE_WAIT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'locks_lock_file_wait' exists], [locks_lock_file_wait], [
	#include <linux/fs.h>
], [
	locks_lock_file_wait(NULL, NULL);
], [
	AC_DEFINE(HAVE_LOCKS_LOCK_FILE_WAIT, 1,
		[kernel has locks_lock_file_wait])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	locks_lock_file_wait(NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	locks_lock_file_wait(NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LOCKS_LOCK_FILE_WAIT$])
m4trace:configure.ac:24: -1- LC_HAVE_KEY_PAYLOAD_DATA_ARRAY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct key' has 'payload.data' as an array], [key_payload_data_array], [
	#include <linux/key.h>
], [
	struct key key = { };

	key.payload.data[0] = NULL;
], [
	AC_DEFINE(HAVE_KEY_PAYLOAD_DATA_ARRAY, 1, [payload.data is an array])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/key.h>
], [
	struct key key = { };

	key.payload.data[0] = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/key.h>
]], [[
	struct key key = { };

	key.payload.data[0] = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KEY_PAYLOAD_DATA_ARRAY$])
m4trace:configure.ac:24: -1- LC_HAVE_XATTR_HANDLER_NAME
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct xattr_handler' has a name member], [xattr_handler_name], [
	#include <linux/xattr.h>
], [
	((struct xattr_handler *)NULL)->name = NULL;
], [
	AC_DEFINE(HAVE_XATTR_HANDLER_NAME, 1, [xattr_handler has a name member])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/xattr.h>
], [
	((struct xattr_handler *)NULL)->name = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/xattr.h>
]], [[
	((struct xattr_handler *)NULL)->name = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_XATTR_HANDLER_NAME$])
m4trace:configure.ac:24: -1- LC_HAVE_BI_OPF
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has bi_opf in struct bio], [have_bi_opf], [
	#include <linux/bio.h>
], [
	struct bio bio;

	bio.bi_opf = 0;
], [
	AC_DEFINE(HAVE_BI_OPF, 1,
		[struct bio has bi_opf])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	struct bio bio;

	bio.bi_opf = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	struct bio bio;

	bio.bi_opf = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BI_OPF$])
m4trace:configure.ac:24: -1- LC_HAVE_SUBMIT_BIO_2ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if submit_bio takes two arguments], [have_submit_bio_2args], [
	#include <linux/bio.h>
], [
	struct bio bio;
	submit_bio(READ, &bio);
], [
	AC_DEFINE(HAVE_SUBMIT_BIO_2ARGS, 1,
		[submit_bio takes two arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	struct bio bio;
	submit_bio(READ, &bio);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	struct bio bio;
	submit_bio(READ, &bio);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SUBMIT_BIO_2ARGS$])
m4trace:configure.ac:24: -1- LC_HAVE_CLEAN_BDEV_ALIASES
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if kernel has clean_bdev_aliases], [have_clean_bdev_aliases], [
	#include <linux/buffer_head.h>
], [
	struct block_device bdev;
	clean_bdev_aliases(&bdev,1,1);
], [
	AC_DEFINE(HAVE_CLEAN_BDEV_ALIASES, 1,
		[kernel has clean_bdev_aliases])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/buffer_head.h>
], [
	struct block_device bdev;
	clean_bdev_aliases(&bdev,1,1);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/buffer_head.h>
]], [[
	struct block_device bdev;
	clean_bdev_aliases(&bdev,1,1);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CLEAN_BDEV_ALIASES$])
m4trace:configure.ac:24: -1- LC_HAVE_FILE_DENTRY
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel has 'file_dentry'], [file_dentry], [
	#include <linux/fs.h>
], [
	file_dentry(NULL);
], [
	AC_DEFINE(HAVE_FILE_DENTRY, 1,
		[kernel has file_dentry])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	file_dentry(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	file_dentry(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FILE_DENTRY$])
m4trace:configure.ac:24: -1- LC_HAVE_INODE_LOCK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_lock' is defined], [inode_lock], [
	#include <linux/fs.h>
], [
	inode_lock(NULL);
], [
	AC_DEFINE(HAVE_INODE_LOCK, 1,
		  [inode_lock is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	inode_lock(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	inode_lock(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INODE_LOCK$])
m4trace:configure.ac:24: -1- LC_HAVE_IOP_GET_LINK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'iop' has 'get_link'], [inode_ops_get_link], [
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.get_link = NULL;
], [
	AC_DEFINE(HAVE_IOP_GET_LINK, 1,
		[have iop get_link])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.get_link = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode_operations iop;
	iop.get_link = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOP_GET_LINK$])
m4trace:configure.ac:24: -1- LC_HAVE_IN_COMPAT_SYSCALL
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'in_compat_syscall' is defined], [in_compat_syscall], [
	#include <linux/compat.h>
], [
	in_compat_syscall();
], [
	AC_DEFINE(HAVE_IN_COMPAT_SYSCALL, 1,
		[have in_compat_syscall])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/compat.h>
], [
	in_compat_syscall();
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/compat.h>
]], [[
	in_compat_syscall();
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IN_COMPAT_SYSCALL$])
m4trace:configure.ac:24: -1- LC_HAVE_XATTR_HANDLER_INODE_PARAM
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct xattr_handler' functions have inode parameter], [xattr_handler_inode_param], [
	#include <linux/xattr.h>
], [
	const struct xattr_handler handler;

	((struct xattr_handler *)0)->get(&handler, NULL, NULL, NULL, NULL, 0);
	((struct xattr_handler *)0)->set(&handler, NULL, NULL, NULL, NULL, 0, 0);
], [
	AC_DEFINE(HAVE_XATTR_HANDLER_INODE_PARAM, 1, [needs inode parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/xattr.h>
], [
	const struct xattr_handler handler;

	((struct xattr_handler *)0)->get(&handler, NULL, NULL, NULL, NULL, 0);
	((struct xattr_handler *)0)->set(&handler, NULL, NULL, NULL, NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/xattr.h>
]], [[
	const struct xattr_handler handler;

	((struct xattr_handler *)0)->get(&handler, NULL, NULL, NULL, NULL, 0);
	((struct xattr_handler *)0)->set(&handler, NULL, NULL, NULL, NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_XATTR_HANDLER_INODE_PARAM$])
m4trace:configure.ac:24: -1- LC_LOCK_PAGE_MEMCG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'lock_page_memcg' is defined], [lock_page_memcg], [
	#include <linux/memcontrol.h>
], [
	lock_page_memcg(NULL);
], [
	AC_DEFINE(HAVE_LOCK_PAGE_MEMCG, 1,
		[lock_page_memcg is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/memcontrol.h>
], [
	lock_page_memcg(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/memcontrol.h>
]], [[
	lock_page_memcg(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LOCK_PAGE_MEMCG$])
m4trace:configure.ac:24: -1- LC_D_IN_LOOKUP
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'd_in_lookup' is defined], [d_in_lookup], [
	#include <linux/dcache.h>
], [
	d_in_lookup(NULL);
], [
	AC_DEFINE(HAVE_D_IN_LOOKUP, 1, [d_in_lookup is defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/dcache.h>
], [
	d_in_lookup(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/dcache.h>
]], [[
	d_in_lookup(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_D_IN_LOOKUP$])
m4trace:configure.ac:24: -1- LC_DIRECTIO_2ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if '->direct_IO()' taken 2 arguments], [direct_io_2args], [
	#include <linux/fs.h>
], [
	struct address_space_operations ops = { };
	struct iov_iter *iter = NULL;
	struct kiocb *iocb = NULL;
	int rc;

	rc = ops.direct_IO(iocb, iter);
], [
	AC_DEFINE(HAVE_DIRECTIO_2ARGS, 1,
		[direct_IO need 2 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct address_space_operations ops = { };
	struct iov_iter *iter = NULL;
	struct kiocb *iocb = NULL;
	int rc;

	rc = ops.direct_IO(iocb, iter);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct address_space_operations ops = { };
	struct iov_iter *iter = NULL;
	struct kiocb *iocb = NULL;
	int rc;

	rc = ops.direct_IO(iocb, iter);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DIRECTIO_2ARGS$])
m4trace:configure.ac:24: -1- LC_GENERIC_WRITE_SYNC_2ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'generic_write_sync()' taken 2 arguments], [generic_write_sync_2args], [
	#include <linux/fs.h>
], [
	struct kiocb *iocb = NULL;
	ssize_t rc;

	rc = generic_write_sync(iocb, 0);
], [
	AC_DEFINE(HAVE_GENERIC_WRITE_SYNC_2ARGS, 1,
		[generic_write_sync need 2 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct kiocb *iocb = NULL;
	ssize_t rc;

	rc = generic_write_sync(iocb, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct kiocb *iocb = NULL;
	ssize_t rc;

	rc = generic_write_sync(iocb, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GENERIC_WRITE_SYNC_2ARGS$])
m4trace:configure.ac:24: -1- LC_FOPS_ITERATE_SHARED
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ext4_dir_operations uses iterate_shared], [iterate_shared], [
	#include <linux/fs.h>
], [
	((struct file_operations *)0)->iterate_shared(NULL, NULL);
	dir_relax_shared(NULL);
], [
	AC_DEFINE(HAVE_ITERATE_SHARED, 1,
		['iterate_shared' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	((struct file_operations *)0)->iterate_shared(NULL, NULL);
	dir_relax_shared(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	((struct file_operations *)0)->iterate_shared(NULL, NULL);
	dir_relax_shared(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ITERATE_SHARED$])
m4trace:configure.ac:24: -1- LC_HAVE_POSIX_ACL_VALID_USER_NS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'posix_acl_valid' takes 'struct user_namespace'], [posix_acl_valid], [
	#include <linux/fs.h>
	#include <linux/posix_acl.h>
], [
	posix_acl_valid((struct user_namespace*)NULL, (const struct posix_acl*)NULL);
], [
	AC_DEFINE(HAVE_POSIX_ACL_VALID_USER_NS, 1,
		[posix_acl_valid takes struct user_namespace])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/posix_acl.h>
], [
	posix_acl_valid((struct user_namespace*)NULL, (const struct posix_acl*)NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/posix_acl.h>
]], [[
	posix_acl_valid((struct user_namespace*)NULL, (const struct posix_acl*)NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_POSIX_ACL_VALID_USER_NS$])
m4trace:configure.ac:24: -1- LC_D_COMPARE_4ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'd_compare' taken 4 arguments], [d_compare_4args], [
	#include <linux/dcache.h>
], [
	((struct dentry_operations*)0)->d_compare(NULL,0,NULL,NULL);
], [
	AC_DEFINE(HAVE_D_COMPARE_4ARGS, 1,
		[d_compare need 4 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/dcache.h>
], [
	((struct dentry_operations*)0)->d_compare(NULL,0,NULL,NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/dcache.h>
]], [[
	((struct dentry_operations*)0)->d_compare(NULL,0,NULL,NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_D_COMPARE_4ARGS$])
m4trace:configure.ac:24: -1- LC_FULL_NAME_HASH_3ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'full_name_hash' taken 3 arguments], [full_name_hash_3args], [
	#include <linux/stringhash.h>
], [
	unsigned int hash;
	hash = full_name_hash(NULL,NULL,0);
], [
	AC_DEFINE(HAVE_FULL_NAME_HASH_3ARGS, 1,
		[full_name_hash need 3 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/stringhash.h>
], [
	unsigned int hash;
	hash = full_name_hash(NULL,NULL,0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/stringhash.h>
]], [[
	unsigned int hash;
	hash = full_name_hash(NULL,NULL,0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_FULL_NAME_HASH_3ARGS$])
m4trace:configure.ac:24: -1- LC_STRUCT_POSIX_ACL_XATTR
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct posix_acl_xattr_{header,entry}' defined], [struct_posix_acl_xattr], [
	#include <linux/fs.h>
	#include <linux/posix_acl_xattr.h>
], [
	struct posix_acl_xattr_header *h = NULL;
	struct posix_acl_xattr_entry  *e;
	e = (void *)(h + 1);
], [
	AC_DEFINE(HAVE_STRUCT_POSIX_ACL_XATTR, 1,
		[struct posix_acl_xattr_{header,entry} defined])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/posix_acl_xattr.h>
], [
	struct posix_acl_xattr_header *h = NULL;
	struct posix_acl_xattr_entry  *e;
	e = (void *)(h + 1);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/posix_acl_xattr.h>
]], [[
	struct posix_acl_xattr_header *h = NULL;
	struct posix_acl_xattr_entry  *e;
	e = (void *)(h + 1);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_STRUCT_POSIX_ACL_XATTR$])
m4trace:configure.ac:24: -1- LC_IOP_XATTR
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_operations' has {get,set,remove}xattr members], [inode_ops_xattr], [
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.setxattr = NULL;
	iop.getxattr = NULL;
	iop.removexattr = NULL;
], [
	AC_DEFINE(HAVE_IOP_XATTR, 1,
		[inode_operations has {get,set,remove}xattr members])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.setxattr = NULL;
	iop.getxattr = NULL;
	iop.removexattr = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode_operations iop;
	iop.setxattr = NULL;
	iop.getxattr = NULL;
	iop.removexattr = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOP_XATTR$])
m4trace:configure.ac:24: -1- LC_GROUP_INFO_GID
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct group_info' has member 'gid'], [group_info_gid], [
	#include <linux/cred.h>
], [
	kgid_t *p;
	p = ((struct group_info *)0)->gid;
], [
	AC_DEFINE(HAVE_GROUP_INFO_GID, 1,
		[struct group_info has member gid])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/cred.h>
], [
	kgid_t *p;
	p = ((struct group_info *)0)->gid;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/cred.h>
]], [[
	kgid_t *p;
	p = ((struct group_info *)0)->gid;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GROUP_INFO_GID$])
m4trace:configure.ac:24: -1- LC_VFS_SETXATTR
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if '__vfs_setxattr' helper is available], [vfs_setxattr], [
	#include <linux/xattr.h>
], [
	__vfs_setxattr(NULL, NULL, NULL, NULL, 0, 0);
], [
	AC_DEFINE(HAVE_VFS_SETXATTR, 1,
		['__vfs_setxattr is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/xattr.h>
], [
	__vfs_setxattr(NULL, NULL, NULL, NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/xattr.h>
]], [[
	__vfs_setxattr(NULL, NULL, NULL, NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VFS_SETXATTR$])
m4trace:configure.ac:24: -1- LC_POSIX_ACL_UPDATE_MODE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'posix_acl_update_mode' exists], [posix_acl_update_mode], [
	#include <linux/fs.h>
	#include <linux/posix_acl.h>
], [
	posix_acl_update_mode(NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_POSIX_ACL_UPDATE_MODE, 1,
		['posix_acl_update_mode' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/posix_acl.h>
], [
	posix_acl_update_mode(NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/posix_acl.h>
]], [[
	posix_acl_update_mode(NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_POSIX_ACL_UPDATE_MODE$])
m4trace:configure.ac:24: -1- LC_IOP_GENERIC_READLINK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'generic_readlink' still exist], [inode_ops_readlink], [
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.readlink = generic_readlink;
], [
	AC_DEFINE(HAVE_IOP_GENERIC_READLINK, 1,
		[generic_readlink has been removed])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode_operations iop;
	iop.readlink = generic_readlink;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode_operations iop;
	iop.readlink = generic_readlink;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_IOP_GENERIC_READLINK$])
m4trace:configure.ac:24: -1- LC_HAVE_VM_FAULT_ADDRESS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct vm_fault' replaced virtual_address with address field], [vm_fault_address], [
	#include <linux/mm.h>
], [
	struct vm_fault vmf;
	vmf.address = NULL;
], [
	AC_DEFINE(HAVE_VM_FAULT_ADDRESS, 1,
		[virtual_address has been replaced by address field])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	struct vm_fault vmf;
	vmf.address = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	struct vm_fault vmf;
	vmf.address = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VM_FAULT_ADDRESS$])
m4trace:configure.ac:24: -1- LC_INODEOPS_ENHANCED_GETATTR
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'inode_operations' getattr member can gather advance stats], [getattr_path], [
	#include <linux/fs.h>
], [
	struct path path;

	((struct inode_operations *)1)->getattr(&path, NULL, 0, 0);
], [
	AC_DEFINE(HAVE_INODEOPS_ENHANCED_GETATTR, 1,
		[inode_operations .getattr member function can gather advance stats])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct path path;

	((struct inode_operations *)1)->getattr(&path, NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct path path;

	((struct inode_operations *)1)->getattr(&path, NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INODEOPS_ENHANCED_GETATTR$])
m4trace:configure.ac:24: -1- LC_VM_OPERATIONS_REMOVE_VMF_ARG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct vm_operations' removed struct vm_area_struct], [vm_operations_no_vm_area_struct], [
	#include <linux/mm.h>
], [
	struct vm_fault vmf;

	((struct vm_operations_struct *)0)->fault(&vmf);
	((struct vm_operations_struct *)0)->page_mkwrite(&vmf);
], [
	AC_DEFINE(HAVE_VM_OPS_USE_VM_FAULT_ONLY, 1,
		['struct vm_operations' remove struct vm_area_struct argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm.h>
], [
	struct vm_fault vmf;

	((struct vm_operations_struct *)0)->fault(&vmf);
	((struct vm_operations_struct *)0)->page_mkwrite(&vmf);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm.h>
]], [[
	struct vm_fault vmf;

	((struct vm_operations_struct *)0)->fault(&vmf);
	((struct vm_operations_struct *)0)->page_mkwrite(&vmf);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VM_OPS_USE_VM_FAULT_ONLY$])
m4trace:configure.ac:24: -1- LC_HAVE_KEY_USAGE_REFCOUNT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'key.usage' is refcount_t], [key_usage_refcount], [
	#include <linux/key.h>
], [
	struct key key = { };

	refcount_read(&key.usage);
], [
	AC_DEFINE(HAVE_KEY_USAGE_REFCOUNT, 1, [key.usage is of type refcount_t])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/key.h>
], [
	struct key key = { };

	refcount_read(&key.usage);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/key.h>
]], [[
	struct key key = { };

	refcount_read(&key.usage);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_KEY_USAGE_REFCOUNT$])
m4trace:configure.ac:24: -1- LC_HAVE_CRYPTO_MAX_ALG_NAME_128
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'CRYPTO_MAX_ALG_NAME' is 128], [crypto_max_alg_name], [
	#include <linux/crypto.h>
], [
	#if CRYPTO_MAX_ALG_NAME != 128
	exit(1);
	#endif
], [
	AC_DEFINE(HAVE_CRYPTO_MAX_ALG_NAME_128, 1,
		['CRYPTO_MAX_ALG_NAME' is 128])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/crypto.h>
], [
	#if CRYPTO_MAX_ALG_NAME != 128
	exit(1);
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/crypto.h>
]], [[
	#if CRYPTO_MAX_ALG_NAME != 128
	exit(1);
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CRYPTO_MAX_ALG_NAME_128$])
m4trace:configure.ac:24: -1- LC_CURRENT_TIME
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if CURRENT_TIME has been replaced with current_time], [current_time], [
	#include <linux/fs.h>
], [
	struct iattr attr;

	attr.ia_atime = current_time(NULL);
], [
	AC_DEFINE(HAVE_CURRENT_TIME, 1,
		[current_time() has replaced CURRENT_TIME])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct iattr attr;

	attr.ia_atime = current_time(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct iattr attr;

	attr.ia_atime = current_time(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CURRENT_TIME$])
m4trace:configure.ac:24: -1- LC_SUPER_BLOCK_S_UUID
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'struct super_block' s_uuid is uuid_t], [super_block_s_uuid], [
	#include <linux/fs.h>
], [
	struct super_block sb;

	uuid_parse(NULL, &sb.s_uuid);
], [
	AC_DEFINE(HAVE_S_UUID_AS_UUID_T, 1, ['s_uuid' is an uuid_t])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct super_block sb;

	uuid_parse(NULL, &sb.s_uuid);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct super_block sb;

	uuid_parse(NULL, &sb.s_uuid);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_S_UUID_AS_UUID_T$])
m4trace:configure.ac:24: -1- LC_SUPER_SETUP_BDI_NAME
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'super_setup_bdi_name' exist], [super_setup_bdi_name], [
	#include <linux/fs.h>
], [
	super_setup_bdi_name(NULL, "lustre");
], [
	AC_DEFINE(HAVE_SUPER_SETUP_BDI_NAME, 1,
		['super_setup_bdi_name' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	super_setup_bdi_name(NULL, "lustre");
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	super_setup_bdi_name(NULL, "lustre");
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SUPER_SETUP_BDI_NAME$])
m4trace:configure.ac:24: -1- LC_BI_STATUS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'bi_status' exist], [bi_status], [
	#include <linux/blk_types.h>
], [
	((struct bio *)0)->bi_status = 0;
], [
	AC_DEFINE(HAVE_BI_STATUS, 1,
		['bi_status' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/blk_types.h>
], [
	((struct bio *)0)->bi_status = 0;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/blk_types.h>
]], [[
	((struct bio *)0)->bi_status = 0;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BI_STATUS$])
m4trace:configure.ac:24: -1- LC_BIO_INTEGRITY_ENABLED
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'bio_integrity_enabled' exist], [bio_integrity_enabled], [
	#include <linux/bio.h>
], [
	bio_integrity_enabled(NULL);
], [
	AC_DEFINE(HAVE_BIO_INTEGRITY_ENABLED, 1,
		['bio_integrity_enabled' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	bio_integrity_enabled(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	bio_integrity_enabled(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BIO_INTEGRITY_ENABLED$])
m4trace:configure.ac:24: -1- LC_PAGEVEC_INIT_ONE_PARAM
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'pagevec_init' takes one parameter], [pagevec_init], [
	#include <linux/pagevec.h>
], [
	pagevec_init(NULL);
], [
	AC_DEFINE(HAVE_PAGEVEC_INIT_ONE_PARAM, 1,
		['pagevec_init' takes one parameter])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/pagevec.h>
], [
	pagevec_init(NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/pagevec.h>
]], [[
	pagevec_init(NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PAGEVEC_INIT_ONE_PARAM$])
m4trace:configure.ac:24: -1- LC_BI_BDEV
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'bi_bdev' exist], [bi_bdev], [
	#include <linux/bio.h>
], [
	((struct bio *)0)->bi_bdev = NULL;
], [
	AC_DEFINE(HAVE_BI_BDEV, 1,
		['bi_bdev' is available])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	((struct bio *)0)->bi_bdev = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	((struct bio *)0)->bi_bdev = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BI_BDEV$])
m4trace:configure.ac:24: -1- LC_VM_FAULT_T
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if vm_fault_t type exists], [vm_fault_t], [
	#include <linux/mm_types.h>
], [
	vm_fault_t x = VM_FAULT_SIGBUS;
	(void)x
], [
	AC_DEFINE(HAVE_VM_FAULT_T, 1,
		[if vm_fault_t type exists])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/mm_types.h>
], [
	vm_fault_t x = VM_FAULT_SIGBUS;
	(void)x
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/mm_types.h>
]], [[
	vm_fault_t x = VM_FAULT_SIGBUS;
	(void)x
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_VM_FAULT_T$])
m4trace:configure.ac:24: -1- LC_I_PAGES
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if struct address_space has i_pages], [i_pages], [
	#include <linux/fs.h>
], [
	struct address_space mapping = {};
	void *i_pages;

	i_pages = &mapping.i_pages;
], [
	AC_DEFINE(HAVE_I_PAGES, 1,
		[struct address_space has i_pages])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct address_space mapping = {};
	void *i_pages;

	i_pages = &mapping.i_pages;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct address_space mapping = {};
	void *i_pages;

	i_pages = &mapping.i_pages;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_I_PAGES$])
m4trace:configure.ac:24: -1- LC_INODE_TIMESPEC64
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if inode timestamps are struct timespec64], [inode_timespec64], [
	#include <linux/fs.h>
], [
	struct inode inode = {};
	struct timespec64 ts = {};

	inode.i_atime = timespec64_trunc(ts, 1);
	(void)inode;
], [
	AC_DEFINE(HAVE_INODE_TIMESPEC64, 1,
		[inode times are using timespec64])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct inode inode = {};
	struct timespec64 ts = {};

	inode.i_atime = timespec64_trunc(ts, 1);
	(void)inode;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct inode inode = {};
	struct timespec64 ts = {};

	inode.i_atime = timespec64_trunc(ts, 1);
	(void)inode;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_INODE_TIMESPEC64$])
m4trace:configure.ac:24: -1- LC_HAVE_SUNRPC_CACHE_HASH_LOCK_IS_A_SPINLOCK
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if cache_detail->hash_lock is a spinlock], [hash_lock_isa_spinlock_t], [
	#include <linux/sunrpc/cache.h>
], [
	spinlock_t *lock = &(((struct cache_detail *)0)->hash_lock);
	spin_lock(lock);
], [
	AC_DEFINE(HAVE_CACHE_HASH_SPINLOCK, 1,
		[if cache_detail->hash_lock is a spinlock])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/sunrpc/cache.h>
], [
	spinlock_t *lock = &(((struct cache_detail *)0)->hash_lock);
	spin_lock(lock);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/sunrpc/cache.h>
]], [[
	spinlock_t *lock = &(((struct cache_detail *)0)->hash_lock);
	spin_lock(lock);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CACHE_HASH_SPINLOCK$])
m4trace:configure.ac:24: -1- LC_UAPI_LINUX_MOUNT_H
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if MS_RDONLY was moved to uapi/linux/mount.h], [uapi_linux_mount], [
	#include <uapi/linux/mount.h>
], [
	int x = MS_RDONLY;
	(void)x;
], [
	AC_DEFINE(HAVE_UAPI_LINUX_MOUNT_H, 1,
		[if MS_RDONLY was moved to uapi/linux/mount.h])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <uapi/linux/mount.h>
], [
	int x = MS_RDONLY;
	(void)x;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <uapi/linux/mount.h>
]], [[
	int x = MS_RDONLY;
	(void)x;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_UAPI_LINUX_MOUNT_H$])
m4trace:configure.ac:24: -1- LC_HAS_LINUX_SELINUX_ENABLED
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if linux/selinux.h exists], [selinux_is_enabled], [
	#include <linux/selinux.h>
], [
	bool has_selinux = selinux_is_enabled();
	(void)has_selinux;
], [
	AC_DEFINE(HAVE_LINUX_SELINUX_IS_ENABLED, 1,
		[if linux/selinux.h exists])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/selinux.h>
], [
	bool has_selinux = selinux_is_enabled();
	(void)has_selinux;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/selinux.h>
]], [[
	bool has_selinux = selinux_is_enabled();
	(void)has_selinux;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LINUX_SELINUX_IS_ENABLED$])
m4trace:configure.ac:24: -1- LC_BIO_BI_PHYS_SEGMENTS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if struct bio has bi_phys_segments member], [bye_bio_bi_phys_segments], [
	#include <linux/bio.h>
], [
	struct bio *bio = NULL;
	bio->bi_phys_segments++;
], [
	AC_DEFINE(HAVE_BIO_BI_PHYS_SEGMENTS, 1,
		[struct bio has bi_phys_segments member])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	struct bio *bio = NULL;
	bio->bi_phys_segments++;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	struct bio *bio = NULL;
	bio->bi_phys_segments++;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BIO_BI_PHYS_SEGMENTS$])
m4trace:configure.ac:24: -1- LC_LM_COMPARE_OWNER_EXISTS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if lock_manager_operations has lm_compare_owner], [lock_manager_ops_lm_compare_owner], [
	#include <linux/fs.h>
], [
	struct lock_manager_operations lm_ops;
	lm_ops.lm_compare_owner = NULL;
], [
	AC_DEFINE(HAVE_LM_COMPARE_OWNER, 1,
		[lock_manager_operations has lm_compare_owner])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
], [
	struct lock_manager_operations lm_ops;
	lm_ops.lm_compare_owner = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
]], [[
	struct lock_manager_operations lm_ops;
	lm_ops.lm_compare_owner = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LM_COMPARE_OWNER$])
m4trace:configure.ac:24: -1- LC_BIO_INTEGRITY_PREP_FN
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'bio_integrity_prep_fn' exists], [bio_integrity_prep_fn], [
	#include <linux/bio.h>
], [
	bio_integrity_prep_fn(NULL, NULL, NULL);
], [
	AC_DEFINE(HAVE_BIO_INTEGRITY_PREP_FN, 1,
		[kernel has bio_integrity_prep_fn])
	AC_SUBST(PATCHED_INTEGRITY_INTF)
], [
	AC_SUBST(PATCHED_INTEGRITY_INTF, [#])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bio.h>
], [
	bio_integrity_prep_fn(NULL, NULL, NULL);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bio.h>
]], [[
	bio_integrity_prep_fn(NULL, NULL, NULL);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BIO_INTEGRITY_PREP_FN$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PATCHED_INTEGRITY_INTF$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PATCHED_INTEGRITY_INTF$])
m4trace:configure.ac:24: -1- LC_STACK_SIZE
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if stack size is at least 8k], [stack_size_8k], [
	#include <linux/thread_info.h>
], [
	#if THREAD_SIZE < 8192
	#error "stack size < 8192"
	#endif
], [], [AC_MSG_ERROR([

Lustre requires that Linux is configured with at least a 8KB stack.
])])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/thread_info.h>
], [
	#if THREAD_SIZE < 8192
	#error "stack size < 8192"
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/thread_info.h>
]], [[
	#if THREAD_SIZE < 8192
	#error "stack size < 8192"
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LC_QUOTA_CONFIG
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([QUOTA], [], [AC_MSG_ERROR([

Lustre quota requires that CONFIG_QUOTA is enabled in your kernel.
])])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_QUOTA in or as module], [config_im_QUOTA], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_QUOTA) || defined(CONFIG_QUOTA_MODULE))
	#error CONFIG_QUOTA and CONFIG_QUOTA_MODULE not #defined
	#endif
], [], [AC_MSG_ERROR([

Lustre quota requires that CONFIG_QUOTA is enabled in your kernel.
])])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_QUOTA) || defined(CONFIG_QUOTA_MODULE))
	#error CONFIG_QUOTA and CONFIG_QUOTA_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_QUOTA) || defined(CONFIG_QUOTA_MODULE))
	#error CONFIG_QUOTA and CONFIG_QUOTA_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LC_POSIX_ACL_CONFIG
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG_IM([FS_POSIX_ACL], [AC_DEFINE(CONFIG_LUSTRE_FS_POSIX_ACL, 1, [Enable POSIX acl])
], [ ])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_FS_POSIX_ACL in or as module], [config_im_FS_POSIX_ACL], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_FS_POSIX_ACL) || defined(CONFIG_FS_POSIX_ACL_MODULE))
	#error CONFIG_FS_POSIX_ACL and CONFIG_FS_POSIX_ACL_MODULE not #defined
	#endif
], [AC_DEFINE(CONFIG_LUSTRE_FS_POSIX_ACL, 1, [Enable POSIX acl])
], [ ])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#if !(defined(CONFIG_FS_POSIX_ACL) || defined(CONFIG_FS_POSIX_ACL_MODULE))
	#error CONFIG_FS_POSIX_ACL and CONFIG_FS_POSIX_ACL_MODULE not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#if !(defined(CONFIG_FS_POSIX_ACL) || defined(CONFIG_FS_POSIX_ACL_MODULE))
	#error CONFIG_FS_POSIX_ACL and CONFIG_FS_POSIX_ACL_MODULE not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_LUSTRE_FS_POSIX_ACL$])
m4trace:configure.ac:24: -1- LB_CONFIG_LDISKFS
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_LDISKFS$])
m4trace:configure.ac:24: -1- LDISKFS_LINUX_SERIES
m4trace:configure.ac:24: -1- m4_pattern_allow([^LDISKFS_SERIES$])
m4trace:configure.ac:24: -1- LDISKFS_AC_PATCH_PROGRAM
m4trace:configure.ac:24: -1- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
../../lib/autoconf/general.m4:1472: AC_ARG_ENABLE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:262: LDISKFS_AC_PATCH_PROGRAM is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:350: LB_CONFIG_LDISKFS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:513: LB_CONFIG_SERVERS is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^quilt_avail$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^patch_avail$])
m4trace:configure.ac:24: -1- LB_EXT_FREE_BLOCKS_WITH_BUFFER_HEAD
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if 'ext4_free_blocks' needs 'struct buffer_head'], [ext4_free_blocks_with_buffer_head], [
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	ext4_free_blocks(NULL, NULL, NULL, 0, 0, 0);
], [
	AC_DEFINE(HAVE_EXT_FREE_BLOCK_WITH_BUFFER_HEAD, 1,
		[ext4_free_blocks do not require struct buffer_head])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	ext4_free_blocks(NULL, NULL, NULL, 0, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
]], [[
	ext4_free_blocks(NULL, NULL, NULL, 0, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_EXT_FREE_BLOCK_WITH_BUFFER_HEAD$])
m4trace:configure.ac:24: -1- LB_EXT4_JOURNAL_START_3ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ext4_journal_start takes 3 arguments], [ext4_journal_start], [
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4_jbd2.h"
], [
	ext4_journal_start(NULL, 0, 0);
], [
	AC_DEFINE(JOURNAL_START_HAS_3ARGS, 1, [ext4_journal_start takes 3 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4_jbd2.h"
], [
	ext4_journal_start(NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4_jbd2.h"
]], [[
	ext4_journal_start(NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^JOURNAL_START_HAS_3ARGS$])
m4trace:configure.ac:24: -1- LB_EXT4_BREAD_4ARGS
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ext4_bread takes 4 arguments], [ext4_bread], [
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	ext4_bread(NULL, NULL, 0, 0);
], [
	AC_DEFINE(HAVE_EXT4_BREAD_4ARGS, 1, [ext4_bread takes 4 arguments])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	ext4_bread(NULL, NULL, 0, 0);
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
]], [[
	ext4_bread(NULL, NULL, 0, 0);
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_EXT4_BREAD_4ARGS$])
m4trace:configure.ac:24: -1- LB_EXT4_HAVE_INFO_DQUOT
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if i_dquot is in ext4_inode_info], [ext4_info_dquot], [
	#include <linux/fs.h>
	#include <linux/quota.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	struct ext4_inode_info in;
	struct dquot *dq;

	dq = in.i_dquot[0];
], [
	AC_DEFINE(HAVE_EXT4_INFO_DQUOT, 1, [i_dquot is in ext4_inode_info])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include <linux/quota.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	struct ext4_inode_info in;
	struct dquot *dq;

	dq = in.i_dquot[0];
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include <linux/quota.h>
	#include "$EXT4_SRC_DIR/ext4.h"
]], [[
	struct ext4_inode_info in;
	struct dquot *dq;

	dq = in.i_dquot[0];
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_EXT4_INFO_DQUOT$])
m4trace:configure.ac:24: -1- LB_EXT4_HAVE_I_CRYPT_INFO
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if i_crypt_info is in ext4_inode_info], [ext4_i_crypt_info], [
	#define CONFIG_EXT4_FS_ENCRYPTION 1
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	struct ext4_inode_info in;

	in.i_crypt_info = NULL;
], [
	AC_DEFINE(
		CONFIG_LDISKFS_FS_ENCRYPTION, 1,
		[enable encryption for ldiskfs]
	)
], [
	LB_CHECK_CONFIG([EXT4_FS_ENCRYPTION],[
		AC_DEFINE(
			CONFIG_LDISKFS_FS_ENCRYPTION, 1,
			[enable encryption for ldiskfs]
		)
	])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#define CONFIG_EXT4_FS_ENCRYPTION 1
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	struct ext4_inode_info in;

	in.i_crypt_info = NULL;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#define CONFIG_EXT4_FS_ENCRYPTION 1
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
]], [[
	struct ext4_inode_info in;

	in.i_crypt_info = NULL;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_LDISKFS_FS_ENCRYPTION$])
m4trace:configure.ac:24: -1- LB_CHECK_CONFIG([EXT4_FS_ENCRYPTION], [
		AC_DEFINE(
			CONFIG_LDISKFS_FS_ENCRYPTION, 1,
			[enable encryption for ldiskfs]
		)
	])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if Linux kernel was built with CONFIG_EXT4_FS_ENCRYPTION], [config_EXT4_FS_ENCRYPTION], [
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_EXT4_FS_ENCRYPTION
	#error CONFIG_EXT4_FS_ENCRYPTION not #defined
	#endif
], [
		AC_DEFINE(
			CONFIG_LDISKFS_FS_ENCRYPTION, 1,
			[enable encryption for ldiskfs]
		)
	], [])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <$AUTOCONF_HDIR/autoconf.h>
], [
	#ifndef CONFIG_EXT4_FS_ENCRYPTION
	#error CONFIG_EXT4_FS_ENCRYPTION not #defined
	#endif
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <$AUTOCONF_HDIR/autoconf.h>
]], [[
	#ifndef CONFIG_EXT4_FS_ENCRYPTION
	#error CONFIG_EXT4_FS_ENCRYPTION not #defined
	#endif
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_LDISKFS_FS_ENCRYPTION$])
m4trace:configure.ac:24: -1- LB_LDISKFS_IGET_HAS_FLAGS_ARG
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ldiskfs_iget takes a flags argument], [ext4_iget_3args], [
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	int f = EXT4_IGET_SPECIAL;
	(void)f;
], [
	AC_DEFINE(HAVE_LDISKFS_IGET_WITH_FLAGS, 1,
		[if ldiskfs_iget takes a flags argument])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
], [
	int f = EXT4_IGET_SPECIAL;
	(void)f;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/fs.h>
	#include "$EXT4_SRC_DIR/ext4.h"
]], [[
	int f = EXT4_IGET_SPECIAL;
	(void)f;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LDISKFS_IGET_WITH_FLAGS$])
m4trace:configure.ac:24: -1- LB_HAVE_BVEC_ITER_ALL
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if bvec_iter_all exists for multi-page bvec iternation], [ext4fs_dirhash], [
	#include <linux/bvec.h>
], [
	struct bvec_iter_all iter;
	(void)iter;
], [
	AC_DEFINE(HAVE_BVEC_ITER_ALL, 1,
		[if bvec_iter_all exists for multi-page bvec iternation])
])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
	#include <linux/bvec.h>
], [
	struct bvec_iter_all iter;
	(void)iter;
], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
	#include <linux/bvec.h>
]], [[
	struct bvec_iter_all iter;
	(void)iter;
]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_BVEC_ITER_ALL$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_LDISKFS_FS_POSIX_ACL$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_LDISKFS_FS_SECURITY$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_LDISKFS_FS_XATTR$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_LDISKFS_FS_RW$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LDISKFS_SUBDIR$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LDISKFS_OSD$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_LDISKFS$])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([LDISKFS_ENABLED], [test x$enable_ldiskfs = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LDISKFS_ENABLED_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LDISKFS_ENABLED_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([LDISKFS_ENABLED_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([LDISKFS_ENABLED_FALSE])
m4trace:configure.ac:24: -1- LB_CONFIG_ZFS
m4trace:configure.ac:24: -1- LB_ZFS
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_OBJ$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_VERSION$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_SYMBOLS$])
m4trace:configure.ac:24: -1- LB_ZFS_DEVEL
m4trace:configure.ac:24: -1- LB_ZFS_USER
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_LIBZFS_INCLUDE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_LIBZFS_LDFLAGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_LIBZFS_LIBS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_MAJOR$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_MINOR$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_PATCH$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_FIX$])
m4trace:configure.ac:24: -1- LB_SPL
m4trace:configure.ac:24: -1- m4_pattern_allow([^SPL$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SPL_OBJ$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SPL_VERSION$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_SYMBOLS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ZFS_OSD$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if zfs defines dsl_pool_config_enter/exit], [dsl_pool_config_enter], [
			#include <sys/dsl_pool.h>
		], [
			dsl_pool_config_enter(NULL, FTAG);
		], [
			AC_DEFINE(HAVE_DSL_POOL_CONFIG, 1,
				[Have dsl_pool_config_enter/exit in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/dsl_pool.h>
		], [
			dsl_pool_config_enter(NULL, FTAG);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/dsl_pool.h>
		]], [[
			dsl_pool_config_enter(NULL, FTAG);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DSL_POOL_CONFIG$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if zfs defines dsl_sync_task_do_nowait], [dsl_sync_task_do_nowait], [
			#include <sys/dsl_synctask.h>
		], [
			dsl_sync_task_do_nowait(NULL, NULL, NULL, NULL, NULL, 0, NULL);
		], [
			AC_DEFINE(HAVE_DSL_SYNC_TASK_DO_NOWAIT, 1,
				[Have dsl_sync_task_do_nowait in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/dsl_synctask.h>
		], [
			dsl_sync_task_do_nowait(NULL, NULL, NULL, NULL, NULL, 0, NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/dsl_synctask.h>
		]], [[
			dsl_sync_task_do_nowait(NULL, NULL, NULL, NULL, NULL, 0, NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DSL_SYNC_TASK_DO_NOWAIT$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if zfs defines sa_spill_alloc], [sa_spill_alloc], [
			#include <sys/kmem.h>
			#include <sys/sa.h>
		], [
			void *ptr;

			ptr = sa_spill_alloc(KM_SLEEP);
			sa_spill_free(ptr);
		], [
			AC_DEFINE(HAVE_SA_SPILL_ALLOC, 1,
				[Have sa_spill_alloc in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/kmem.h>
			#include <sys/sa.h>
		], [
			void *ptr;

			ptr = sa_spill_alloc(KM_SLEEP);
			sa_spill_free(ptr);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/kmem.h>
			#include <sys/sa.h>
		]], [[
			void *ptr;

			ptr = sa_spill_alloc(KM_SLEEP);
			sa_spill_free(ptr);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SA_SPILL_ALLOC$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if zfs defines spa_maxblocksize], [spa_maxblocksize], [
			#include <sys/spa.h>
		], [
			spa_t *spa = NULL;
			int size;

			size = spa_maxblocksize(spa);
		], [
			AC_DEFINE(HAVE_SPA_MAXBLOCKSIZE, 1,
				[Have spa_maxblocksize in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/spa.h>
		], [
			spa_t *spa = NULL;
			int size;

			size = spa_maxblocksize(spa);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/spa.h>
		]], [[
			spa_t *spa = NULL;
			int size;

			size = spa_maxblocksize(spa);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SPA_MAXBLOCKSIZE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if zfs defines dmu_object_alloc_dnsize], [dmu_object_alloc_dnsize], [
			#include <sys/dmu.h>
			#include <sys/dnode.h>
		], [
			objset_t *os = NULL;
			dmu_object_type_t objtype = DMU_OT_NONE;
			int blocksize = 0;
			dmu_object_type_t bonustype = DMU_OT_SA;
			int dnodesize = DNODE_MIN_SIZE;
			dmu_tx_t *tx = NULL;
			uint64_t id;

			id = dmu_object_alloc_dnsize(os, objtype, blocksize,
						     bonustype,
						     DN_BONUS_SIZE(dnodesize),
						     dnodesize, tx);
		], [
			AC_DEFINE(HAVE_DMU_OBJECT_ALLOC_DNSIZE, 1,
				[Have dmu_object_alloc_dnsize in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/dmu.h>
			#include <sys/dnode.h>
		], [
			objset_t *os = NULL;
			dmu_object_type_t objtype = DMU_OT_NONE;
			int blocksize = 0;
			dmu_object_type_t bonustype = DMU_OT_SA;
			int dnodesize = DNODE_MIN_SIZE;
			dmu_tx_t *tx = NULL;
			uint64_t id;

			id = dmu_object_alloc_dnsize(os, objtype, blocksize,
						     bonustype,
						     DN_BONUS_SIZE(dnodesize),
						     dnodesize, tx);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/dmu.h>
			#include <sys/dnode.h>
		]], [[
			objset_t *os = NULL;
			dmu_object_type_t objtype = DMU_OT_NONE;
			int blocksize = 0;
			dmu_object_type_t bonustype = DMU_OT_SA;
			int dnodesize = DNODE_MIN_SIZE;
			dmu_tx_t *tx = NULL;
			uint64_t id;

			id = dmu_object_alloc_dnsize(os, objtype, blocksize,
						     bonustype,
						     DN_BONUS_SIZE(dnodesize),
						     dnodesize, tx);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_OBJECT_ALLOC_DNSIZE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'dmu_prefetch' with 6 args], [dmu_prefetch], [
			#include <sys/dmu.h>
		], [
			objset_t *os = NULL;
			uint64_t object = 0;
			int64_t level = 0;
			uint64_t offset = 0;
			uint64_t len = 0;
			enum zio_priority pri = ZIO_PRIORITY_SYNC_READ;

			dmu_prefetch(os, object, level, offset, len, pri);
		], [
			AC_DEFINE(HAVE_DMU_PREFETCH_6ARG, 1,
				[Have 6 argument dmu_pretch in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/dmu.h>
		], [
			objset_t *os = NULL;
			uint64_t object = 0;
			int64_t level = 0;
			uint64_t offset = 0;
			uint64_t len = 0;
			enum zio_priority pri = ZIO_PRIORITY_SYNC_READ;

			dmu_prefetch(os, object, level, offset, len, pri);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/dmu.h>
		]], [[
			objset_t *os = NULL;
			uint64_t object = 0;
			int64_t level = 0;
			uint64_t offset = 0;
			uint64_t len = 0;
			enum zio_priority pri = ZIO_PRIORITY_SYNC_READ;

			dmu_prefetch(os, object, level, offset, len, pri);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_PREFETCH_6ARG$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has native dnode accounting supported], [dmu_objset_userobjused_enabled], [
			#include <sys/dmu_objset.h>
		], [
			dmu_objset_userobjused_enabled(NULL);
		], [
			AC_DEFINE(HAVE_DMU_USEROBJ_ACCOUNTING, 1,
				[Have native dnode accounting in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/dmu_objset.h>
		], [
			dmu_objset_userobjused_enabled(NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/dmu_objset.h>
		]], [[
			dmu_objset_userobjused_enabled(NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_USEROBJ_ACCOUNTING$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has multihost protection], [spa_multihost], [
			#include <sys/spa.h>
		], [
			spa_multihost(NULL);
		], [
			AC_DEFINE(HAVE_ZFS_MULTIHOST, 1,
				[Have multihost protection in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/spa.h>
		], [
			spa_multihost(NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/spa.h>
		]], [[
			spa_multihost(NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ZFS_MULTIHOST$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'zap_lookup_by_dnode'], [zap_lookup_by_dnode], [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			zap_lookup_by_dnode(dn, NULL, 1, 1, NULL);
		], [
			AC_DEFINE(HAVE_ZAP_LOOKUP_BY_DNODE, 1,
				[Have zap_lookup_by_dnode() in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			zap_lookup_by_dnode(dn, NULL, 1, 1, NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/zap.h>
			#include <sys/dnode.h>
		]], [[
			dnode_t *dn = NULL;
			zap_lookup_by_dnode(dn, NULL, 1, 1, NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ZAP_LOOKUP_BY_DNODE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'zap_add_by_dnode'], [zap_add_by_dnode], [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			zap_add_by_dnode(dn, NULL, 1, 1, NULL, NULL);
		], [
			AC_DEFINE(HAVE_ZAP_ADD_BY_DNODE, 1,
				[Have zap_add_by_dnode() in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			zap_add_by_dnode(dn, NULL, 1, 1, NULL, NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/zap.h>
			#include <sys/dnode.h>
		]], [[
			dnode_t *dn = NULL;
			zap_add_by_dnode(dn, NULL, 1, 1, NULL, NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ZAP_ADD_BY_DNODE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'zap_remove_by_dnode'], [zap_remove_by_dnode], [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			zap_remove_by_dnode(dn, NULL, NULL);
		], [
			AC_DEFINE(HAVE_ZAP_REMOVE_ADD_BY_DNODE, 1,
				[Have zap_remove_by_dnode() in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			zap_remove_by_dnode(dn, NULL, NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/zap.h>
			#include <sys/dnode.h>
		]], [[
			dnode_t *dn = NULL;
			zap_remove_by_dnode(dn, NULL, NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ZAP_REMOVE_ADD_BY_DNODE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'dmu_tx_hold_zap_by_dnode'], [dmu_tx_hold_zap_by_dnode], [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			dmu_tx_hold_zap_by_dnode(NULL, dn, TRUE, NULL);
		], [
			AC_DEFINE(HAVE_DMU_TX_HOLD_ZAP_BY_DNODE, 1,
				[Have dmu_tx_hold_zap_by_dnode() in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			dmu_tx_hold_zap_by_dnode(NULL, dn, TRUE, NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/zap.h>
			#include <sys/dnode.h>
		]], [[
			dnode_t *dn = NULL;
			dmu_tx_hold_zap_by_dnode(NULL, dn, TRUE, NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_TX_HOLD_ZAP_BY_DNODE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'dmu_tx_hold_write_by_dnode'], [dmu_tx_hold_write_by_dnode], [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			dmu_tx_hold_write_by_dnode(NULL, dn, 0, 0);
		], [
			AC_DEFINE(HAVE_DMU_TX_HOLD_WRITE_BY_DNODE, 1,
				[Have dmu_tx_hold_write_by_dnode() in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			dmu_tx_hold_write_by_dnode(NULL, dn, 0, 0);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/zap.h>
			#include <sys/dnode.h>
		]], [[
			dnode_t *dn = NULL;
			dmu_tx_hold_write_by_dnode(NULL, dn, 0, 0);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_TX_HOLD_WRITE_BY_DNODE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'dmu_write_by_dnode'], [dmu_write_by_dnode], [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			dmu_write_by_dnode(dn, 0, 0, NULL, NULL);
		], [
			AC_DEFINE(HAVE_DMU_WRITE_BY_DNODE, 1,
				[Have dmu_write_by_dnode() in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			dmu_write_by_dnode(dn, 0, 0, NULL, NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/zap.h>
			#include <sys/dnode.h>
		]], [[
			dnode_t *dn = NULL;
			dmu_write_by_dnode(dn, 0, 0, NULL, NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_WRITE_BY_DNODE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'dmu_read_by_dnode'], [dmu_read_by_dnode], [
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			dmu_read_by_dnode(dn, 0, 0, NULL, 0);
		], [
			AC_DEFINE(HAVE_DMU_READ_BY_DNODE, 1,
				[Have dmu_read_by_dnode() in ZFS])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/zap.h>
			#include <sys/dnode.h>
		], [
			dnode_t *dn = NULL;
			dmu_read_by_dnode(dn, 0, 0, NULL, 0);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/zap.h>
			#include <sys/dnode.h>
		]], [[
			dnode_t *dn = NULL;
			dmu_read_by_dnode(dn, 0, 0, NULL, 0);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_READ_BY_DNODE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'dmu_tx_mark_netfree'], [dmu_tx_mark_netfree], [
			#include <sys/dmu.h>
		], [
			dmu_tx_t *tx = NULL;
			dmu_tx_mark_netfree(tx);
		], [
			AC_DEFINE(HAVE_DMU_TX_MARK_NETFREE, 1,
				[Have dmu_tx_mark_netfree])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/dmu.h>
		], [
			dmu_tx_t *tx = NULL;
			dmu_tx_mark_netfree(tx);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/dmu.h>
		]], [[
			dmu_tx_t *tx = NULL;
			dmu_tx_mark_netfree(tx);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_TX_MARK_NETFREE$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if SPL has 'inode_timespec_t'], [zfs_have_inode_timespec], [
			#include <sys/fs/zfs.h>
		], [
			inode_timespec_t now;
			gethrestime(&now);
		], [
			AC_DEFINE(HAVE_ZFS_INODE_TIMESPEC, 1,
				[Have inode_timespec_t])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/fs/zfs.h>
		], [
			inode_timespec_t now;
			gethrestime(&now);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/fs/zfs.h>
		]], [[
			inode_timespec_t now;
			gethrestime(&now);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ZFS_INODE_TIMESPEC$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'zfs_refcount_add'], [zfs_refcount_add], [
			#include <sys/refcount.h>
		], [
			zfs_refcount_add((zfs_refcount_t *) NULL, NULL);
		], [
			AC_DEFINE(HAVE_ZFS_REFCOUNT_ADD, 1,
				[Have zfs_refcount_add])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/refcount.h>
		], [
			zfs_refcount_add((zfs_refcount_t *) NULL, NULL);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/refcount.h>
		]], [[
			zfs_refcount_add((zfs_refcount_t *) NULL, NULL);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_ZFS_REFCOUNT_ADD$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'dmu_objset_own' with 6 args], [dmu_objset_own], [
			#include <sys/dmu_objset.h>
		], [
			objset_t *os = NULL;
			dmu_objset_type_t type = DMU_OST_ANY;
			dmu_objset_own(NULL, type, B_FALSE, B_TRUE, FTAG, &os);
		], [
			AC_DEFINE(HAVE_DMU_OBJSET_OWN_6ARG, 1,
				[Have dmu_objset_own() with 6 args])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/dmu_objset.h>
		], [
			objset_t *os = NULL;
			dmu_objset_type_t type = DMU_OST_ANY;
			dmu_objset_own(NULL, type, B_FALSE, B_TRUE, FTAG, &os);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/dmu_objset.h>
		]], [[
			objset_t *os = NULL;
			dmu_objset_type_t type = DMU_OST_ANY;
			dmu_objset_own(NULL, type, B_FALSE, B_TRUE, FTAG, &os);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_OBJSET_OWN_6ARG$])
m4trace:configure.ac:24: -1- LB_CHECK_COMPILE([if ZFS has 'dmu_objset_disown' with 3 args], [dmu_objset_disown], [
			#include <sys/dmu_objset.h>
		], [
			objset_t *os = NULL;
			dmu_objset_disown(os, B_TRUE, FTAG);
		], [
			AC_DEFINE(HAVE_DMU_OBJSET_DISOWN_3ARG, 1,
				[Have dmu_objset_disown() with 3 args])
		])
m4trace:configure.ac:24: -1- LB_LINUX_TRY_COMPILE([
			#include <sys/dmu_objset.h>
		], [
			objset_t *os = NULL;
			dmu_objset_disown(os, B_TRUE, FTAG);
		], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- LB_LINUX_COMPILE_IFELSE([AC_LANG_SOURCE([LB_LANG_PROGRAM([[
			#include <sys/dmu_objset.h>
		]], [[
			objset_t *os = NULL;
			dmu_objset_disown(os, B_TRUE, FTAG);
		]])])], [modules], [test -s build/conftest.o], [AS_VAR_SET([lb_compile], [yes])], [AS_VAR_SET([lb_compile], [no])])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_DMU_OBJSET_DISOWN_3ARG$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_ZFS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_ZFS$])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([ZFS_ENABLED], [test "x$enable_zfs" = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_ENABLED_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ZFS_ENABLED_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([ZFS_ENABLED_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([ZFS_ENABLED_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([SPL_ENABLED], [test "x$enable_spl" = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SPL_ENABLED_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SPL_ENABLED_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SPL_ENABLED_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SPL_ENABLED_FALSE])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SERVER_SUPPORT$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_SERVER$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_SERVER$])
m4trace:configure.ac:24: -1- LIBCFS_CONFIG_CDEBUG
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:33: LIBCFS_CONFIG_CDEBUG is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CDEBUG_ENABLED$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:33: LIBCFS_CONFIG_CDEBUG is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CDEBUG_ENTRY_EXIT$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:33: LIBCFS_CONFIG_CDEBUG is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LIBCFS_DEBUG$])
m4trace:configure.ac:24: -1- LC_QUOTA
m4trace:configure.ac:24: -1- LC_CONFIG_QUOTA
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3249: LC_CONFIG_QUOTA is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3264: LC_QUOTA is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SYS_QUOTA_H$])
m4trace:configure.ac:24: -1- LB_LIBMOUNT
m4trace:configure.ac:24: -1- m4_pattern_allow([^LDLIBMOUNT$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LIBMOUNT$])
m4trace:configure.ac:24: -1- LB_PATH_SNMP
m4trace:configure.ac:24: -1- LB_CHECK_FILE([$srcdir/snmp/lustre-snmp.c], [SNMP_DIST_SUBDIR="snmp"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SNMP_DIST_SUBDIR$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SNMP_SUBDIR$])
m4trace:configure.ac:24: -1- LB_PATH_LUSTREIOKIT
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:104: LB_PATH_LUSTREIOKIT is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LUSTREIOKIT_SUBDIR$])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([BUILD_LUSTREIOKIT], [test "x$enable_iokit" = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^BUILD_LUSTREIOKIT_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^BUILD_LUSTREIOKIT_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([BUILD_LUSTREIOKIT_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([BUILD_LUSTREIOKIT_FALSE])
m4trace:configure.ac:24: -1- LB_DEFINE_E2FSPROGS_NAMES
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build-ldiskfs.m4:483: LB_DEFINE_E2FSPROGS_NAMES is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LDISKFSPROGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^E2FSPROGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MKE2FS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^DEBUGFS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^TUNE2FS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^E2LABEL$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^DUMPE2FS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^E2FSCK$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PFSCK$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^E2FSPROGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MKE2FS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^DEBUGFS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^TUNE2FS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^E2LABEL$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^DUMPE2FS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^E2FSCK$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PFSCK$])
m4trace:configure.ac:24: -1- LIBCFS_CONFIGURE
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GETHOSTBYNAME$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1437: LIBCFS_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LIBREADLINE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LIBREADLINE$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/libcfs/autoconf/lustre-libcfs.m4:1437: LIBCFS_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LIBPTHREAD$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PTHREAD_LIBS$])
m4trace:configure.ac:24: -1- LN_CONFIGURE
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_NETDB_H$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GETHOSTBYNAME$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_STRNLEN$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lnet/autoconf/lustre-lnet.m4:913: LN_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_LIBEFENCE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LIBEFENCE$])
m4trace:configure.ac:24: -1- LN_CONFIG_DLC
m4trace:configure.ac:24: -1- LC_CONFIGURE
m4trace:configure.ac:24: -1- LC_MDS_MAX_THREADS
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:91: LC_MDS_MAX_THREADS is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3448: LC_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MDS_MAX_THREADS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_GETHOSTBYNAME$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_EXT2FS_EXT2FS_H$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SELINUX_SELINUX_H$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SELINUX$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SELINUX$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3448: LC_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MIN_DF$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3448: LC_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^RANDOM_FAIL_ALLOC$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3448: LC_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_LUSTRE_DEBUG_EXPENSIVE_CHECK$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3448: LC_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^USE_LU_REF$])
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/lustre/autoconf/lustre-core.m4:3448: LC_CONFIGURE is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CONFIG_DEBUG_PAGESTATE_TRACKING$])
m4trace:configure.ac:24: -1- PKG_PROG_PKG_CONFIG
m4trace:configure.ac:24: -1- m4_pattern_forbid([^_?PKG_[A-Z_]+$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PKG_CONFIG(_(PATH|LIBDIR|SYSROOT_DIR|ALLOW_SYSTEM_(CFLAGS|LIBS)))?$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PKG_CONFIG_(DISABLE_UNINSTALLED|TOP_BUILD_DIR|DEBUG_SPEW)$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PKG_CONFIG$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PKG_CONFIG_PATH$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PKG_CONFIG_LIBDIR$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PKG_CONFIG$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^systemdsystemunitdir$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^BASH_COMPLETION_DIR$])
m4trace:configure.ac:24: -1- LS_CONFIGURE
m4trace:configure.ac:24: -2- _m4_warn([obsolete], [The macro `AC_HELP_STRING' is obsolete.
You should run autoupdate.], [../../lib/autoconf/general.m4:207: AC_HELP_STRING is expanded from...
/Users/crb002/github/lustre-release/snmp/autoconf/lustre-snmp.m4:57: LS_CONFIGURE is expanded from...
../../lib/m4sugar/m4sh.m4:643: AS_IF is expanded from...
/Users/crb002/github/lustre-release/config/lustre-build.m4:688: LB_CONFIGURE is expanded from...
configure.ac:24: the top level])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NET_SNMP_CONFIG$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NET_SNMP_CFLAGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NET_SNMP_LIBS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^agentdir$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^mibdir$])
m4trace:configure.ac:24: -1- LB_CONDITIONALS
m4trace:configure.ac:24: -1- AM_CONDITIONAL([PLUGINS], [test x$enable_shared = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PLUGINS_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^PLUGINS_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([PLUGINS_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([PLUGINS_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([MODULES], [test x$enable_modules = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MODULES_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MODULES_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([MODULES_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([MODULES_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([UTILS], [test x$enable_utils = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^UTILS_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^UTILS_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([UTILS_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([UTILS_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([TESTS], [test x$enable_tests = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^TESTS_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^TESTS_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([TESTS_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([TESTS_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([DOC], [test x$ENABLE_DOC = x1])
m4trace:configure.ac:24: -1- m4_pattern_allow([^DOC_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^DOC_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([DOC_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([DOC_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([MANPAGES], [test x$enable_manpages = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MANPAGES_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MANPAGES_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([MANPAGES_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([MANPAGES_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([LINUX], [test x$lb_target_os = xlinux])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LINUX_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LINUX_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([LINUX_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([LINUX_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([USE_QUILT], [test x$use_quilt = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^USE_QUILT_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^USE_QUILT_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([USE_QUILT_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([USE_QUILT_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([RHEL], [test x$RHEL_KERNEL = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^RHEL_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^RHEL_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([RHEL_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([RHEL_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([SUSE], [test x$SUSE_KERNEL = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SUSE_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SUSE_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SUSE_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SUSE_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([UBUNTU], [test x$UBUNTU_KERNEL = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^UBUNTU_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^UBUNTU_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([UBUNTU_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([UBUNTU_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([HAVE_PCLMULQDQ], [test x$target_cpu = "xx86_64" -a x$target_vendor != "xk1om"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PCLMULQDQ_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PCLMULQDQ_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([HAVE_PCLMULQDQ_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([HAVE_PCLMULQDQ_FALSE])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_PCLMULQDQ$])
m4trace:configure.ac:24: -1- LIBCFS_CONDITIONALS
m4trace:configure.ac:24: -1- AM_CONDITIONAL([HAVE_CRC32], [test "x$have_crc32" = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CRC32_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_CRC32_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([HAVE_CRC32_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([HAVE_CRC32_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([NEED_PCLMULQDQ_CRC32], [test "x$have_crc32" = xyes -a "x$enable_crc32_crypto" = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NEED_PCLMULQDQ_CRC32_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NEED_PCLMULQDQ_CRC32_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([NEED_PCLMULQDQ_CRC32_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([NEED_PCLMULQDQ_CRC32_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([NEED_PCLMULQDQ_CRC32C], [test "x$enable_crc32c_crypto" = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NEED_PCLMULQDQ_CRC32C_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^NEED_PCLMULQDQ_CRC32C_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([NEED_PCLMULQDQ_CRC32C_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([NEED_PCLMULQDQ_CRC32C_FALSE])
m4trace:configure.ac:24: -1- LN_CONDITIONALS
m4trace:configure.ac:24: -1- AM_CONDITIONAL([BUILD_O2IBLND], [test x$O2IBLND = "xo2iblnd"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^BUILD_O2IBLND_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^BUILD_O2IBLND_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([BUILD_O2IBLND_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([BUILD_O2IBLND_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([BUILD_GNILND], [test x$GNILND  = "xgnilnd"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^BUILD_GNILND_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^BUILD_GNILND_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([BUILD_GNILND_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([BUILD_GNILND_FALSE])
m4trace:configure.ac:24: -1- LC_CONDITIONALS
m4trace:configure.ac:24: -1- AM_CONDITIONAL([MPITESTS], [test x$enable_mpitests = xyes], [Build MPI Tests])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MPITESTS_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MPITESTS_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([MPITESTS_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([MPITESTS_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([CLIENT], [test x$enable_client = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CLIENT_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^CLIENT_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([CLIENT_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([CLIENT_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([SERVER], [test x$enable_server = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SERVER_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SERVER_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SERVER_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SERVER_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([SPLIT], [test x$enable_split = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SPLIT_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SPLIT_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SPLIT_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SPLIT_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([EXT2FS_DEVEL], [test x$ac_cv_header_ext2fs_ext2fs_h = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXT2FS_DEVEL_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXT2FS_DEVEL_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([EXT2FS_DEVEL_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([EXT2FS_DEVEL_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([GSS], [test x$enable_gss = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GSS_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GSS_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GSS_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GSS_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([GSS_KEYRING], [test x$enable_gss_keyring = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GSS_KEYRING_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GSS_KEYRING_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GSS_KEYRING_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GSS_KEYRING_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([GSS_PIPEFS], [test x$enable_gss_pipefs = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GSS_PIPEFS_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GSS_PIPEFS_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GSS_PIPEFS_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GSS_PIPEFS_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([GSS_SSK], [test x$enable_ssk = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GSS_SSK_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GSS_SSK_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GSS_SSK_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GSS_SSK_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([LIBPTHREAD], [test x$enable_libpthread = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LIBPTHREAD_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LIBPTHREAD_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([LIBPTHREAD_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([LIBPTHREAD_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([HAVE_SYSTEMD], [test "x$with_systemdsystemunitdir" != "xno"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SYSTEMD_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^HAVE_SYSTEMD_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([HAVE_SYSTEMD_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([HAVE_SYSTEMD_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([ENABLE_BASH_COMPLETION], [test "x$with_bash_completion_dir" != "xno"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_BASH_COMPLETION_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_BASH_COMPLETION_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([ENABLE_BASH_COMPLETION_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([ENABLE_BASH_COMPLETION_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([XATTR_HANDLER], [test "x$lb_cv_compile_xattr_handler_flags" = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^XATTR_HANDLER_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^XATTR_HANDLER_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([XATTR_HANDLER_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([XATTR_HANDLER_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([SELINUX], [test "$SELINUX" = "-lselinux"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SELINUX_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^SELINUX_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SELINUX_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([SELINUX_FALSE])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([GETSEPOL], [test x$enable_getsepol = xyes])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GETSEPOL_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^GETSEPOL_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GETSEPOL_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([GETSEPOL_FALSE])
m4trace:configure.ac:24: -1- LB_CONFIG_HEADERS
m4trace:configure.ac:24: -1- m4_pattern_allow([^EXTRA_KCFLAGS$])
m4trace:configure.ac:24: -1- LIBCFS_CONFIG_FILES
m4trace:configure.ac:24: -1- LB_CONFIG_FILES
m4trace:configure.ac:24: -1- LN_CONFIG_FILES
m4trace:configure.ac:24: -1- LC_CONFIG_FILES
m4trace:configure.ac:24: -1- LS_CONFIG_FILES
m4trace:configure.ac:24: -1- m4_pattern_allow([^ac_configure_args$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^MOSTLYCLEANFILES$])
m4trace:configure.ac:24: -1- LB_CONFIG_RPMBUILD_OPTIONS
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_GSS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^ENABLE_GSS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^RPMBUILD_BINARY_ARGS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LIB@&t@OBJS$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^LTLIBOBJS$])
m4trace:configure.ac:24: -1- AM_CONDITIONAL([am__EXEEXT], [test -n "$EXEEXT"])
m4trace:configure.ac:24: -1- m4_pattern_allow([^am__EXEEXT_TRUE$])
m4trace:configure.ac:24: -1- m4_pattern_allow([^am__EXEEXT_FALSE$])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([am__EXEEXT_TRUE])
m4trace:configure.ac:24: -1- _AM_SUBST_NOTMAKE([am__EXEEXT_FALSE])
m4trace:configure.ac:24: -1- _AC_AM_CONFIG_HEADER_HOOK(["$ac_file"])
m4trace:configure.ac:24: -1- _AM_OUTPUT_DEPENDENCY_COMMANDS
m4trace:configure.ac:24: -1- _LT_PROG_LTMAIN
